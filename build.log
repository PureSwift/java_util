Build settings from command line:
    SYMROOT = /tmp
Write auxiliary files
write-file /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift-OutputFileMap.json
write-file /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.LinkFileList
java_swift/Sources/HashMap.swift:146:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> JavaObject! {
              ^
         override 
java_swift/Sources/JavaObject.swift:155:15: note: overridden declaration is here
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> JavaObject! {
              ^
java_swift/Sources/HashMap.swift:396:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: JavaObject? ) -> Bool {
              ^
         override 
java_swift/Sources/JavaObject.swift:102:15: note: overridden declaration is here
    open func equals( arg0: JavaObject? ) -> Bool {
              ^
java_swift/Sources/HashMap.swift:404:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: JavaObject? ) -> Bool {
              ^
         override 
java_swift/Sources/JavaObject.swift:110:15: note: overridden declaration is here
    open func equals( _ _arg0: JavaObject? ) -> Bool {
              ^
java_swift/Sources/HashMap.swift:146:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> JavaObject! {
              ^
         override 
java_swift/Sources/JavaObject.swift:155:15: note: overridden declaration is here
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> JavaObject! {
              ^
java_swift/Sources/HashMap.swift:396:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: JavaObject? ) -> Bool {
              ^
         override 
java_swift/Sources/JavaObject.swift:102:15: note: overridden declaration is here
    open func equals( arg0: JavaObject? ) -> Bool {
              ^
java_swift/Sources/HashMap.swift:404:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: JavaObject? ) -> Bool {
              ^
         override 
java_swift/Sources/JavaObject.swift:110:15: note: overridden declaration is here
    open func equals( _ _arg0: JavaObject? ) -> Bool {
              ^
Build settings from command line:
    SYMROOT = /tmp
MergeSwiftModule normal x86_64 /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule
Ditto /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftmodule /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule
    /usr/bin/ditto -rsrc /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftmodule
Ditto /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftdoc /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftdoc
    /usr/bin/ditto -rsrc /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftdoc /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftdoc
Ld /tmp/Debug/java_swift.framework/Versions/A/java_swift normal x86_64
Touch /tmp/Debug/java_swift.framework
    /usr/bin/touch -c /tmp/Debug/java_swift.framework
MergeSwiftModule normal x86_64 /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.swiftmodule
Ditto /tmp/Debug/java_lang.framework/Versions/A/Modules/java_lang.swiftmodule/x86_64.swiftmodule /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.swiftmodule
    /usr/bin/ditto -rsrc /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.swiftmodule /tmp/Debug/java_lang.framework/Versions/A/Modules/java_lang.swiftmodule/x86_64.swiftmodule
Ditto /tmp/Debug/java_lang.framework/Versions/A/Modules/java_lang.swiftmodule/x86_64.swiftdoc /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.swiftdoc
    /usr/bin/ditto -rsrc /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.swiftdoc /tmp/Debug/java_lang.framework/Versions/A/Modules/java_lang.swiftmodule/x86_64.swiftdoc
Ld /tmp/Debug/java_lang.framework/Versions/A/java_lang normal x86_64
Touch /tmp/Debug/java_lang.framework
    /usr/bin/touch -c /tmp/Debug/java_lang.framework
Write auxiliary files
write-file /tmp/java_util.build/Debug/java_util.build/Objects-normal/x86_64/java_util-OutputFileMap.json
write-file /tmp/java_util.build/Debug/java_util.build/Objects-normal/x86_64/java_util.LinkFileList
java_util/Sources/NodeChangeEvent.swift:32:14: error: overriding declaration requires an 'override' keyword
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/EventObject.swift:28:14: note: overridden declaration is here
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/AbstractCollection.swift:244:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/AbstractQueue.swift:74:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractCollection.swift:236:15: note: overridden declaration is here
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/AbstractQueue.swift:82:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractCollection.swift:244:15: note: overridden declaration is here
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentLinkedQueue.swift:117:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:74:15: note: overridden declaration is here
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentLinkedQueue.swift:125:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:82:15: note: overridden declaration is here
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NodeChangeEvent.swift:32:14: error: overriding declaration requires an 'override' keyword
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/EventObject.swift:28:14: note: overridden declaration is here
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/NodeChangeEvent.swift:32:14: error: overriding declaration requires an 'override' keyword
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/EventObject.swift:28:14: note: overridden declaration is here
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/NodeChangeEvent.swift:32:14: error: overriding declaration requires an 'override' keyword
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/EventObject.swift:28:14: note: overridden declaration is here
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/RecursiveAction.swift:80:15: error: overriding declaration requires an 'override' keyword
    open func exec() -> Bool {
              ^
         override 
java_util/Sources/ForkJoinTask.swift:160:15: note: overridden declaration is here
    open func exec() -> Bool {
              ^
java_util/Sources/RecursiveAction.swift:103:15: error: overriding declaration requires an 'override' keyword
    open func setRawResult( _ _mustBeNull: java_swift.JavaObject? ) {
              ^
         override 
java_util/Sources/ForkJoinTask.swift:246:15: note: overridden declaration is here
    open func setRawResult( _ _value: java_swift.JavaObject? ) {
              ^
java_util/Sources/NodeChangeEvent.swift:32:14: error: overriding declaration requires an 'override' keyword
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/EventObject.swift:28:14: note: overridden declaration is here
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/NodeChangeEvent.swift:32:14: error: overriding declaration requires an 'override' keyword
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/EventObject.swift:28:14: note: overridden declaration is here
    open var source: java_swift.JavaObject! {
             ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/ThreadPoolExecutor.swift:181:15: error: overriding declaration requires an 'override' keyword
    open func finalize() {
              ^
         override 
java_swift.JavaObject:8:15: note: overridden declaration is here
    open func finalize() throws
              ^
java_util/Sources/OptionalDouble.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/ThreadPoolExecutor.swift:181:15: error: overriding declaration requires an 'override' keyword
    open func finalize() {
              ^
         override 
java_swift.JavaObject:8:15: note: overridden declaration is here
    open func finalize() throws
              ^
java_util/Sources/ThreadPoolExecutor.swift:181:15: error: overriding declaration requires an 'override' keyword
    open func finalize() {
              ^
         override 
java_swift.JavaObject:8:15: note: overridden declaration is here
    open func finalize() throws
              ^
java_util/Sources/ThreadPoolExecutor.swift:181:15: error: overriding declaration requires an 'override' keyword
    open func finalize() {
              ^
         override 
java_swift.JavaObject:8:15: note: overridden declaration is here
    open func finalize() throws
              ^
java_util/Sources/OptionalDouble.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/ThreadPoolExecutor.swift:181:15: error: overriding declaration requires an 'override' keyword
    open func finalize() {
              ^
         override 
java_swift.JavaObject:8:15: note: overridden declaration is here
    open func finalize() throws
              ^
java_util/Sources/ThreadPoolExecutor.swift:181:15: error: overriding declaration requires an 'override' keyword
    open func finalize() {
              ^
         override 
java_swift.JavaObject:8:15: note: overridden declaration is here
    open func finalize() throws
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/OptionalLong.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/OptionalLong.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/OptionalLong.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/OptionalLong.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/OptionalLong.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/OptionalLong.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/OptionalLong.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/OptionalLong.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/OptionalInt.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/OptionalInt.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/OptionalInt.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/OptionalInt.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/OptionalInt.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/OptionalInt.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/OptionalInt.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/OptionalInt.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/Optional.swift:56:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/Optional.swift:56:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/Optional.swift:56:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/Optional.swift:56:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/Optional.swift:56:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/Optional.swift:56:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/Optional.swift:56:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/Optional.swift:56:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/PreferenceChangeEvent.swift:34:14: error: overriding declaration requires an 'override' keyword
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/EventObject.swift:28:14: note: overridden declaration is here
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/PreferenceChangeEvent.swift:34:14: error: overriding declaration requires an 'override' keyword
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/EventObject.swift:28:14: note: overridden declaration is here
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/PreferenceChangeEvent.swift:34:14: error: overriding declaration requires an 'override' keyword
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/EventObject.swift:28:14: note: overridden declaration is here
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/PreferenceChangeEvent.swift:34:14: error: overriding declaration requires an 'override' keyword
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/EventObject.swift:28:14: note: overridden declaration is here
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/PreferenceChangeEvent.swift:34:14: error: overriding declaration requires an 'override' keyword
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/EventObject.swift:28:14: note: overridden declaration is here
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/ForkJoinPool.swift:254:15: error: overriding declaration requires an 'override' keyword
    open func execute( _ _task: java_swift.Runnable? ) {
              ^
         override 
java_util/Sources/AbstractExecutorService.swift:223:15: note: overridden declaration is here
    open func execute( _ _command: java_swift.Runnable? ) {
              ^
java_util/Sources/ForkJoinPool.swift:541:15: error: overriding declaration requires an 'override' keyword
    open func newTaskFor( callable: Callable? ) -> RunnableFuture! {
              ^
         override 
java_util/Sources/AbstractExecutorService.swift:111:15: note: overridden declaration is here
    open func newTaskFor( callable: Callable? ) -> RunnableFuture! {
              ^
java_util/Sources/ForkJoinPool.swift:550:15: error: overriding declaration requires an 'override' keyword
    open func newTaskFor( _ _callable: Callable? ) -> RunnableFuture! {
              ^
         override 
java_util/Sources/AbstractExecutorService.swift:120:15: note: overridden declaration is here
    open func newTaskFor( _ _callable: Callable? ) -> RunnableFuture! {
              ^
java_util/Sources/ForkJoinPool.swift:558:15: error: overriding declaration requires an 'override' keyword
    open func newTaskFor( runnable: java_swift.Runnable?, value: java_swift.JavaObject? ) -> RunnableFuture! {
              ^
         override 
java_util/Sources/AbstractExecutorService.swift:93:15: note: overridden declaration is here
    open func newTaskFor( runnable: java_swift.Runnable?, value: java_swift.JavaObject? ) -> RunnableFuture! {
              ^
java_util/Sources/ForkJoinPool.swift:568:15: error: overriding declaration requires an 'override' keyword
    open func newTaskFor( _ _runnable: java_swift.Runnable?, _ _value: java_swift.JavaObject? ) -> RunnableFuture! {
              ^
         override 
java_util/Sources/AbstractExecutorService.swift:103:15: note: overridden declaration is here
    open func newTaskFor( _ _runnable: java_swift.Runnable?, _ _value: java_swift.JavaObject? ) -> RunnableFuture! {
              ^
java_util/Sources/PreferenceChangeEvent.swift:34:14: error: overriding declaration requires an 'override' keyword
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/EventObject.swift:28:14: note: overridden declaration is here
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/PreferenceChangeEvent.swift:34:14: error: overriding declaration requires an 'override' keyword
    open var source: java_swift.JavaObject! {
             ^
java_util/Sources/EventObject.swift:28:14: note: overridden declaration is here
    open var source: java_swift.JavaObject! {
             ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/List.swift:136:15: error: overriding declaration requires an 'override' keyword
    open func add( e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:101:15: note: overridden declaration is here
    open func add( e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/List.swift:144:15: error: overriding declaration requires an 'override' keyword
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:109:15: note: overridden declaration is here
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/List.swift:168:15: error: overriding declaration requires an 'override' keyword
    open func remove( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:117:15: note: overridden declaration is here
    open func remove( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/List.swift:176:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:125:15: note: overridden declaration is here
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/List.swift:218:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:133:15: note: overridden declaration is here
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/List.swift:226:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:141:15: note: overridden declaration is here
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/List.swift:234:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_util/Sources/Collection.swift:149:15: note: overridden declaration is here
    open func hashCode() -> Int {
              ^
java_util/Sources/List.swift:262:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_util/Sources/Collection.swift:161:15: note: overridden declaration is here
    open func clear() {
              ^
java_util/Sources/List.swift:273:15: error: overriding declaration requires an 'override' keyword
    open func isEmpty() -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:172:15: note: overridden declaration is here
    open func isEmpty() -> Bool {
              ^
java_util/Sources/List.swift:301:15: error: overriding declaration requires an 'override' keyword
    open func contains( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:184:15: note: overridden declaration is here
    open func contains( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/List.swift:309:15: error: overriding declaration requires an 'override' keyword
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:192:15: note: overridden declaration is here
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/List.swift:332:15: error: overriding declaration requires an 'override' keyword
    open func size() -> Int {
              ^
         override 
java_util/Sources/Collection.swift:200:15: note: overridden declaration is here
    open func size() -> Int {
              ^
java_util/Sources/List.swift:362:15: error: overriding declaration requires an 'override' keyword
    open func toArray() -> [JavaObject]! {
              ^
         override 
java_util/Sources/Collection.swift:228:15: note: overridden declaration is here
    open func toArray() -> [JavaObject]! {
              ^
java_util/Sources/List.swift:374:15: error: overriding declaration requires an 'override' keyword
    open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/Collection.swift:212:15: note: overridden declaration is here
    open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
              ^
java_util/Sources/List.swift:382:15: error: overriding declaration requires an 'override' keyword
    open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/Collection.swift:220:15: note: overridden declaration is here
    open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
              ^
java_util/Sources/List.swift:390:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/Collection.swift:240:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/List.swift:403:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/Collection.swift:253:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/List.swift:416:15: error: overriding declaration requires an 'override' keyword
    open func addAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:266:15: note: overridden declaration is here
    open func addAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/List.swift:424:15: error: overriding declaration requires an 'override' keyword
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:274:15: note: overridden declaration is here
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/List.swift:467:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:295:15: note: overridden declaration is here
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/List.swift:475:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:303:15: note: overridden declaration is here
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/List.swift:483:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:311:15: note: overridden declaration is here
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/List.swift:491:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:319:15: note: overridden declaration is here
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/List.swift:499:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:327:15: note: overridden declaration is here
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/List.swift:507:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:335:15: note: overridden declaration is here
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/List.swift:560:15: error: overriding declaration requires an 'override' keyword
    open func stream() -> Stream! {
              ^
         override 
java_util/Sources/Collection.swift:282:15: note: overridden declaration is here
    open func stream() -> Stream! {
              ^
java_util/Sources/List.swift:573:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:343:15: note: overridden declaration is here
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
java_util/Sources/List.swift:581:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:351:15: note: overridden declaration is here
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
java_util/Sources/List.swift:589:15: error: overriding declaration requires an 'override' keyword
    open func parallelStream() -> Stream! {
              ^
         override 
java_util/Sources/Collection.swift:359:15: note: overridden declaration is here
    open func parallelStream() -> Stream! {
              ^
java_util/Sources/List.swift:602:15: error: overriding declaration requires an 'override' keyword
    open func forEach( action: Consumer? ) {
              ^
         override 
java_util/Sources/Collection.swift:372:15: note: overridden declaration is here
    open func forEach( action: Consumer? ) {
              ^
java_util/Sources/List.swift:609:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _action: Consumer? ) {
              ^
         override 
java_util/Sources/Collection.swift:379:15: note: overridden declaration is here
    open func forEach( _ _action: Consumer? ) {
              ^
java_util/Sources/RunnableFuture.swift:29:15: error: overriding declaration requires an 'override' keyword
    open func run() {
              ^
         override 
java_swift.RunnableForward:2:15: note: overridden declaration is here
    open func run()
              ^
java_util/Sources/SimpleTimeZone.swift:257:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/SimpleTimeZone.swift:290:15: error: overriding declaration requires an 'override' keyword
    open func getOffset( _ _era: Int, _ _year: Int, _ _month: Int, _ _day: Int, _ _dayOfWeek: Int, _ _millis: Int ) -> Int {
              ^
         override 
java_util/Sources/TimeZone.swift:141:15: note: overridden declaration is here
    open func getOffset( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int ) -> Int {
              ^
java_util/Sources/SimpleTimeZone.swift:306:15: error: overriding declaration requires an 'override' keyword
    open func getOffset( _ _date: Int64 ) -> Int {
              ^
         override 
java_util/Sources/TimeZone.swift:120:15: note: overridden declaration is here
    open func getOffset( _ _arg0: Int64 ) -> Int {
              ^
java_util/Sources/SimpleTimeZone.swift:323:15: error: overriding declaration requires an 'override' keyword
    open func setRawOffset( _ _offsetMillis: Int ) {
              ^
         override 
java_util/Sources/TimeZone.swift:183:15: note: overridden declaration is here
    open func setRawOffset( _ _arg0: Int ) {
              ^
java_util/Sources/SimpleTimeZone.swift:345:15: error: overriding declaration requires an 'override' keyword
    open func inDaylightTime( _ _date: Date? ) -> Bool {
              ^
         override 
java_util/Sources/TimeZone.swift:252:15: note: overridden declaration is here
    open func inDaylightTime( _ _arg0: Date? ) -> Bool {
              ^
java_util/Sources/SimpleTimeZone.swift:361:15: error: overriding declaration requires an 'override' keyword
    open func hasSameRules( _ _other: TimeZone? ) -> Bool {
              ^
         override 
java_util/Sources/TimeZone.swift:315:15: note: overridden declaration is here
    open func hasSameRules( _ _arg0: TimeZone? ) -> Bool {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/Date.swift:162:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/Date.swift:174:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/JavaLocale.swift:392:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/Date.swift:162:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/Date.swift:174:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/DelayQueue.swift:286:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:74:24: note: overridden declaration is here
    override open func equals( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/DelayQueue.swift:294:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:82:24: note: overridden declaration is here
    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/GregorianCalendar.swift:210:14: error: overriding declaration requires an 'override' keyword
    open var fields: [Int32]! {
             ^
java_util/Sources/Calendar.swift:582:14: note: overridden declaration is here
    open var fields: [Int32]! {
             ^
java_util/Sources/GregorianCalendar.swift:227:14: error: overriding declaration requires an 'override' keyword
    open var isSet: [Bool]! {
             ^
java_util/Sources/Calendar.swift:599:14: note: overridden declaration is here
    open var isSet: [Bool]! {
             ^
java_util/Sources/GregorianCalendar.swift:246:14: error: overriding declaration requires an 'override' keyword
    open var time: Int64 {
             ^
java_util/Sources/Calendar.swift:618:14: note: overridden declaration is here
    open var time: Int64 {
             ^
java_util/Sources/GregorianCalendar.swift:263:14: error: overriding declaration requires an 'override' keyword
    open var isTimeSet: Bool {
             ^
java_util/Sources/Calendar.swift:635:14: note: overridden declaration is here
    open var isTimeSet: Bool {
             ^
java_util/Sources/GregorianCalendar.swift:280:14: error: overriding declaration requires an 'override' keyword
    open var areFieldsSet: Bool {
             ^
java_util/Sources/Calendar.swift:652:14: note: overridden declaration is here
    open var areFieldsSet: Bool {
             ^
java_util/Sources/GregorianCalendar.swift:505:15: error: overriding declaration requires an 'override' keyword
    open func add( _ _field: Int, _ _amount: Int ) {
              ^
         override 
java_util/Sources/Calendar.swift:777:15: note: overridden declaration is here
    open func add( _ _arg0: Int, _ _arg1: Int ) {
              ^
java_util/Sources/GregorianCalendar.swift:521:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/GregorianCalendar.swift:579:15: error: overriding declaration requires an 'override' keyword
    open func setWeekDate( _ _weekYear: Int, _ _weekOfYear: Int, _ _dayOfWeek: Int ) {
              ^
         override 
java_util/Sources/Calendar.swift:1151:15: note: overridden declaration is here
    open func setWeekDate( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) {
              ^
java_util/Sources/GregorianCalendar.swift:606:15: error: overriding declaration requires an 'override' keyword
    open func computeTime() {
              ^
         override 
java_util/Sources/Calendar.swift:1248:15: note: overridden declaration is here
    open func computeTime() {
              ^
java_util/Sources/GregorianCalendar.swift:619:15: error: overriding declaration requires an 'override' keyword
    open func computeFields() {
              ^
         override 
java_util/Sources/Calendar.swift:1259:15: note: overridden declaration is here
    open func computeFields() {
              ^
java_util/Sources/GregorianCalendar.swift:638:15: error: overriding declaration requires an 'override' keyword
    open func roll( _ _field: Int, _ _amount: Int ) {
              ^
         override 
java_util/Sources/Calendar.swift:1330:15: note: overridden declaration is here
    open func roll( _ _arg0: Int, _ _arg1: Int ) {
              ^
java_util/Sources/GregorianCalendar.swift:654:15: error: overriding declaration requires an 'override' keyword
    open func roll( _ _field: Int, _ _up: Bool ) {
              ^
         override 
java_util/Sources/Calendar.swift:1346:15: note: overridden declaration is here
    open func roll( _ _arg0: Int, _ _arg1: Bool ) {
              ^
java_util/Sources/GregorianCalendar.swift:674:15: error: overriding declaration requires an 'override' keyword
    open func getMinimum( _ _field: Int ) -> Int {
              ^
         override 
java_util/Sources/Calendar.swift:1400:15: note: overridden declaration is here
    open func getMinimum( _ _arg0: Int ) -> Int {
              ^
java_util/Sources/GregorianCalendar.swift:690:15: error: overriding declaration requires an 'override' keyword
    open func getMaximum( _ _field: Int ) -> Int {
              ^
         override 
java_util/Sources/Calendar.swift:1416:15: note: overridden declaration is here
    open func getMaximum( _ _arg0: Int ) -> Int {
              ^
java_util/Sources/GregorianCalendar.swift:706:15: error: overriding declaration requires an 'override' keyword
    open func getGreatestMinimum( _ _field: Int ) -> Int {
              ^
         override 
java_util/Sources/Calendar.swift:1432:15: note: overridden declaration is here
    open func getGreatestMinimum( _ _arg0: Int ) -> Int {
              ^
java_util/Sources/GregorianCalendar.swift:722:15: error: overriding declaration requires an 'override' keyword
    open func getLeastMaximum( _ _field: Int ) -> Int {
              ^
         override 
java_util/Sources/Calendar.swift:1448:15: note: overridden declaration is here
    open func getLeastMaximum( _ _arg0: Int ) -> Int {
              ^
java_util/Sources/GregorianCalendar.swift:738:15: error: overriding declaration requires an 'override' keyword
    open func getActualMinimum( _ _field: Int ) -> Int {
              ^
         override 
java_util/Sources/Calendar.swift:1464:15: note: overridden declaration is here
    open func getActualMinimum( _ _arg0: Int ) -> Int {
              ^
java_util/Sources/GregorianCalendar.swift:754:15: error: overriding declaration requires an 'override' keyword
    open func getActualMaximum( _ _field: Int ) -> Int {
              ^
         override 
java_util/Sources/Calendar.swift:1480:15: note: overridden declaration is here
    open func getActualMaximum( _ _arg0: Int ) -> Int {
              ^
java_util/Sources/GregorianCalendar.swift:771:15: error: overriding declaration requires an 'override' keyword
    open func setTimeZone( _ _zone: TimeZone? ) {
              ^
         override 
java_util/Sources/Calendar.swift:1548:15: note: overridden declaration is here
    open func setTimeZone( _ _arg0: TimeZone? ) {
              ^
java_util/Sources/ArrayList.swift:44:14: error: overriding declaration requires an 'override' keyword
    open var modCount: Int {
             ^
java_util/Sources/AbstractList.swift:26:14: note: overridden declaration is here
    open var modCount: Int {
             ^
java_util/Sources/ArrayList.swift:119:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/ArrayList.swift:208:15: error: overriding declaration requires an 'override' keyword
    open func removeRange( fromIndex: Int, toIndex: Int ) {
              ^
         override 
java_util/Sources/AbstractList.swift:216:15: note: overridden declaration is here
    open func removeRange( fromIndex: Int, toIndex: Int ) {
              ^
java_util/Sources/ArrayList.swift:216:15: error: overriding declaration requires an 'override' keyword
    open func removeRange( _ _fromIndex: Int, _ _toIndex: Int ) {
              ^
         override 
java_util/Sources/AbstractList.swift:224:15: note: overridden declaration is here
    open func removeRange( _ _fromIndex: Int, _ _toIndex: Int ) {
              ^
java_util/Sources/JavaLocale.swift:392:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/JavaLocale.swift:392:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/RecursiveTask.swift:83:15: error: overriding declaration requires an 'override' keyword
    open func exec() -> Bool {
              ^
         override 
java_util/Sources/ForkJoinTask.swift:160:15: note: overridden declaration is here
    open func exec() -> Bool {
              ^
java_util/Sources/RecursiveTask.swift:97:15: error: overriding declaration requires an 'override' keyword
    open func setRawResult( value: java_swift.JavaObject? ) {
              ^
         override 
java_util/Sources/ForkJoinTask.swift:239:15: note: overridden declaration is here
    open func setRawResult( value: java_swift.JavaObject? ) {
              ^
java_util/Sources/RecursiveTask.swift:104:15: error: overriding declaration requires an 'override' keyword
    open func setRawResult( _ _value: java_swift.JavaObject? ) {
              ^
         override 
java_util/Sources/ForkJoinTask.swift:246:15: note: overridden declaration is here
    open func setRawResult( _ _value: java_swift.JavaObject? ) {
              ^
java_util/Sources/SimpleFormatter.swift:50:15: error: overriding declaration requires an 'override' keyword
    open func format( _ _arg0: LogRecord? ) -> String! {
              ^
         override 
java_util/Sources/logging_Formatter.swift:46:15: note: overridden declaration is here
    open func format( _ _record: LogRecord? ) -> String! {
              ^
java_util/Sources/JavaLocale.swift:392:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/TreeSet.swift:107:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/NavigableSet.swift:84:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/SortedSet.swift:295:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/NavigableSet.swift:151:15: error: overriding declaration requires an 'override' keyword
    open func subSet( fromElement: java_swift.JavaObject?, toElement: java_swift.JavaObject? ) -> SortedSet! {
              ^
         override 
java_util/Sources/SortedSet.swift:104:15: note: overridden declaration is here
    open func subSet( fromElement: java_swift.JavaObject?, toElement: java_swift.JavaObject? ) -> SortedSet! {
              ^
java_util/Sources/NavigableSet.swift:161:15: error: overriding declaration requires an 'override' keyword
    open func subSet( _ _fromElement: java_swift.JavaObject?, _ _toElement: java_swift.JavaObject? ) -> SortedSet! {
              ^
         override 
java_util/Sources/SortedSet.swift:114:15: note: overridden declaration is here
    open func subSet( _ _fromElement: java_swift.JavaObject?, _ _toElement: java_swift.JavaObject? ) -> SortedSet! {
              ^
java_util/Sources/NavigableSet.swift:169:15: error: overriding declaration requires an 'override' keyword
    open func headSet( toElement: java_swift.JavaObject? ) -> SortedSet! {
              ^
         override 
java_util/Sources/SortedSet.swift:122:15: note: overridden declaration is here
    open func headSet( toElement: java_swift.JavaObject? ) -> SortedSet! {
              ^
java_util/Sources/NavigableSet.swift:178:15: error: overriding declaration requires an 'override' keyword
    open func headSet( _ _toElement: java_swift.JavaObject? ) -> SortedSet! {
              ^
         override 
java_util/Sources/SortedSet.swift:131:15: note: overridden declaration is here
    open func headSet( _ _toElement: java_swift.JavaObject? ) -> SortedSet! {
              ^
java_util/Sources/NavigableSet.swift:222:15: error: overriding declaration requires an 'override' keyword
    open func tailSet( fromElement: java_swift.JavaObject? ) -> SortedSet! {
              ^
         override 
java_util/Sources/SortedSet.swift:139:15: note: overridden declaration is here
    open func tailSet( fromElement: java_swift.JavaObject? ) -> SortedSet! {
              ^
java_util/Sources/NavigableSet.swift:231:15: error: overriding declaration requires an 'override' keyword
    open func tailSet( _ _fromElement: java_swift.JavaObject? ) -> SortedSet! {
              ^
         override 
java_util/Sources/SortedSet.swift:148:15: note: overridden declaration is here
    open func tailSet( _ _fromElement: java_swift.JavaObject? ) -> SortedSet! {
              ^
java_util/Sources/ExecutorService.swift:277:15: error: overriding declaration requires an 'override' keyword
    open func execute( command: java_swift.Runnable? ) {
              ^
         override 
java_util/Sources/Executor.swift:28:15: note: overridden declaration is here
    open func execute( command: java_swift.Runnable? ) {
              ^
java_util/Sources/ExecutorService.swift:284:15: error: overriding declaration requires an 'override' keyword
    open func execute( _ _command: java_swift.Runnable? ) {
              ^
         override 
java_util/Sources/Executor.swift:35:15: note: overridden declaration is here
    open func execute( _ _command: java_swift.Runnable? ) {
              ^
java_util/Sources/Stream.swift:795:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:57:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/Stream.swift:808:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:70:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/BaseStream.swift:83:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_lang.AutoCloseableForward:2:15: note: overridden declaration is here
    open func close() throws
              ^
java_util/Sources/Stream.swift:821:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_util/Sources/BaseStream.swift:83:15: note: overridden declaration is here
    open func close() {
              ^
java_util/Sources/Stream.swift:832:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:94:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/Stream.swift:845:15: error: overriding declaration requires an 'override' keyword
    open func isParallel() -> Bool {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func isParallel() -> Bool {
              ^
java_util/Sources/Stream.swift:857:15: error: overriding declaration requires an 'override' keyword
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:119:15: note: overridden declaration is here
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/Stream.swift:866:15: error: overriding declaration requires an 'override' keyword
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:128:15: note: overridden declaration is here
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/Stream.swift:874:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:136:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/Stream.swift:887:15: error: overriding declaration requires an 'override' keyword
    open func unordered() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:149:15: note: overridden declaration is here
    open func unordered() -> BaseStream! {
              ^
java_util/Sources/JavaLocale.swift:392:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/AbstractSequentialList.swift:26:14: error: overriding declaration requires an 'override' keyword
    open var modCount: Int {
             ^
java_util/Sources/AbstractList.swift:26:14: note: overridden declaration is here
    open var modCount: Int {
             ^
java_util/Sources/LinkedList.swift:38:14: error: overriding declaration requires an 'override' keyword
    open var modCount: Int {
             ^
java_util/Sources/AbstractSequentialList.swift:26:14: note: overridden declaration is here
    open var modCount: Int {
             ^
java_util/Sources/LinkedList.swift:109:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/JavaLocale.swift:392:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/LinkedBlockingDeque.swift:652:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:74:24: note: overridden declaration is here
    override open func equals( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/LinkedBlockingDeque.swift:660:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:82:24: note: overridden declaration is here
    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/Queue.swift:48:15: error: overriding declaration requires an 'override' keyword
    open func add( e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:101:15: note: overridden declaration is here
    open func add( e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/Queue.swift:56:15: error: overriding declaration requires an 'override' keyword
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:109:15: note: overridden declaration is here
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:69:15: error: overriding declaration requires an 'override' keyword
    open func add( e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:48:15: note: overridden declaration is here
    open func add( e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:77:15: error: overriding declaration requires an 'override' keyword
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:56:15: note: overridden declaration is here
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:141:15: error: overriding declaration requires an 'override' keyword
    open func add( e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:69:15: note: overridden declaration is here
    open func add( e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:149:15: error: overriding declaration requires an 'override' keyword
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:77:15: note: overridden declaration is here
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/Queue.swift:132:15: error: overriding declaration requires an 'override' keyword
    open func remove( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:117:15: note: overridden declaration is here
    open func remove( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/Queue.swift:140:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:125:15: note: overridden declaration is here
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:254:15: error: overriding declaration requires an 'override' keyword
    open func remove() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/Queue.swift:64:15: note: overridden declaration is here
    open func remove() -> java_swift.JavaObject! {
              ^
java_util/Sources/BlockingQueue.swift:85:15: error: overriding declaration requires an 'override' keyword
    open func remove( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:132:15: note: overridden declaration is here
    open func remove( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:93:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:140:15: note: overridden declaration is here
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:157:15: error: overriding declaration requires an 'override' keyword
    open func remove() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:254:15: note: overridden declaration is here
    open func remove() -> java_swift.JavaObject! {
              ^
java_util/Sources/BlockingDeque.swift:170:15: error: overriding declaration requires an 'override' keyword
    open func remove( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:85:15: note: overridden declaration is here
    open func remove( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:178:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:93:15: note: overridden declaration is here
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:186:15: error: overriding declaration requires an 'override' keyword
    open func put( e: java_swift.JavaObject? ) throws /* java.lang.InterruptedException */ {
              ^
         override 
java_util/Sources/BlockingQueue.swift:101:15: note: overridden declaration is here
    open func put( e: java_swift.JavaObject? ) throws /* java.lang.InterruptedException */ {
              ^
java_util/Sources/BlockingDeque.swift:196:15: error: overriding declaration requires an 'override' keyword
    open func put( _ _e: java_swift.JavaObject? ) throws /* java.lang.InterruptedException */ {
              ^
         override 
java_util/Sources/BlockingQueue.swift:111:15: note: overridden declaration is here
    open func put( _ _e: java_swift.JavaObject? ) throws /* java.lang.InterruptedException */ {
              ^
java_util/Sources/Queue.swift:199:15: error: overriding declaration requires an 'override' keyword
    open func contains( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:184:15: note: overridden declaration is here
    open func contains( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/Queue.swift:207:15: error: overriding declaration requires an 'override' keyword
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:192:15: note: overridden declaration is here
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:119:15: error: overriding declaration requires an 'override' keyword
    open func contains( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:199:15: note: overridden declaration is here
    open func contains( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:127:15: error: overriding declaration requires an 'override' keyword
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:207:15: note: overridden declaration is here
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:204:15: error: overriding declaration requires an 'override' keyword
    open func contains( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:119:15: note: overridden declaration is here
    open func contains( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:212:15: error: overriding declaration requires an 'override' keyword
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:127:15: note: overridden declaration is here
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/Queue.swift:215:15: error: overriding declaration requires an 'override' keyword
    open func size() -> Int {
              ^
         override 
java_util/Sources/Collection.swift:200:15: note: overridden declaration is here
    open func size() -> Int {
              ^
java_util/Sources/BlockingQueue.swift:357:15: error: overriding declaration requires an 'override' keyword
    open func size() -> Int {
              ^
         override 
java_util/Sources/Queue.swift:215:15: note: overridden declaration is here
    open func size() -> Int {
              ^
java_util/Sources/BlockingDeque.swift:220:15: error: overriding declaration requires an 'override' keyword
    open func size() -> Int {
              ^
         override 
java_util/Sources/BlockingQueue.swift:357:15: note: overridden declaration is here
    open func size() -> Int {
              ^
java_util/Sources/Queue.swift:255:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/Collection.swift:240:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/BlockingQueue.swift:397:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/Queue.swift:255:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/BlockingDeque.swift:232:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:397:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/BlockingQueue.swift:267:15: error: overriding declaration requires an 'override' keyword
    open func poll() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/Queue.swift:77:15: note: overridden declaration is here
    open func poll() -> java_swift.JavaObject! {
              ^
java_util/Sources/BlockingDeque.swift:260:15: error: overriding declaration requires an 'override' keyword
    open func poll( timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:135:15: note: overridden declaration is here
    open func poll( timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/BlockingDeque.swift:273:15: error: overriding declaration requires an 'override' keyword
    open func poll( _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:148:15: note: overridden declaration is here
    open func poll( _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/BlockingDeque.swift:281:15: error: overriding declaration requires an 'override' keyword
    open func poll() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:267:15: note: overridden declaration is here
    open func poll() -> java_swift.JavaObject! {
              ^
java_util/Sources/BlockingQueue.swift:280:15: error: overriding declaration requires an 'override' keyword
    open func peek() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/Queue.swift:90:15: note: overridden declaration is here
    open func peek() -> java_swift.JavaObject! {
              ^
java_util/Sources/BlockingDeque.swift:294:15: error: overriding declaration requires an 'override' keyword
    open func peek() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:280:15: note: overridden declaration is here
    open func peek() -> java_swift.JavaObject! {
              ^
java_util/Sources/BlockingQueue.swift:293:15: error: overriding declaration requires an 'override' keyword
    open func element() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/Queue.swift:103:15: note: overridden declaration is here
    open func element() -> java_swift.JavaObject! {
              ^
java_util/Sources/BlockingDeque.swift:307:15: error: overriding declaration requires an 'override' keyword
    open func element() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:293:15: note: overridden declaration is here
    open func element() -> java_swift.JavaObject! {
              ^
java_util/Sources/BlockingDeque.swift:320:15: error: overriding declaration requires an 'override' keyword
    open func take() throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:156:15: note: overridden declaration is here
    open func take() throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/BlockingQueue.swift:238:15: error: overriding declaration requires an 'override' keyword
    open func offer( e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:116:15: note: overridden declaration is here
    open func offer( e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:246:15: error: overriding declaration requires an 'override' keyword
    open func offer( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:124:15: note: overridden declaration is here
    open func offer( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:582:15: error: overriding declaration requires an 'override' keyword
    open func offer( e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:238:15: note: overridden declaration is here
    open func offer( e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:590:15: error: overriding declaration requires an 'override' keyword
    open func offer( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:246:15: note: overridden declaration is here
    open func offer( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:598:15: error: overriding declaration requires an 'override' keyword
    open func offer( e: java_swift.JavaObject?, timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:217:15: note: overridden declaration is here
    open func offer( e: java_swift.JavaObject?, timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:611:15: error: overriding declaration requires an 'override' keyword
    open func offer( _ _e: java_swift.JavaObject?, _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:230:15: note: overridden declaration is here
    open func offer( _ _e: java_swift.JavaObject?, _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:619:15: error: overriding declaration requires an 'override' keyword
    open func remainingCapacity() -> Int {
              ^
         override 
java_util/Sources/BlockingQueue.swift:172:15: note: overridden declaration is here
    open func remainingCapacity() -> Int {
              ^
java_util/Sources/BlockingDeque.swift:631:15: error: overriding declaration requires an 'override' keyword
    open func drainTo( c: Collection?, maxElements: Int ) -> Int {
              ^
         override 
java_util/Sources/BlockingQueue.swift:184:15: note: overridden declaration is here
    open func drainTo( c: Collection?, maxElements: Int ) -> Int {
              ^
java_util/Sources/BlockingDeque.swift:640:15: error: overriding declaration requires an 'override' keyword
    open func drainTo( _ _c: Collection?, _ _maxElements: Int ) -> Int {
              ^
         override 
java_util/Sources/BlockingQueue.swift:193:15: note: overridden declaration is here
    open func drainTo( _ _c: Collection?, _ _maxElements: Int ) -> Int {
              ^
java_util/Sources/BlockingDeque.swift:648:15: error: overriding declaration requires an 'override' keyword
    open func drainTo( c: Collection? ) -> Int {
              ^
         override 
java_util/Sources/BlockingQueue.swift:201:15: note: overridden declaration is here
    open func drainTo( c: Collection? ) -> Int {
              ^
java_util/Sources/BlockingDeque.swift:656:15: error: overriding declaration requires an 'override' keyword
    open func drainTo( _ _c: Collection? ) -> Int {
              ^
         override 
java_util/Sources/BlockingQueue.swift:209:15: note: overridden declaration is here
    open func drainTo( _ _c: Collection? ) -> Int {
              ^
java_util/Sources/Queue.swift:148:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:133:15: note: overridden declaration is here
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/Queue.swift:156:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:141:15: note: overridden declaration is here
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:306:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:148:15: note: overridden declaration is here
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:314:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:156:15: note: overridden declaration is here
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:664:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:306:15: note: overridden declaration is here
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:672:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:314:15: note: overridden declaration is here
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/Queue.swift:164:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_util/Sources/Collection.swift:149:15: note: overridden declaration is here
    open func hashCode() -> Int {
              ^
java_util/Sources/BlockingQueue.swift:322:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_util/Sources/Queue.swift:164:15: note: overridden declaration is here
    open func hashCode() -> Int {
              ^
java_util/Sources/BlockingDeque.swift:680:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_util/Sources/BlockingQueue.swift:322:15: note: overridden declaration is here
    open func hashCode() -> Int {
              ^
java_util/Sources/Queue.swift:176:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_util/Sources/Collection.swift:161:15: note: overridden declaration is here
    open func clear() {
              ^
java_util/Sources/BlockingQueue.swift:334:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_util/Sources/Queue.swift:176:15: note: overridden declaration is here
    open func clear() {
              ^
java_util/Sources/BlockingDeque.swift:692:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_util/Sources/BlockingQueue.swift:334:15: note: overridden declaration is here
    open func clear() {
              ^
java_util/Sources/Queue.swift:187:15: error: overriding declaration requires an 'override' keyword
    open func isEmpty() -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:172:15: note: overridden declaration is here
    open func isEmpty() -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:345:15: error: overriding declaration requires an 'override' keyword
    open func isEmpty() -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:187:15: note: overridden declaration is here
    open func isEmpty() -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:703:15: error: overriding declaration requires an 'override' keyword
    open func isEmpty() -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:345:15: note: overridden declaration is here
    open func isEmpty() -> Bool {
              ^
java_util/Sources/Queue.swift:227:15: error: overriding declaration requires an 'override' keyword
    open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/Collection.swift:212:15: note: overridden declaration is here
    open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
              ^
java_util/Sources/Queue.swift:235:15: error: overriding declaration requires an 'override' keyword
    open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/Collection.swift:220:15: note: overridden declaration is here
    open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
              ^
java_util/Sources/Queue.swift:243:15: error: overriding declaration requires an 'override' keyword
    open func toArray() -> [JavaObject]! {
              ^
         override 
java_util/Sources/Collection.swift:228:15: note: overridden declaration is here
    open func toArray() -> [JavaObject]! {
              ^
java_util/Sources/BlockingQueue.swift:369:15: error: overriding declaration requires an 'override' keyword
    open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/Queue.swift:227:15: note: overridden declaration is here
    open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
              ^
java_util/Sources/BlockingQueue.swift:377:15: error: overriding declaration requires an 'override' keyword
    open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/Queue.swift:235:15: note: overridden declaration is here
    open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
              ^
java_util/Sources/BlockingQueue.swift:385:15: error: overriding declaration requires an 'override' keyword
    open func toArray() -> [JavaObject]! {
              ^
         override 
java_util/Sources/Queue.swift:243:15: note: overridden declaration is here
    open func toArray() -> [JavaObject]! {
              ^
java_util/Sources/BlockingDeque.swift:715:15: error: overriding declaration requires an 'override' keyword
    open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:369:15: note: overridden declaration is here
    open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
              ^
java_util/Sources/BlockingDeque.swift:723:15: error: overriding declaration requires an 'override' keyword
    open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:377:15: note: overridden declaration is here
    open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
              ^
java_util/Sources/BlockingDeque.swift:731:15: error: overriding declaration requires an 'override' keyword
    open func toArray() -> [JavaObject]! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:385:15: note: overridden declaration is here
    open func toArray() -> [JavaObject]! {
              ^
java_util/Sources/Queue.swift:268:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/Collection.swift:253:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/BlockingQueue.swift:410:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/Queue.swift:268:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/BlockingDeque.swift:743:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:410:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/Queue.swift:281:15: error: overriding declaration requires an 'override' keyword
    open func addAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:266:15: note: overridden declaration is here
    open func addAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/Queue.swift:289:15: error: overriding declaration requires an 'override' keyword
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:274:15: note: overridden declaration is here
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:423:15: error: overriding declaration requires an 'override' keyword
    open func addAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:281:15: note: overridden declaration is here
    open func addAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:431:15: error: overriding declaration requires an 'override' keyword
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:289:15: note: overridden declaration is here
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:756:15: error: overriding declaration requires an 'override' keyword
    open func addAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:423:15: note: overridden declaration is here
    open func addAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:764:15: error: overriding declaration requires an 'override' keyword
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:431:15: note: overridden declaration is here
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/Queue.swift:297:15: error: overriding declaration requires an 'override' keyword
    open func stream() -> Stream! {
              ^
         override 
java_util/Sources/Collection.swift:282:15: note: overridden declaration is here
    open func stream() -> Stream! {
              ^
java_util/Sources/BlockingQueue.swift:439:15: error: overriding declaration requires an 'override' keyword
    open func stream() -> Stream! {
              ^
         override 
java_util/Sources/Queue.swift:297:15: note: overridden declaration is here
    open func stream() -> Stream! {
              ^
java_util/Sources/BlockingDeque.swift:772:15: error: overriding declaration requires an 'override' keyword
    open func stream() -> Stream! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:439:15: note: overridden declaration is here
    open func stream() -> Stream! {
              ^
java_util/Sources/Queue.swift:310:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:295:15: note: overridden declaration is here
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/Queue.swift:318:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:303:15: note: overridden declaration is here
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:452:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:310:15: note: overridden declaration is here
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:460:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:318:15: note: overridden declaration is here
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:785:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:452:15: note: overridden declaration is here
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:793:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:460:15: note: overridden declaration is here
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/Queue.swift:326:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:311:15: note: overridden declaration is here
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/Queue.swift:334:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:319:15: note: overridden declaration is here
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:468:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:326:15: note: overridden declaration is here
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:476:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:334:15: note: overridden declaration is here
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:801:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:468:15: note: overridden declaration is here
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:809:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:476:15: note: overridden declaration is here
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/Queue.swift:342:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:327:15: note: overridden declaration is here
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/Queue.swift:350:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:335:15: note: overridden declaration is here
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:484:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:342:15: note: overridden declaration is here
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:492:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:350:15: note: overridden declaration is here
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:817:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:484:15: note: overridden declaration is here
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:825:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:492:15: note: overridden declaration is here
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/Queue.swift:358:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:343:15: note: overridden declaration is here
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
java_util/Sources/Queue.swift:366:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/Collection.swift:351:15: note: overridden declaration is here
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:500:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:358:15: note: overridden declaration is here
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
java_util/Sources/BlockingQueue.swift:508:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:366:15: note: overridden declaration is here
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:833:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:500:15: note: overridden declaration is here
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
java_util/Sources/BlockingDeque.swift:841:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:508:15: note: overridden declaration is here
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
java_util/Sources/Queue.swift:374:15: error: overriding declaration requires an 'override' keyword
    open func parallelStream() -> Stream! {
              ^
         override 
java_util/Sources/Collection.swift:359:15: note: overridden declaration is here
    open func parallelStream() -> Stream! {
              ^
java_util/Sources/BlockingQueue.swift:516:15: error: overriding declaration requires an 'override' keyword
    open func parallelStream() -> Stream! {
              ^
         override 
java_util/Sources/Queue.swift:374:15: note: overridden declaration is here
    open func parallelStream() -> Stream! {
              ^
java_util/Sources/BlockingDeque.swift:849:15: error: overriding declaration requires an 'override' keyword
    open func parallelStream() -> Stream! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:516:15: note: overridden declaration is here
    open func parallelStream() -> Stream! {
              ^
java_util/Sources/Queue.swift:387:15: error: overriding declaration requires an 'override' keyword
    open func forEach( action: Consumer? ) {
              ^
         override 
java_util/Sources/Collection.swift:372:15: note: overridden declaration is here
    open func forEach( action: Consumer? ) {
              ^
java_util/Sources/Queue.swift:394:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _action: Consumer? ) {
              ^
         override 
java_util/Sources/Collection.swift:379:15: note: overridden declaration is here
    open func forEach( _ _action: Consumer? ) {
              ^
java_util/Sources/BlockingQueue.swift:529:15: error: overriding declaration requires an 'override' keyword
    open func forEach( action: Consumer? ) {
              ^
         override 
java_util/Sources/Queue.swift:387:15: note: overridden declaration is here
    open func forEach( action: Consumer? ) {
              ^
java_util/Sources/BlockingQueue.swift:536:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _action: Consumer? ) {
              ^
         override 
java_util/Sources/Queue.swift:394:15: note: overridden declaration is here
    open func forEach( _ _action: Consumer? ) {
              ^
java_util/Sources/BlockingDeque.swift:862:15: error: overriding declaration requires an 'override' keyword
    open func forEach( action: Consumer? ) {
              ^
         override 
java_util/Sources/BlockingQueue.swift:529:15: note: overridden declaration is here
    open func forEach( action: Consumer? ) {
              ^
java_util/Sources/BlockingDeque.swift:869:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _action: Consumer? ) {
              ^
         override 
java_util/Sources/BlockingQueue.swift:536:15: note: overridden declaration is here
    open func forEach( _ _action: Consumer? ) {
              ^
java_util/Sources/BaseStream.swift:83:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_lang.AutoCloseableForward:2:15: note: overridden declaration is here
    open func close() throws
              ^
java_util/Sources/PropertyResourceBundle.swift:36:14: error: overriding declaration requires an 'override' keyword
    open var parent: ResourceBundle! {
             ^
java_util/Sources/ResourceBundle.swift:35:14: note: overridden declaration is here
    open var parent: ResourceBundle! {
             ^
java_util/Sources/PropertyResourceBundle.swift:91:15: error: overriding declaration requires an 'override' keyword
    open func handleGetObject( key: String? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ResourceBundle.swift:372:15: note: overridden declaration is here
    open func handleGetObject( key: String? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/PropertyResourceBundle.swift:100:15: error: overriding declaration requires an 'override' keyword
    open func handleGetObject( _ _key: String? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ResourceBundle.swift:381:15: note: overridden declaration is here
    open func handleGetObject( _ _key: String? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/PropertyResourceBundle.swift:108:15: error: overriding declaration requires an 'override' keyword
    open func handleKeySet() -> java_swift.JavaSet! {
              ^
         override 
java_util/Sources/ResourceBundle.swift:389:15: note: overridden declaration is here
    open func handleKeySet() -> java_swift.JavaSet! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TimeZone.swift:86:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/Delayed.swift:45:15: error: overriding declaration requires an 'override' keyword
    open func compareTo( arg0: java_swift.JavaObject? ) -> Int {
              ^
         override 
java_lang.JavaComparableForward:2:15: note: overridden declaration is here
    open func compareTo(arg0: java_swift.JavaObject?) -> Int
              ^
java_util/Sources/Delayed.swift:53:15: error: overriding declaration requires an 'override' keyword
    open func compareTo( _ _arg0: java_swift.JavaObject? ) -> Int {
              ^
         override 
java_lang.JavaComparableForward:3:15: note: overridden declaration is here
    open func compareTo(_ _arg0: java_swift.JavaObject?) -> Int
              ^
java_util/Sources/TimeZone.swift:86:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/AbstractList.swift:109:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractCollection.swift:236:15: note: overridden declaration is here
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/AbstractList.swift:117:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractCollection.swift:244:24: note: overridden declaration is here
    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/Level.swift:189:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _ox: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/Level.swift:189:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _ox: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/Level.swift:189:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _ox: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/Level.swift:189:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _ox: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractList.swift:109:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractCollection.swift:236:15: note: overridden declaration is here
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/AbstractList.swift:117:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractCollection.swift:244:24: note: overridden declaration is here
    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/Level.swift:189:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _ox: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/ZipEntry.swift:120:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentMap.swift:70:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaMapForward:4:15: note: overridden declaration is here
    open func remove(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/ConcurrentMap.swift:262:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:2:15: note: overridden declaration is here
    open func remove(arg0: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentMap.swift:271:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:3:15: note: overridden declaration is here
    open func remove(_ _arg0: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentMap.swift:87:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaMapForward:14:15: note: overridden declaration is here
    open func replace(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/ConcurrentMap.swift:105:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:12:15: note: overridden declaration is here
    open func replace(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentMap.swift:115:15: error: overriding declaration requires an 'override' keyword
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:13:15: note: overridden declaration is here
    open func replace(_ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentMap.swift:138:15: error: overriding declaration requires an 'override' keyword
    open func putIfAbsent( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:17:15: note: overridden declaration is here
    open func putIfAbsent(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentMap.swift:148:15: error: overriding declaration requires an 'override' keyword
    open func putIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:18:15: note: overridden declaration is here
    open func putIfAbsent(_ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentMap.swift:156:15: error: overriding declaration requires an 'override' keyword
    open func getOrDefault( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:22:15: note: overridden declaration is here
    open func getOrDefault(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentMap.swift:166:15: error: overriding declaration requires an 'override' keyword
    open func getOrDefault( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:23:15: note: overridden declaration is here
    open func getOrDefault(_ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentMap.swift:279:15: error: overriding declaration requires an 'override' keyword
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:5:15: note: overridden declaration is here
    open func get(arg0: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentMap.swift:288:15: error: overriding declaration requires an 'override' keyword
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:6:15: note: overridden declaration is here
    open func get(_ _arg0: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentMap.swift:296:15: error: overriding declaration requires an 'override' keyword
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:7:15: note: overridden declaration is here
    open func put(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentMap.swift:306:15: error: overriding declaration requires an 'override' keyword
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:8:15: note: overridden declaration is here
    open func put(_ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentMap.swift:314:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaMapForward:9:15: note: overridden declaration is here
    open func equals(arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/ConcurrentMap.swift:343:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_swift.JavaMapForward:10:15: note: overridden declaration is here
    open func hashCode() -> Int
              ^
java_util/Sources/ConcurrentMap.swift:366:15: error: overriding declaration requires an 'override' keyword
    open func isEmpty() -> Bool {
              ^
         override 
java_swift.JavaMapForward:11:15: note: overridden declaration is here
    open func isEmpty() -> Bool
              ^
java_util/Sources/ConcurrentMap.swift:378:15: error: overriding declaration requires an 'override' keyword
    open func size() -> Int {
              ^
         override 
java_swift.JavaMapForward:15:15: note: overridden declaration is here
    open func size() -> Int
              ^
java_util/Sources/ConcurrentMap.swift:390:15: error: overriding declaration requires an 'override' keyword
    open func entrySet() -> java_swift.JavaSet! {
              ^
         override 
java_swift.JavaMapForward:16:15: note: overridden declaration is here
    open func entrySet() -> JavaSet!
              ^
java_util/Sources/ConcurrentMap.swift:418:15: error: overriding declaration requires an 'override' keyword
    open func keySet() -> java_swift.JavaSet! {
              ^
         override 
java_swift.JavaMapForward:19:15: note: overridden declaration is here
    open func keySet() -> JavaSet!
              ^
java_util/Sources/ConcurrentMap.swift:431:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaMapForward:20:15: note: overridden declaration is here
    open func containsValue(arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/ConcurrentMap.swift:447:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaMapForward:21:15: note: overridden declaration is here
    open func containsKey(arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/Attributes.swift:162:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ScheduledExecutorService.swift:119:15: error: overriding declaration requires an 'override' keyword
    open func shutdown() {
              ^
         override 
java_util/Sources/ExecutorService.swift:73:15: note: overridden declaration is here
    open func shutdown() {
              ^
java_util/Sources/ScheduledExecutorService.swift:130:15: error: overriding declaration requires an 'override' keyword
    open func submit( task: Callable? ) -> Future! {
              ^
         override 
java_util/Sources/ExecutorService.swift:84:15: note: overridden declaration is here
    open func submit( task: Callable? ) -> Future! {
              ^
java_util/Sources/ScheduledExecutorService.swift:139:15: error: overriding declaration requires an 'override' keyword
    open func submit( _ _task: Callable? ) -> Future! {
              ^
         override 
java_util/Sources/ExecutorService.swift:93:15: note: overridden declaration is here
    open func submit( _ _task: Callable? ) -> Future! {
              ^
java_util/Sources/ScheduledExecutorService.swift:147:15: error: overriding declaration requires an 'override' keyword
    open func submit( task: java_swift.Runnable?, result: java_swift.JavaObject? ) -> Future! {
              ^
         override 
java_util/Sources/ExecutorService.swift:101:15: note: overridden declaration is here
    open func submit( task: java_swift.Runnable?, result: java_swift.JavaObject? ) -> Future! {
              ^
java_util/Sources/ScheduledExecutorService.swift:157:15: error: overriding declaration requires an 'override' keyword
    open func submit( _ _task: java_swift.Runnable?, _ _result: java_swift.JavaObject? ) -> Future! {
              ^
         override 
java_util/Sources/ExecutorService.swift:111:15: note: overridden declaration is here
    open func submit( _ _task: java_swift.Runnable?, _ _result: java_swift.JavaObject? ) -> Future! {
              ^
java_util/Sources/ScheduledExecutorService.swift:165:15: error: overriding declaration requires an 'override' keyword
    open func submit( task: java_swift.Runnable? ) -> Future! {
              ^
         override 
java_util/Sources/ExecutorService.swift:119:15: note: overridden declaration is here
    open func submit( task: java_swift.Runnable? ) -> Future! {
              ^
java_util/Sources/ScheduledExecutorService.swift:174:15: error: overriding declaration requires an 'override' keyword
    open func submit( _ _task: java_swift.Runnable? ) -> Future! {
              ^
         override 
java_util/Sources/ExecutorService.swift:128:15: note: overridden declaration is here
    open func submit( _ _task: java_swift.Runnable? ) -> Future! {
              ^
java_util/Sources/ScheduledExecutorService.swift:182:15: error: overriding declaration requires an 'override' keyword
    open func shutdownNow() -> List! {
              ^
         override 
java_util/Sources/ExecutorService.swift:136:15: note: overridden declaration is here
    open func shutdownNow() -> List! {
              ^
java_util/Sources/ScheduledExecutorService.swift:195:15: error: overriding declaration requires an 'override' keyword
    open func isTerminated() -> Bool {
              ^
         override 
java_util/Sources/ExecutorService.swift:149:15: note: overridden declaration is here
    open func isTerminated() -> Bool {
              ^
java_util/Sources/ScheduledExecutorService.swift:207:15: error: overriding declaration requires an 'override' keyword
    open func isShutdown() -> Bool {
              ^
         override 
java_util/Sources/ExecutorService.swift:161:15: note: overridden declaration is here
    open func isShutdown() -> Bool {
              ^
java_util/Sources/ScheduledExecutorService.swift:219:15: error: overriding declaration requires an 'override' keyword
    open func awaitTermination( timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
              ^
         override 
java_util/Sources/ExecutorService.swift:173:15: note: overridden declaration is here
    open func awaitTermination( timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
              ^
java_util/Sources/ScheduledExecutorService.swift:231:15: error: overriding declaration requires an 'override' keyword
    open func awaitTermination( _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
              ^
         override 
java_util/Sources/ExecutorService.swift:185:15: note: overridden declaration is here
    open func awaitTermination( _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
              ^
java_util/Sources/ScheduledExecutorService.swift:239:15: error: overriding declaration requires an 'override' keyword
    open func invokeAny( tasks: Collection? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ExecutorService.swift:193:15: note: overridden declaration is here
    open func invokeAny( tasks: Collection? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/ScheduledExecutorService.swift:251:15: error: overriding declaration requires an 'override' keyword
    open func invokeAny( _ _tasks: Collection? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ExecutorService.swift:205:15: note: overridden declaration is here
    open func invokeAny( _ _tasks: Collection? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/ScheduledExecutorService.swift:259:15: error: overriding declaration requires an 'override' keyword
    open func invokeAny( tasks: Collection?, timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ExecutorService.swift:213:15: note: overridden declaration is here
    open func invokeAny( tasks: Collection?, timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/ScheduledExecutorService.swift:273:15: error: overriding declaration requires an 'override' keyword
    open func invokeAny( _ _tasks: Collection?, _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ExecutorService.swift:227:15: note: overridden declaration is here
    open func invokeAny( _ _tasks: Collection?, _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/ScheduledExecutorService.swift:281:15: error: overriding declaration requires an 'override' keyword
    open func invokeAll( tasks: Collection?, timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> List! {
              ^
         override 
java_util/Sources/ExecutorService.swift:235:15: note: overridden declaration is here
    open func invokeAll( tasks: Collection?, timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> List! {
              ^
java_util/Sources/ScheduledExecutorService.swift:295:15: error: overriding declaration requires an 'override' keyword
    open func invokeAll( _ _tasks: Collection?, _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> List! {
              ^
         override 
java_util/Sources/ExecutorService.swift:249:15: note: overridden declaration is here
    open func invokeAll( _ _tasks: Collection?, _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> List! {
              ^
java_util/Sources/ScheduledExecutorService.swift:303:15: error: overriding declaration requires an 'override' keyword
    open func invokeAll( tasks: Collection? ) throws /* java.lang.InterruptedException */ -> List! {
              ^
         override 
java_util/Sources/ExecutorService.swift:257:15: note: overridden declaration is here
    open func invokeAll( tasks: Collection? ) throws /* java.lang.InterruptedException */ -> List! {
              ^
java_util/Sources/ScheduledExecutorService.swift:315:15: error: overriding declaration requires an 'override' keyword
    open func invokeAll( _ _tasks: Collection? ) throws /* java.lang.InterruptedException */ -> List! {
              ^
         override 
java_util/Sources/ExecutorService.swift:269:15: note: overridden declaration is here
    open func invokeAll( _ _tasks: Collection? ) throws /* java.lang.InterruptedException */ -> List! {
              ^
java_util/Sources/ScheduledExecutorService.swift:323:15: error: overriding declaration requires an 'override' keyword
    open func execute( command: java_swift.Runnable? ) {
              ^
         override 
java_util/Sources/ExecutorService.swift:277:24: note: overridden declaration is here
    override open func execute( command: java_swift.Runnable? ) {
                       ^
java_util/Sources/ScheduledExecutorService.swift:330:15: error: overriding declaration requires an 'override' keyword
    open func execute( _ _command: java_swift.Runnable? ) {
              ^
         override 
java_util/Sources/ExecutorService.swift:284:24: note: overridden declaration is here
    override open func execute( _ _command: java_swift.Runnable? ) {
                       ^
java_util/Sources/LinkedBlockingQueue.swift:261:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:74:24: note: overridden declaration is here
    override open func equals( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/LinkedBlockingQueue.swift:269:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:82:24: note: overridden declaration is here
    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/Calendar.swift:807:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ScheduledFuture.swift:25:15: error: overriding declaration requires an 'override' keyword
    open func getDelay( unit: TimeUnit? ) -> Int64 {
              ^
         override 
java_util/Sources/Delayed.swift:29:15: note: overridden declaration is here
    open func getDelay( unit: TimeUnit? ) -> Int64 {
              ^
java_util/Sources/ScheduledFuture.swift:33:15: error: overriding declaration requires an 'override' keyword
    open func getDelay( _ _unit: TimeUnit? ) -> Int64 {
              ^
         override 
java_util/Sources/Delayed.swift:37:15: note: overridden declaration is here
    open func getDelay( _ _unit: TimeUnit? ) -> Int64 {
              ^
java_util/Sources/ScheduledFuture.swift:41:15: error: overriding declaration requires an 'override' keyword
    open func compareTo( arg0: java_swift.JavaObject? ) -> Int {
              ^
         override 
java_util/Sources/Delayed.swift:45:24: note: overridden declaration is here
    override open func compareTo( arg0: java_swift.JavaObject? ) -> Int {
                       ^
java_util/Sources/ScheduledFuture.swift:49:15: error: overriding declaration requires an 'override' keyword
    open func compareTo( _ _arg0: java_swift.JavaObject? ) -> Int {
              ^
         override 
java_util/Sources/Delayed.swift:53:24: note: overridden declaration is here
    override open func compareTo( _ _arg0: java_swift.JavaObject? ) -> Int {
                       ^
java_util/Sources/CountedCompleter.swift:136:15: error: overriding declaration requires an 'override' keyword
    open func exec() -> Bool {
              ^
         override 
java_util/Sources/ForkJoinTask.swift:160:15: note: overridden declaration is here
    open func exec() -> Bool {
              ^
java_util/Sources/CountedCompleter.swift:293:15: error: overriding declaration requires an 'override' keyword
    open func complete( _ _rawResult: java_swift.JavaObject? ) {
              ^
         override 
java_util/Sources/ForkJoinTask.swift:216:15: note: overridden declaration is here
    open func complete( _ _value: java_swift.JavaObject? ) {
              ^
java_util/Sources/CountedCompleter.swift:364:15: error: overriding declaration requires an 'override' keyword
    open func setRawResult( _ _t: java_swift.JavaObject? ) {
              ^
         override 
java_util/Sources/ForkJoinTask.swift:246:15: note: overridden declaration is here
    open func setRawResult( _ _value: java_swift.JavaObject? ) {
              ^
java_util/Sources/ZipOutputStream.swift:72:14: error: overriding declaration requires an 'override' keyword
    open var def: Deflater! {
             ^
java_util/Sources/DeflaterOutputStream.swift:26:14: note: overridden declaration is here
    open var def: Deflater! {
             ^
java_util/Sources/JarOutputStream.swift:138:14: error: overriding declaration requires an 'override' keyword
    open var def: Deflater! {
             ^
java_util/Sources/ZipOutputStream.swift:72:14: note: overridden declaration is here
    open var def: Deflater! {
             ^
java_util/Sources/ZipOutputStream.swift:89:14: error: overriding declaration requires an 'override' keyword
    open var buf: [Int8]! {
             ^
java_util/Sources/DeflaterOutputStream.swift:43:14: note: overridden declaration is here
    open var buf: [Int8]! {
             ^
java_util/Sources/JarOutputStream.swift:155:14: error: overriding declaration requires an 'override' keyword
    open var buf: [Int8]! {
             ^
java_util/Sources/ZipOutputStream.swift:89:14: note: overridden declaration is here
    open var buf: [Int8]! {
             ^
java_util/Sources/ZipOutputStream.swift:112:14: error: overriding declaration requires an 'override' keyword
    open var out: /* java.io.OutputStream */ UnavailableObject! {
             ^
java_util/Sources/DeflaterOutputStream.swift:66:14: note: overridden declaration is here
    open var out: /* java.io.OutputStream */ UnavailableObject! {
             ^
java_util/Sources/JarOutputStream.swift:178:14: error: overriding declaration requires an 'override' keyword
    open var out: /* java.io.OutputStream */ UnavailableObject! {
             ^
java_util/Sources/ZipOutputStream.swift:112:14: note: overridden declaration is here
    open var out: /* java.io.OutputStream */ UnavailableObject! {
             ^
java_util/Sources/JarOutputStream.swift:243:15: error: overriding declaration requires an 'override' keyword
    open func putNextEntry( _ _ze: ZipEntry? ) throws /* java.io.IOException */ {
              ^
         override 
java_util/Sources/ZipOutputStream.swift:200:15: note: overridden declaration is here
    open func putNextEntry( _ _e: ZipEntry? ) throws /* java.io.IOException */ {
              ^
java_util/Sources/DoubleStream.swift:277:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:57:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/DoubleStream.swift:292:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:70:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/DoubleStream.swift:789:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_util/Sources/BaseStream.swift:83:24: note: overridden declaration is here
    override open func close() {
                       ^
java_util/Sources/DoubleStream.swift:800:15: error: overriding declaration requires an 'override' keyword
    open func isParallel() -> Bool {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func isParallel() -> Bool {
              ^
java_util/Sources/DoubleStream.swift:812:15: error: overriding declaration requires an 'override' keyword
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:119:15: note: overridden declaration is here
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/DoubleStream.swift:821:15: error: overriding declaration requires an 'override' keyword
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:128:15: note: overridden declaration is here
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/DoubleStream.swift:829:15: error: overriding declaration requires an 'override' keyword
    open func unordered() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:149:15: note: overridden declaration is here
    open func unordered() -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:289:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:57:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/LongStream.swift:304:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:70:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/IntStream.swift:293:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:57:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/IntStream.swift:308:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:70:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/Stack.swift:28:14: error: overriding declaration requires an 'override' keyword
    open var elementData: [JavaObject]! {
             ^
java_util/Sources/Vector.swift:30:14: note: overridden declaration is here
    open var elementData: [JavaObject]! {
             ^
java_util/Sources/Stack.swift:45:14: error: overriding declaration requires an 'override' keyword
    open var elementCount: Int {
             ^
java_util/Sources/Vector.swift:47:14: note: overridden declaration is here
    open var elementCount: Int {
             ^
java_util/Sources/Stack.swift:62:14: error: overriding declaration requires an 'override' keyword
    open var capacityIncrement: Int {
             ^
java_util/Sources/Vector.swift:64:14: note: overridden declaration is here
    open var capacityIncrement: Int {
             ^
java_util/Sources/Vector.swift:85:14: error: overriding declaration requires an 'override' keyword
    open var modCount: Int {
             ^
java_util/Sources/AbstractList.swift:26:14: note: overridden declaration is here
    open var modCount: Int {
             ^
java_util/Sources/Stack.swift:83:14: error: overriding declaration requires an 'override' keyword
    open var modCount: Int {
             ^
java_util/Sources/Vector.swift:85:14: note: overridden declaration is here
    open var modCount: Int {
             ^
java_util/Sources/ListIterator.swift:75:15: error: overriding declaration requires an 'override' keyword
    open func remove() {
              ^
         override 
java_util/Sources/Iterator.swift:40:15: note: overridden declaration is here
    open func remove() {
              ^
java_util/Sources/ListIterator.swift:86:15: error: overriding declaration requires an 'override' keyword
    open func next() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/Iterator.swift:51:15: note: overridden declaration is here
    open func next() -> java_swift.JavaObject! {
              ^
java_util/Sources/ListIterator.swift:99:15: error: overriding declaration requires an 'override' keyword
    open func hasNext() -> Bool {
              ^
         override 
java_util/Sources/Iterator.swift:64:15: note: overridden declaration is here
    open func hasNext() -> Bool {
              ^
java_util/Sources/ListIterator.swift:175:15: error: overriding declaration requires an 'override' keyword
    open func forEachRemaining( action: Consumer? ) {
              ^
         override 
java_util/Sources/Iterator.swift:76:15: note: overridden declaration is here
    open func forEachRemaining( action: Consumer? ) {
              ^
java_util/Sources/ListIterator.swift:182:15: error: overriding declaration requires an 'override' keyword
    open func forEachRemaining( _ _action: Consumer? ) {
              ^
         override 
java_util/Sources/Iterator.swift:83:15: note: overridden declaration is here
    open func forEachRemaining( _ _action: Consumer? ) {
              ^
java_util/Sources/ListResourceBundle.swift:36:14: error: overriding declaration requires an 'override' keyword
    open var parent: ResourceBundle! {
             ^
java_util/Sources/ResourceBundle.swift:35:14: note: overridden declaration is here
    open var parent: ResourceBundle! {
             ^
java_util/Sources/ListResourceBundle.swift:83:15: error: overriding declaration requires an 'override' keyword
    open func handleGetObject( key: String? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ResourceBundle.swift:372:15: note: overridden declaration is here
    open func handleGetObject( key: String? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ListResourceBundle.swift:92:15: error: overriding declaration requires an 'override' keyword
    open func handleGetObject( _ _key: String? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ResourceBundle.swift:381:15: note: overridden declaration is here
    open func handleGetObject( _ _key: String? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ListResourceBundle.swift:100:15: error: overriding declaration requires an 'override' keyword
    open func handleKeySet() -> java_swift.JavaSet! {
              ^
         override 
java_util/Sources/ResourceBundle.swift:389:15: note: overridden declaration is here
    open func handleKeySet() -> java_swift.JavaSet! {
              ^
java_util/Sources/HashSet.swift:108:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/GZIPOutputStream.swift:47:14: error: overriding declaration requires an 'override' keyword
    open var def: Deflater! {
             ^
java_util/Sources/DeflaterOutputStream.swift:26:14: note: overridden declaration is here
    open var def: Deflater! {
             ^
java_util/Sources/GZIPOutputStream.swift:64:14: error: overriding declaration requires an 'override' keyword
    open var buf: [Int8]! {
             ^
java_util/Sources/DeflaterOutputStream.swift:43:14: note: overridden declaration is here
    open var buf: [Int8]! {
             ^
java_util/Sources/GZIPOutputStream.swift:87:14: error: overriding declaration requires an 'override' keyword
    open var out: /* java.io.OutputStream */ UnavailableObject! {
             ^
java_util/Sources/DeflaterOutputStream.swift:66:14: note: overridden declaration is here
    open var out: /* java.io.OutputStream */ UnavailableObject! {
             ^
java_util/Sources/DoubleStream.swift:277:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:57:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/DoubleStream.swift:292:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:70:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/DoubleStream.swift:789:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_util/Sources/BaseStream.swift:83:24: note: overridden declaration is here
    override open func close() {
                       ^
java_util/Sources/DoubleStream.swift:800:15: error: overriding declaration requires an 'override' keyword
    open func isParallel() -> Bool {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func isParallel() -> Bool {
              ^
java_util/Sources/DoubleStream.swift:812:15: error: overriding declaration requires an 'override' keyword
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:119:15: note: overridden declaration is here
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/DoubleStream.swift:821:15: error: overriding declaration requires an 'override' keyword
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:128:15: note: overridden declaration is here
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/DoubleStream.swift:829:15: error: overriding declaration requires an 'override' keyword
    open func unordered() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:149:15: note: overridden declaration is here
    open func unordered() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:293:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:57:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/IntStream.swift:308:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:70:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/LongStream.swift:289:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:57:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/LongStream.swift:304:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:70:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/ThreadLocalRandom.swift:96:15: error: overriding declaration requires an 'override' keyword
    open func next( bits: Int ) -> Int {
              ^
         override 
java_util/Sources/Random.swift:85:15: note: overridden declaration is here
    open func next( bits: Int ) -> Int {
              ^
java_util/Sources/ThreadLocalRandom.swift:104:15: error: overriding declaration requires an 'override' keyword
    open func next( _ _bits: Int ) -> Int {
              ^
         override 
java_util/Sources/Random.swift:93:15: note: overridden declaration is here
    open func next( _ _bits: Int ) -> Int {
              ^
java_util/Sources/ArrayBlockingQueue.swift:265:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:74:24: note: overridden declaration is here
    override open func equals( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/ArrayBlockingQueue.swift:273:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:82:24: note: overridden declaration is here
    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/DoubleStream.swift:277:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:57:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/DoubleStream.swift:292:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:70:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/DoubleStream.swift:789:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_util/Sources/BaseStream.swift:83:24: note: overridden declaration is here
    override open func close() {
                       ^
java_util/Sources/DoubleStream.swift:800:15: error: overriding declaration requires an 'override' keyword
    open func isParallel() -> Bool {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func isParallel() -> Bool {
              ^
java_util/Sources/DoubleStream.swift:812:15: error: overriding declaration requires an 'override' keyword
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:119:15: note: overridden declaration is here
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/DoubleStream.swift:821:15: error: overriding declaration requires an 'override' keyword
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:128:15: note: overridden declaration is here
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/DoubleStream.swift:829:15: error: overriding declaration requires an 'override' keyword
    open func unordered() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:149:15: note: overridden declaration is here
    open func unordered() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:293:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:57:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/IntStream.swift:308:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:70:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/LongStream.swift:289:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:57:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/LongStream.swift:304:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:70:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/ListIterator.swift:75:15: error: overriding declaration requires an 'override' keyword
    open func remove() {
              ^
         override 
java_util/Sources/Iterator.swift:40:15: note: overridden declaration is here
    open func remove() {
              ^
java_util/Sources/ListIterator.swift:86:15: error: overriding declaration requires an 'override' keyword
    open func next() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/Iterator.swift:51:15: note: overridden declaration is here
    open func next() -> java_swift.JavaObject! {
              ^
java_util/Sources/ListIterator.swift:99:15: error: overriding declaration requires an 'override' keyword
    open func hasNext() -> Bool {
              ^
         override 
java_util/Sources/Iterator.swift:64:15: note: overridden declaration is here
    open func hasNext() -> Bool {
              ^
java_util/Sources/ListIterator.swift:175:15: error: overriding declaration requires an 'override' keyword
    open func forEachRemaining( action: Consumer? ) {
              ^
         override 
java_util/Sources/Iterator.swift:76:15: note: overridden declaration is here
    open func forEachRemaining( action: Consumer? ) {
              ^
java_util/Sources/ListIterator.swift:182:15: error: overriding declaration requires an 'override' keyword
    open func forEachRemaining( _ _action: Consumer? ) {
              ^
         override 
java_util/Sources/Iterator.swift:83:15: note: overridden declaration is here
    open func forEachRemaining( _ _action: Consumer? ) {
              ^
java_util/Sources/AbstractSet.swift:40:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractCollection.swift:236:15: note: overridden declaration is here
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/AbstractSet.swift:48:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractCollection.swift:244:24: note: overridden declaration is here
    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/Deflater.swift:218:15: error: overriding declaration requires an 'override' keyword
    open func finalize() {
              ^
         override 
java_swift.JavaObject:8:15: note: overridden declaration is here
    open func finalize() throws
              ^
java_util/Sources/ZipFile.swift:201:15: error: overriding declaration requires an 'override' keyword
    open func finalize() throws /* java.io.IOException */ {
              ^
         override 
java_swift.JavaObject:8:15: note: overridden declaration is here
    open func finalize() throws
              ^
java_util/Sources/SortedSet.swift:156:15: error: overriding declaration requires an 'override' keyword
    open func add( e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaSetForward:2:15: note: overridden declaration is here
    open func add(e: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/SortedSet.swift:172:15: error: overriding declaration requires an 'override' keyword
    open func remove( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaSetForward:3:15: note: overridden declaration is here
    open func remove(o: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/SortedSet.swift:188:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaSetForward:4:15: note: overridden declaration is here
    open func equals(o: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/SortedSet.swift:204:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_swift.JavaSetForward:5:15: note: overridden declaration is here
    open func hashCode() -> Int
              ^
java_util/Sources/SortedSet.swift:227:15: error: overriding declaration requires an 'override' keyword
    open func isEmpty() -> Bool {
              ^
         override 
java_swift.JavaSetForward:6:15: note: overridden declaration is here
    open func isEmpty() -> Bool
              ^
java_util/Sources/SortedSet.swift:239:15: error: overriding declaration requires an 'override' keyword
    open func contains( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaSetForward:7:15: note: overridden declaration is here
    open func contains(o: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/SortedSet.swift:255:15: error: overriding declaration requires an 'override' keyword
    open func size() -> Int {
              ^
         override 
java_swift.JavaSetForward:8:15: note: overridden declaration is here
    open func size() -> Int
              ^
java_util/Sources/SortedSet.swift:267:15: error: overriding declaration requires an 'override' keyword
    open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_swift.JavaSetForward:9:15: note: overridden declaration is here
    open func toArray(a: [java_swift.JavaObject]?) -> [java_swift.JavaObject]!
              ^
java_util/Sources/SortedSet.swift:275:15: error: overriding declaration requires an 'override' keyword
    open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_swift.JavaSetForward:10:15: note: overridden declaration is here
    open func toArray(_ _a: [java_swift.JavaObject]?) -> [java_swift.JavaObject]!
              ^
java_util/Sources/SortedSet.swift:283:15: error: overriding declaration requires an 'override' keyword
    open func toArray() -> [JavaObject]! {
              ^
         override 
java_swift.JavaSetForward:11:15: note: overridden declaration is here
    open func toArray() -> [java_swift.JavaObject]!
              ^
java_util/Sources/Inflater.swift:75:15: error: overriding declaration requires an 'override' keyword
    open func finalize() {
              ^
         override 
java_swift.JavaObject:8:15: note: overridden declaration is here
    open func finalize() throws
              ^
java_util/Sources/ListIterator.swift:75:15: error: overriding declaration requires an 'override' keyword
    open func remove() {
              ^
         override 
java_util/Sources/Iterator.swift:40:15: note: overridden declaration is here
    open func remove() {
              ^
java_util/Sources/ListIterator.swift:86:15: error: overriding declaration requires an 'override' keyword
    open func next() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/Iterator.swift:51:15: note: overridden declaration is here
    open func next() -> java_swift.JavaObject! {
              ^
java_util/Sources/ListIterator.swift:99:15: error: overriding declaration requires an 'override' keyword
    open func hasNext() -> Bool {
              ^
         override 
java_util/Sources/Iterator.swift:64:15: note: overridden declaration is here
    open func hasNext() -> Bool {
              ^
java_util/Sources/ListIterator.swift:175:15: error: overriding declaration requires an 'override' keyword
    open func forEachRemaining( action: Consumer? ) {
              ^
         override 
java_util/Sources/Iterator.swift:76:15: note: overridden declaration is here
    open func forEachRemaining( action: Consumer? ) {
              ^
java_util/Sources/ListIterator.swift:182:15: error: overriding declaration requires an 'override' keyword
    open func forEachRemaining( _ _action: Consumer? ) {
              ^
         override 
java_util/Sources/Iterator.swift:83:15: note: overridden declaration is here
    open func forEachRemaining( _ _action: Consumer? ) {
              ^
java_util/Sources/SortedMap.swift:73:15: error: overriding declaration requires an 'override' keyword
    open func entrySet() -> java_swift.JavaSet! {
              ^
         override 
java_swift.JavaMapForward:16:15: note: overridden declaration is here
    open func entrySet() -> JavaSet!
              ^
java_util/Sources/SortedMap.swift:86:15: error: overriding declaration requires an 'override' keyword
    open func keySet() -> java_swift.JavaSet! {
              ^
         override 
java_swift.JavaMapForward:19:15: note: overridden declaration is here
    open func keySet() -> JavaSet!
              ^
java_util/Sources/NavigableMap.swift:235:15: error: overriding declaration requires an 'override' keyword
    open func subMap( fromKey: java_swift.JavaObject?, toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
         override 
java_util/Sources/SortedMap.swift:138:15: note: overridden declaration is here
    open func subMap( fromKey: java_swift.JavaObject?, toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
java_util/Sources/NavigableMap.swift:245:15: error: overriding declaration requires an 'override' keyword
    open func subMap( _ _fromKey: java_swift.JavaObject?, _ _toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
         override 
java_util/Sources/SortedMap.swift:148:15: note: overridden declaration is here
    open func subMap( _ _fromKey: java_swift.JavaObject?, _ _toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
java_util/Sources/NavigableMap.swift:253:15: error: overriding declaration requires an 'override' keyword
    open func headMap( toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
         override 
java_util/Sources/SortedMap.swift:156:15: note: overridden declaration is here
    open func headMap( toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
java_util/Sources/NavigableMap.swift:262:15: error: overriding declaration requires an 'override' keyword
    open func headMap( _ _toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
         override 
java_util/Sources/SortedMap.swift:165:15: note: overridden declaration is here
    open func headMap( _ _toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
java_util/Sources/NavigableMap.swift:306:15: error: overriding declaration requires an 'override' keyword
    open func tailMap( fromKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
         override 
java_util/Sources/SortedMap.swift:173:15: note: overridden declaration is here
    open func tailMap( fromKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
java_util/Sources/NavigableMap.swift:315:15: error: overriding declaration requires an 'override' keyword
    open func tailMap( _ _fromKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
         override 
java_util/Sources/SortedMap.swift:182:15: note: overridden declaration is here
    open func tailMap( _ _fromKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
java_util/Sources/DoubleStream.swift:277:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:57:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/DoubleStream.swift:292:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:70:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/DoubleStream.swift:789:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_util/Sources/BaseStream.swift:83:24: note: overridden declaration is here
    override open func close() {
                       ^
java_util/Sources/DoubleStream.swift:800:15: error: overriding declaration requires an 'override' keyword
    open func isParallel() -> Bool {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func isParallel() -> Bool {
              ^
java_util/Sources/DoubleStream.swift:812:15: error: overriding declaration requires an 'override' keyword
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:119:15: note: overridden declaration is here
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/DoubleStream.swift:821:15: error: overriding declaration requires an 'override' keyword
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:128:15: note: overridden declaration is here
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/DoubleStream.swift:829:15: error: overriding declaration requires an 'override' keyword
    open func unordered() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:149:15: note: overridden declaration is here
    open func unordered() -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:289:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:57:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/LongStream.swift:304:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:70:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/IntStream.swift:293:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:57:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/IntStream.swift:308:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:70:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/Hashtable.swift:162:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/Vector.swift:85:14: error: overriding declaration requires an 'override' keyword
    open var modCount: Int {
             ^
java_util/Sources/AbstractList.swift:26:14: note: overridden declaration is here
    open var modCount: Int {
             ^
java_util/Sources/Vector.swift:184:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/Vector.swift:492:15: error: overriding declaration requires an 'override' keyword
    open func removeRange( fromIndex: Int, toIndex: Int ) {
              ^
         override 
java_util/Sources/AbstractList.swift:216:15: note: overridden declaration is here
    open func removeRange( fromIndex: Int, toIndex: Int ) {
              ^
java_util/Sources/Vector.swift:500:15: error: overriding declaration requires an 'override' keyword
    open func removeRange( _ _fromIndex: Int, _ _toIndex: Int ) {
              ^
         override 
java_util/Sources/AbstractList.swift:224:15: note: overridden declaration is here
    open func removeRange( _ _fromIndex: Int, _ _toIndex: Int ) {
              ^
java_util/Sources/Inflater.swift:75:15: error: overriding declaration requires an 'override' keyword
    open func finalize() {
              ^
         override 
java_swift.JavaObject:8:15: note: overridden declaration is here
    open func finalize() throws
              ^
java_util/Sources/SynchronousQueue.swift:238:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:74:24: note: overridden declaration is here
    override open func equals( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/SynchronousQueue.swift:246:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:82:24: note: overridden declaration is here
    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/BitSet.swift:123:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/BitSet.swift:135:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/IntStream.swift:293:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:57:15: note: overridden declaration is here
    open func iterator() -> Iterator! {
              ^
java_util/Sources/IntStream.swift:308:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BaseStream.swift:70:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/NavigableMap.swift:235:15: error: overriding declaration requires an 'override' keyword
    open func subMap( fromKey: java_swift.JavaObject?, toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
         override 
java_util/Sources/SortedMap.swift:138:15: note: overridden declaration is here
    open func subMap( fromKey: java_swift.JavaObject?, toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
java_util/Sources/NavigableMap.swift:245:15: error: overriding declaration requires an 'override' keyword
    open func subMap( _ _fromKey: java_swift.JavaObject?, _ _toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
         override 
java_util/Sources/SortedMap.swift:148:15: note: overridden declaration is here
    open func subMap( _ _fromKey: java_swift.JavaObject?, _ _toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
java_util/Sources/NavigableMap.swift:253:15: error: overriding declaration requires an 'override' keyword
    open func headMap( toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
         override 
java_util/Sources/SortedMap.swift:156:15: note: overridden declaration is here
    open func headMap( toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
java_util/Sources/NavigableMap.swift:262:15: error: overriding declaration requires an 'override' keyword
    open func headMap( _ _toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
         override 
java_util/Sources/SortedMap.swift:165:15: note: overridden declaration is here
    open func headMap( _ _toKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
java_util/Sources/NavigableMap.swift:306:15: error: overriding declaration requires an 'override' keyword
    open func tailMap( fromKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
         override 
java_util/Sources/SortedMap.swift:173:15: note: overridden declaration is here
    open func tailMap( fromKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
java_util/Sources/NavigableMap.swift:315:15: error: overriding declaration requires an 'override' keyword
    open func tailMap( _ _fromKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
         override 
java_util/Sources/SortedMap.swift:182:15: note: overridden declaration is here
    open func tailMap( _ _fromKey: java_swift.JavaObject? ) -> SortedMap! {
              ^
java_util/Sources/NavigableMap.swift:323:15: error: overriding declaration requires an 'override' keyword
    open func values() -> Collection! {
              ^
         override 
java_util/Sources/SortedMap.swift:60:15: note: overridden declaration is here
    open func values() -> Collection! {
              ^
java_util/Sources/SortedMap.swift:73:15: error: overriding declaration requires an 'override' keyword
    open func entrySet() -> java_swift.JavaSet! {
              ^
         override 
java_swift.JavaMapForward:16:15: note: overridden declaration is here
    open func entrySet() -> JavaSet!
              ^
java_util/Sources/NavigableMap.swift:336:15: error: overriding declaration requires an 'override' keyword
    open func entrySet() -> java_swift.JavaSet! {
              ^
         override 
java_util/Sources/SortedMap.swift:73:15: note: overridden declaration is here
    open func entrySet() -> java_swift.JavaSet! {
              ^
java_util/Sources/SortedMap.swift:86:15: error: overriding declaration requires an 'override' keyword
    open func keySet() -> java_swift.JavaSet! {
              ^
         override 
java_swift.JavaMapForward:19:15: note: overridden declaration is here
    open func keySet() -> JavaSet!
              ^
java_util/Sources/NavigableMap.swift:349:15: error: overriding declaration requires an 'override' keyword
    open func keySet() -> java_swift.JavaSet! {
              ^
         override 
java_util/Sources/SortedMap.swift:86:15: note: overridden declaration is here
    open func keySet() -> java_swift.JavaSet! {
              ^
java_util/Sources/NavigableMap.swift:362:15: error: overriding declaration requires an 'override' keyword
    open func comparator() -> JavaComparator! {
              ^
         override 
java_util/Sources/SortedMap.swift:99:15: note: overridden declaration is here
    open func comparator() -> JavaComparator! {
              ^
java_util/Sources/NavigableMap.swift:375:15: error: overriding declaration requires an 'override' keyword
    open func firstKey() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:112:15: note: overridden declaration is here
    open func firstKey() -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:388:15: error: overriding declaration requires an 'override' keyword
    open func lastKey() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:125:15: note: overridden declaration is here
    open func lastKey() -> java_swift.JavaObject! {
              ^
java_util/Sources/SortedMap.swift:190:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:2:15: note: overridden declaration is here
    open func remove(arg0: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/SortedMap.swift:199:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:3:15: note: overridden declaration is here
    open func remove(_ _arg0: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/SortedMap.swift:207:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaMapForward:4:15: note: overridden declaration is here
    open func remove(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/NavigableMap.swift:401:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:190:15: note: overridden declaration is here
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:410:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:199:15: note: overridden declaration is here
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:418:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedMap.swift:207:15: note: overridden declaration is here
    open func remove( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableMap.swift:427:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedMap.swift:216:15: note: overridden declaration is here
    open func remove( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/SortedMap.swift:224:15: error: overriding declaration requires an 'override' keyword
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:5:15: note: overridden declaration is here
    open func get(arg0: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/SortedMap.swift:233:15: error: overriding declaration requires an 'override' keyword
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:6:15: note: overridden declaration is here
    open func get(_ _arg0: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/NavigableMap.swift:435:15: error: overriding declaration requires an 'override' keyword
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:224:15: note: overridden declaration is here
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:444:15: error: overriding declaration requires an 'override' keyword
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:233:15: note: overridden declaration is here
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/SortedMap.swift:241:15: error: overriding declaration requires an 'override' keyword
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:7:15: note: overridden declaration is here
    open func put(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/SortedMap.swift:251:15: error: overriding declaration requires an 'override' keyword
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:8:15: note: overridden declaration is here
    open func put(_ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/NavigableMap.swift:452:15: error: overriding declaration requires an 'override' keyword
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:241:15: note: overridden declaration is here
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:462:15: error: overriding declaration requires an 'override' keyword
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:251:15: note: overridden declaration is here
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/SortedMap.swift:259:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaMapForward:9:15: note: overridden declaration is here
    open func equals(arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/NavigableMap.swift:470:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedMap.swift:259:15: note: overridden declaration is here
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableMap.swift:478:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedMap.swift:267:15: note: overridden declaration is here
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/SortedMap.swift:275:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_swift.JavaMapForward:10:15: note: overridden declaration is here
    open func hashCode() -> Int
              ^
java_util/Sources/NavigableMap.swift:486:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_util/Sources/SortedMap.swift:275:15: note: overridden declaration is here
    open func hashCode() -> Int {
              ^
java_util/Sources/NavigableMap.swift:498:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_util/Sources/SortedMap.swift:287:15: note: overridden declaration is here
    open func clear() {
              ^
java_util/Sources/SortedMap.swift:298:15: error: overriding declaration requires an 'override' keyword
    open func isEmpty() -> Bool {
              ^
         override 
java_swift.JavaMapForward:11:15: note: overridden declaration is here
    open func isEmpty() -> Bool
              ^
java_util/Sources/NavigableMap.swift:509:15: error: overriding declaration requires an 'override' keyword
    open func isEmpty() -> Bool {
              ^
         override 
java_util/Sources/SortedMap.swift:298:15: note: overridden declaration is here
    open func isEmpty() -> Bool {
              ^
java_util/Sources/SortedMap.swift:310:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:12:15: note: overridden declaration is here
    open func replace(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/SortedMap.swift:320:15: error: overriding declaration requires an 'override' keyword
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:13:15: note: overridden declaration is here
    open func replace(_ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/SortedMap.swift:328:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaMapForward:14:15: note: overridden declaration is here
    open func replace(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/NavigableMap.swift:521:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:310:15: note: overridden declaration is here
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:531:15: error: overriding declaration requires an 'override' keyword
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:320:15: note: overridden declaration is here
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:539:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedMap.swift:328:15: note: overridden declaration is here
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableMap.swift:549:15: error: overriding declaration requires an 'override' keyword
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedMap.swift:338:15: note: overridden declaration is here
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableMap.swift:557:15: error: overriding declaration requires an 'override' keyword
    open func replaceAll( arg0: BiFunction? ) {
              ^
         override 
java_util/Sources/SortedMap.swift:346:15: note: overridden declaration is here
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/NavigableMap.swift:564:15: error: overriding declaration requires an 'override' keyword
    open func replaceAll( _ _arg0: BiFunction? ) {
              ^
         override 
java_util/Sources/SortedMap.swift:353:15: note: overridden declaration is here
    open func replaceAll( _ _arg0: BiFunction? ) {
              ^
java_util/Sources/SortedMap.swift:361:15: error: overriding declaration requires an 'override' keyword
    open func size() -> Int {
              ^
         override 
java_swift.JavaMapForward:15:15: note: overridden declaration is here
    open func size() -> Int
              ^
java_util/Sources/NavigableMap.swift:572:15: error: overriding declaration requires an 'override' keyword
    open func size() -> Int {
              ^
         override 
java_util/Sources/SortedMap.swift:361:15: note: overridden declaration is here
    open func size() -> Int {
              ^
java_util/Sources/NavigableMap.swift:584:15: error: overriding declaration requires an 'override' keyword
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
         override 
java_util/Sources/SortedMap.swift:373:15: note: overridden declaration is here
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
java_util/Sources/NavigableMap.swift:591:15: error: overriding declaration requires an 'override' keyword
    open func putAll( _ _arg0: java_swift.JavaMap? ) {
              ^
         override 
java_util/Sources/SortedMap.swift:380:15: note: overridden declaration is here
    open func putAll( _ _arg0: java_swift.JavaMap? ) {
              ^
java_util/Sources/SortedMap.swift:388:15: error: overriding declaration requires an 'override' keyword
    open func putIfAbsent( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:17:15: note: overridden declaration is here
    open func putIfAbsent(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/SortedMap.swift:398:15: error: overriding declaration requires an 'override' keyword
    open func putIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:18:15: note: overridden declaration is here
    open func putIfAbsent(_ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/NavigableMap.swift:599:15: error: overriding declaration requires an 'override' keyword
    open func putIfAbsent( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:388:15: note: overridden declaration is here
    open func putIfAbsent( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:609:15: error: overriding declaration requires an 'override' keyword
    open func putIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:398:15: note: overridden declaration is here
    open func putIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/SortedMap.swift:406:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaMapForward:20:15: note: overridden declaration is here
    open func containsValue(arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/NavigableMap.swift:617:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedMap.swift:406:15: note: overridden declaration is here
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableMap.swift:625:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedMap.swift:414:15: note: overridden declaration is here
    open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/SortedMap.swift:422:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaMapForward:21:15: note: overridden declaration is here
    open func containsKey(arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/NavigableMap.swift:633:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedMap.swift:422:15: note: overridden declaration is here
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableMap.swift:641:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedMap.swift:430:15: note: overridden declaration is here
    open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/SortedMap.swift:438:15: error: overriding declaration requires an 'override' keyword
    open func getOrDefault( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:22:15: note: overridden declaration is here
    open func getOrDefault(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/SortedMap.swift:448:15: error: overriding declaration requires an 'override' keyword
    open func getOrDefault( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaMapForward:23:15: note: overridden declaration is here
    open func getOrDefault(_ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/NavigableMap.swift:649:15: error: overriding declaration requires an 'override' keyword
    open func getOrDefault( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:438:15: note: overridden declaration is here
    open func getOrDefault( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:659:15: error: overriding declaration requires an 'override' keyword
    open func getOrDefault( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:448:15: note: overridden declaration is here
    open func getOrDefault( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:667:15: error: overriding declaration requires an 'override' keyword
    open func forEach( arg0: BiConsumer? ) {
              ^
         override 
java_util/Sources/SortedMap.swift:456:15: note: overridden declaration is here
    open func forEach( arg0: BiConsumer? ) {
              ^
java_util/Sources/NavigableMap.swift:674:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _arg0: BiConsumer? ) {
              ^
         override 
java_util/Sources/SortedMap.swift:463:15: note: overridden declaration is here
    open func forEach( _ _arg0: BiConsumer? ) {
              ^
java_util/Sources/NavigableMap.swift:682:15: error: overriding declaration requires an 'override' keyword
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:471:15: note: overridden declaration is here
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:692:15: error: overriding declaration requires an 'override' keyword
    open func computeIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: Function? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:481:15: note: overridden declaration is here
    open func computeIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:700:15: error: overriding declaration requires an 'override' keyword
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:489:15: note: overridden declaration is here
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:710:15: error: overriding declaration requires an 'override' keyword
    open func computeIfPresent( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:499:15: note: overridden declaration is here
    open func computeIfPresent( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:718:15: error: overriding declaration requires an 'override' keyword
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:507:15: note: overridden declaration is here
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:728:15: error: overriding declaration requires an 'override' keyword
    open func compute( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:517:15: note: overridden declaration is here
    open func compute( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:736:15: error: overriding declaration requires an 'override' keyword
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:525:15: note: overridden declaration is here
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableMap.swift:747:15: error: overriding declaration requires an 'override' keyword
    open func merge( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedMap.swift:536:15: note: overridden declaration is here
    open func merge( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Manifest.swift:91:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/Manifest.swift:101:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/IntStream.swift:867:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_util/Sources/BaseStream.swift:83:24: note: overridden declaration is here
    override open func close() {
                       ^
java_util/Sources/IntStream.swift:878:15: error: overriding declaration requires an 'override' keyword
    open func isParallel() -> Bool {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func isParallel() -> Bool {
              ^
java_util/Sources/IntStream.swift:890:15: error: overriding declaration requires an 'override' keyword
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:119:15: note: overridden declaration is here
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:899:15: error: overriding declaration requires an 'override' keyword
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:128:15: note: overridden declaration is here
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:907:15: error: overriding declaration requires an 'override' keyword
    open func unordered() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:149:15: note: overridden declaration is here
    open func unordered() -> BaseStream! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/LongStream.swift:850:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_util/Sources/BaseStream.swift:83:24: note: overridden declaration is here
    override open func close() {
                       ^
java_util/Sources/LongStream.swift:861:15: error: overriding declaration requires an 'override' keyword
    open func isParallel() -> Bool {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func isParallel() -> Bool {
              ^
java_util/Sources/LongStream.swift:873:15: error: overriding declaration requires an 'override' keyword
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:119:15: note: overridden declaration is here
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:882:15: error: overriding declaration requires an 'override' keyword
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:128:15: note: overridden declaration is here
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:890:15: error: overriding declaration requires an 'override' keyword
    open func unordered() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:149:15: note: overridden declaration is here
    open func unordered() -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:850:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_util/Sources/BaseStream.swift:83:24: note: overridden declaration is here
    override open func close() {
                       ^
java_util/Sources/LongStream.swift:861:15: error: overriding declaration requires an 'override' keyword
    open func isParallel() -> Bool {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func isParallel() -> Bool {
              ^
java_util/Sources/LongStream.swift:873:15: error: overriding declaration requires an 'override' keyword
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:119:15: note: overridden declaration is here
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:882:15: error: overriding declaration requires an 'override' keyword
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:128:15: note: overridden declaration is here
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:890:15: error: overriding declaration requires an 'override' keyword
    open func unordered() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:149:15: note: overridden declaration is here
    open func unordered() -> BaseStream! {
              ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:325:15: error: overriding declaration requires an 'override' keyword
    open func first() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedSet.swift:52:15: note: overridden declaration is here
    open func first() -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableSet.swift:338:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/SortedSet.swift:65:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/NavigableSet.swift:351:15: error: overriding declaration requires an 'override' keyword
    open func last() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedSet.swift:78:15: note: overridden declaration is here
    open func last() -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableSet.swift:364:15: error: overriding declaration requires an 'override' keyword
    open func comparator() -> JavaComparator! {
              ^
         override 
java_util/Sources/SortedSet.swift:91:15: note: overridden declaration is here
    open func comparator() -> JavaComparator! {
              ^
java_util/Sources/NavigableSet.swift:377:15: error: overriding declaration requires an 'override' keyword
    open func add( e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:156:24: note: overridden declaration is here
    override open func add( e: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/NavigableSet.swift:385:15: error: overriding declaration requires an 'override' keyword
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:164:15: note: overridden declaration is here
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:393:15: error: overriding declaration requires an 'override' keyword
    open func remove( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:172:24: note: overridden declaration is here
    override open func remove( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/NavigableSet.swift:401:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:180:15: note: overridden declaration is here
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:409:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:188:24: note: overridden declaration is here
    override open func equals( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/NavigableSet.swift:417:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:196:15: note: overridden declaration is here
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:425:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_util/Sources/SortedSet.swift:204:24: note: overridden declaration is here
    override open func hashCode() -> Int {
                       ^
java_util/Sources/NavigableSet.swift:437:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_util/Sources/SortedSet.swift:216:15: note: overridden declaration is here
    open func clear() {
              ^
java_util/Sources/NavigableSet.swift:448:15: error: overriding declaration requires an 'override' keyword
    open func isEmpty() -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:227:24: note: overridden declaration is here
    override open func isEmpty() -> Bool {
                       ^
java_util/Sources/NavigableSet.swift:460:15: error: overriding declaration requires an 'override' keyword
    open func contains( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:239:24: note: overridden declaration is here
    override open func contains( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/NavigableSet.swift:468:15: error: overriding declaration requires an 'override' keyword
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:247:15: note: overridden declaration is here
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:476:15: error: overriding declaration requires an 'override' keyword
    open func size() -> Int {
              ^
         override 
java_util/Sources/SortedSet.swift:255:24: note: overridden declaration is here
    override open func size() -> Int {
                       ^
java_util/Sources/NavigableSet.swift:488:15: error: overriding declaration requires an 'override' keyword
    open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/SortedSet.swift:267:24: note: overridden declaration is here
    override open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
                       ^
java_util/Sources/NavigableSet.swift:496:15: error: overriding declaration requires an 'override' keyword
    open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/SortedSet.swift:275:24: note: overridden declaration is here
    override open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
                       ^
java_util/Sources/NavigableSet.swift:504:15: error: overriding declaration requires an 'override' keyword
    open func toArray() -> [JavaObject]! {
              ^
         override 
java_util/Sources/SortedSet.swift:283:24: note: overridden declaration is here
    override open func toArray() -> [JavaObject]! {
                       ^
java_util/Sources/NavigableSet.swift:516:15: error: overriding declaration requires an 'override' keyword
    open func addAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:308:15: note: overridden declaration is here
    open func addAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:524:15: error: overriding declaration requires an 'override' keyword
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:316:15: note: overridden declaration is here
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:532:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:324:15: note: overridden declaration is here
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:540:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:332:15: note: overridden declaration is here
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:548:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:340:15: note: overridden declaration is here
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:556:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:348:15: note: overridden declaration is here
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:564:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:356:15: note: overridden declaration is here
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:572:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:364:15: note: overridden declaration is here
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:580:15: error: overriding declaration requires an 'override' keyword
    open func stream() -> Stream! {
              ^
         override 
java_util/Sources/SortedSet.swift:372:15: note: overridden declaration is here
    open func stream() -> Stream! {
              ^
java_util/Sources/NavigableSet.swift:593:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:385:15: note: overridden declaration is here
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:601:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:393:15: note: overridden declaration is here
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:609:15: error: overriding declaration requires an 'override' keyword
    open func parallelStream() -> Stream! {
              ^
         override 
java_util/Sources/SortedSet.swift:401:15: note: overridden declaration is here
    open func parallelStream() -> Stream! {
              ^
java_util/Sources/NavigableSet.swift:622:15: error: overriding declaration requires an 'override' keyword
    open func forEach( action: Consumer? ) {
              ^
         override 
java_util/Sources/SortedSet.swift:414:15: note: overridden declaration is here
    open func forEach( action: Consumer? ) {
              ^
java_util/Sources/NavigableSet.swift:629:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _action: Consumer? ) {
              ^
         override 
java_util/Sources/SortedSet.swift:421:15: note: overridden declaration is here
    open func forEach( _ _action: Consumer? ) {
              ^
java_util/Sources/IntStream.swift:867:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_util/Sources/BaseStream.swift:83:24: note: overridden declaration is here
    override open func close() {
                       ^
java_util/Sources/IntStream.swift:878:15: error: overriding declaration requires an 'override' keyword
    open func isParallel() -> Bool {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func isParallel() -> Bool {
              ^
java_util/Sources/IntStream.swift:890:15: error: overriding declaration requires an 'override' keyword
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:119:15: note: overridden declaration is here
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:899:15: error: overriding declaration requires an 'override' keyword
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:128:15: note: overridden declaration is here
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:907:15: error: overriding declaration requires an 'override' keyword
    open func unordered() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:149:15: note: overridden declaration is here
    open func unordered() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:867:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_util/Sources/BaseStream.swift:83:24: note: overridden declaration is here
    override open func close() {
                       ^
java_util/Sources/IntStream.swift:878:15: error: overriding declaration requires an 'override' keyword
    open func isParallel() -> Bool {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func isParallel() -> Bool {
              ^
java_util/Sources/IntStream.swift:890:15: error: overriding declaration requires an 'override' keyword
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:119:15: note: overridden declaration is here
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:899:15: error: overriding declaration requires an 'override' keyword
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:128:15: note: overridden declaration is here
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:907:15: error: overriding declaration requires an 'override' keyword
    open func unordered() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:149:15: note: overridden declaration is here
    open func unordered() -> BaseStream! {
              ^
java_util/Sources/NavigableSet.swift:325:15: error: overriding declaration requires an 'override' keyword
    open func first() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedSet.swift:52:15: note: overridden declaration is here
    open func first() -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableSet.swift:338:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/SortedSet.swift:65:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/NavigableSet.swift:351:15: error: overriding declaration requires an 'override' keyword
    open func last() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedSet.swift:78:15: note: overridden declaration is here
    open func last() -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableSet.swift:364:15: error: overriding declaration requires an 'override' keyword
    open func comparator() -> JavaComparator! {
              ^
         override 
java_util/Sources/SortedSet.swift:91:15: note: overridden declaration is here
    open func comparator() -> JavaComparator! {
              ^
java_util/Sources/NavigableSet.swift:377:15: error: overriding declaration requires an 'override' keyword
    open func add( e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:156:24: note: overridden declaration is here
    override open func add( e: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/NavigableSet.swift:385:15: error: overriding declaration requires an 'override' keyword
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:164:15: note: overridden declaration is here
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:393:15: error: overriding declaration requires an 'override' keyword
    open func remove( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:172:24: note: overridden declaration is here
    override open func remove( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/NavigableSet.swift:401:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:180:15: note: overridden declaration is here
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:409:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:188:24: note: overridden declaration is here
    override open func equals( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/NavigableSet.swift:417:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:196:15: note: overridden declaration is here
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:425:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_util/Sources/SortedSet.swift:204:24: note: overridden declaration is here
    override open func hashCode() -> Int {
                       ^
java_util/Sources/NavigableSet.swift:437:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_util/Sources/SortedSet.swift:216:15: note: overridden declaration is here
    open func clear() {
              ^
java_util/Sources/NavigableSet.swift:448:15: error: overriding declaration requires an 'override' keyword
    open func isEmpty() -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:227:24: note: overridden declaration is here
    override open func isEmpty() -> Bool {
                       ^
java_util/Sources/NavigableSet.swift:460:15: error: overriding declaration requires an 'override' keyword
    open func contains( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:239:24: note: overridden declaration is here
    override open func contains( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/NavigableSet.swift:468:15: error: overriding declaration requires an 'override' keyword
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:247:15: note: overridden declaration is here
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:476:15: error: overriding declaration requires an 'override' keyword
    open func size() -> Int {
              ^
         override 
java_util/Sources/SortedSet.swift:255:24: note: overridden declaration is here
    override open func size() -> Int {
                       ^
java_util/Sources/NavigableSet.swift:488:15: error: overriding declaration requires an 'override' keyword
    open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/SortedSet.swift:267:24: note: overridden declaration is here
    override open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
                       ^
java_util/Sources/NavigableSet.swift:496:15: error: overriding declaration requires an 'override' keyword
    open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/SortedSet.swift:275:24: note: overridden declaration is here
    override open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
                       ^
java_util/Sources/NavigableSet.swift:504:15: error: overriding declaration requires an 'override' keyword
    open func toArray() -> [JavaObject]! {
              ^
         override 
java_util/Sources/SortedSet.swift:283:24: note: overridden declaration is here
    override open func toArray() -> [JavaObject]! {
                       ^
java_util/Sources/NavigableSet.swift:516:15: error: overriding declaration requires an 'override' keyword
    open func addAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:308:15: note: overridden declaration is here
    open func addAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:524:15: error: overriding declaration requires an 'override' keyword
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:316:15: note: overridden declaration is here
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:532:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:324:15: note: overridden declaration is here
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:540:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:332:15: note: overridden declaration is here
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:548:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:340:15: note: overridden declaration is here
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:556:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:348:15: note: overridden declaration is here
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:564:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:356:15: note: overridden declaration is here
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:572:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:364:15: note: overridden declaration is here
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:580:15: error: overriding declaration requires an 'override' keyword
    open func stream() -> Stream! {
              ^
         override 
java_util/Sources/SortedSet.swift:372:15: note: overridden declaration is here
    open func stream() -> Stream! {
              ^
java_util/Sources/NavigableSet.swift:593:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:385:15: note: overridden declaration is here
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:601:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:393:15: note: overridden declaration is here
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:609:15: error: overriding declaration requires an 'override' keyword
    open func parallelStream() -> Stream! {
              ^
         override 
java_util/Sources/SortedSet.swift:401:15: note: overridden declaration is here
    open func parallelStream() -> Stream! {
              ^
java_util/Sources/NavigableSet.swift:622:15: error: overriding declaration requires an 'override' keyword
    open func forEach( action: Consumer? ) {
              ^
         override 
java_util/Sources/SortedSet.swift:414:15: note: overridden declaration is here
    open func forEach( action: Consumer? ) {
              ^
java_util/Sources/NavigableSet.swift:629:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _action: Consumer? ) {
              ^
         override 
java_util/Sources/SortedSet.swift:421:15: note: overridden declaration is here
    open func forEach( _ _action: Consumer? ) {
              ^
java_util/Sources/JarFile.swift:301:15: error: overriding declaration requires an 'override' keyword
    open func getInputStream( _ _ze: ZipEntry? ) throws /* java.io.IOException */ -> /* java.io.InputStream */ UnavailableObject! {
              ^
         override 
java_util/Sources/ZipFile.swift:296:15: note: overridden declaration is here
    open func getInputStream( _ _entry: ZipEntry? ) throws /* java.io.IOException */ -> /* java.io.InputStream */ UnavailableObject! {
              ^
java_util/Sources/CopyOnWriteArrayList.swift:180:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/CopyOnWriteArrayList.swift:192:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/NavigableSet.swift:325:15: error: overriding declaration requires an 'override' keyword
    open func first() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedSet.swift:52:15: note: overridden declaration is here
    open func first() -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableSet.swift:338:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/SortedSet.swift:65:15: note: overridden declaration is here
    open func spliterator() -> Spliterator! {
              ^
java_util/Sources/NavigableSet.swift:351:15: error: overriding declaration requires an 'override' keyword
    open func last() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/SortedSet.swift:78:15: note: overridden declaration is here
    open func last() -> java_swift.JavaObject! {
              ^
java_util/Sources/NavigableSet.swift:364:15: error: overriding declaration requires an 'override' keyword
    open func comparator() -> JavaComparator! {
              ^
         override 
java_util/Sources/SortedSet.swift:91:15: note: overridden declaration is here
    open func comparator() -> JavaComparator! {
              ^
java_util/Sources/NavigableSet.swift:377:15: error: overriding declaration requires an 'override' keyword
    open func add( e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:156:24: note: overridden declaration is here
    override open func add( e: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/NavigableSet.swift:385:15: error: overriding declaration requires an 'override' keyword
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:164:15: note: overridden declaration is here
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:393:15: error: overriding declaration requires an 'override' keyword
    open func remove( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:172:24: note: overridden declaration is here
    override open func remove( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/NavigableSet.swift:401:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:180:15: note: overridden declaration is here
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:409:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:188:24: note: overridden declaration is here
    override open func equals( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/NavigableSet.swift:417:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:196:15: note: overridden declaration is here
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:425:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_util/Sources/SortedSet.swift:204:24: note: overridden declaration is here
    override open func hashCode() -> Int {
                       ^
java_util/Sources/NavigableSet.swift:437:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_util/Sources/SortedSet.swift:216:15: note: overridden declaration is here
    open func clear() {
              ^
java_util/Sources/NavigableSet.swift:448:15: error: overriding declaration requires an 'override' keyword
    open func isEmpty() -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:227:24: note: overridden declaration is here
    override open func isEmpty() -> Bool {
                       ^
java_util/Sources/NavigableSet.swift:460:15: error: overriding declaration requires an 'override' keyword
    open func contains( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:239:24: note: overridden declaration is here
    override open func contains( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/NavigableSet.swift:468:15: error: overriding declaration requires an 'override' keyword
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:247:15: note: overridden declaration is here
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:476:15: error: overriding declaration requires an 'override' keyword
    open func size() -> Int {
              ^
         override 
java_util/Sources/SortedSet.swift:255:24: note: overridden declaration is here
    override open func size() -> Int {
                       ^
java_util/Sources/NavigableSet.swift:488:15: error: overriding declaration requires an 'override' keyword
    open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/SortedSet.swift:267:24: note: overridden declaration is here
    override open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
                       ^
java_util/Sources/NavigableSet.swift:496:15: error: overriding declaration requires an 'override' keyword
    open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/SortedSet.swift:275:24: note: overridden declaration is here
    override open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
                       ^
java_util/Sources/NavigableSet.swift:504:15: error: overriding declaration requires an 'override' keyword
    open func toArray() -> [JavaObject]! {
              ^
         override 
java_util/Sources/SortedSet.swift:283:24: note: overridden declaration is here
    override open func toArray() -> [JavaObject]! {
                       ^
java_util/Sources/NavigableSet.swift:516:15: error: overriding declaration requires an 'override' keyword
    open func addAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:308:15: note: overridden declaration is here
    open func addAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:524:15: error: overriding declaration requires an 'override' keyword
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:316:15: note: overridden declaration is here
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:532:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:324:15: note: overridden declaration is here
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:540:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:332:15: note: overridden declaration is here
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:548:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:340:15: note: overridden declaration is here
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:556:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:348:15: note: overridden declaration is here
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:564:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:356:15: note: overridden declaration is here
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:572:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:364:15: note: overridden declaration is here
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:580:15: error: overriding declaration requires an 'override' keyword
    open func stream() -> Stream! {
              ^
         override 
java_util/Sources/SortedSet.swift:372:15: note: overridden declaration is here
    open func stream() -> Stream! {
              ^
java_util/Sources/NavigableSet.swift:593:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:385:15: note: overridden declaration is here
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:601:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/SortedSet.swift:393:15: note: overridden declaration is here
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
java_util/Sources/NavigableSet.swift:609:15: error: overriding declaration requires an 'override' keyword
    open func parallelStream() -> Stream! {
              ^
         override 
java_util/Sources/SortedSet.swift:401:15: note: overridden declaration is here
    open func parallelStream() -> Stream! {
              ^
java_util/Sources/NavigableSet.swift:622:15: error: overriding declaration requires an 'override' keyword
    open func forEach( action: Consumer? ) {
              ^
         override 
java_util/Sources/SortedSet.swift:414:15: note: overridden declaration is here
    open func forEach( action: Consumer? ) {
              ^
java_util/Sources/NavigableSet.swift:629:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _action: Consumer? ) {
              ^
         override 
java_util/Sources/SortedSet.swift:421:15: note: overridden declaration is here
    open func forEach( _ _action: Consumer? ) {
              ^
java_util/Sources/PriorityBlockingQueue.swift:300:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:74:24: note: overridden declaration is here
    override open func equals( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/PriorityBlockingQueue.swift:308:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:82:24: note: overridden declaration is here
    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/LongStream.swift:850:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_util/Sources/BaseStream.swift:83:24: note: overridden declaration is here
    override open func close() {
                       ^
java_util/Sources/LongStream.swift:861:15: error: overriding declaration requires an 'override' keyword
    open func isParallel() -> Bool {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func isParallel() -> Bool {
              ^
java_util/Sources/LongStream.swift:873:15: error: overriding declaration requires an 'override' keyword
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:119:15: note: overridden declaration is here
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:882:15: error: overriding declaration requires an 'override' keyword
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:128:15: note: overridden declaration is here
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:890:15: error: overriding declaration requires an 'override' keyword
    open func unordered() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:149:15: note: overridden declaration is here
    open func unordered() -> BaseStream! {
              ^
java_util/Sources/RunnableScheduledFuture.swift:41:15: error: overriding declaration requires an 'override' keyword
    open func run() {
              ^
         override 
java_util/Sources/RunnableFuture.swift:29:24: note: overridden declaration is here
    override open func run() {
                       ^
java_util/Sources/RunnableScheduledFuture.swift:52:15: error: overriding declaration requires an 'override' keyword
    open func get( timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/RunnableFuture.swift:40:15: note: overridden declaration is here
    open func get( timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/RunnableScheduledFuture.swift:65:15: error: overriding declaration requires an 'override' keyword
    open func get( _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/RunnableFuture.swift:53:15: note: overridden declaration is here
    open func get( _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/RunnableScheduledFuture.swift:73:15: error: overriding declaration requires an 'override' keyword
    open func get() throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/RunnableFuture.swift:61:15: note: overridden declaration is here
    open func get() throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/RunnableScheduledFuture.swift:89:15: error: overriding declaration requires an 'override' keyword
    open func cancel( mayInterruptIfRunning: Bool ) -> Bool {
              ^
         override 
java_util/Sources/RunnableFuture.swift:77:15: note: overridden declaration is here
    open func cancel( mayInterruptIfRunning: Bool ) -> Bool {
              ^
java_util/Sources/RunnableScheduledFuture.swift:97:15: error: overriding declaration requires an 'override' keyword
    open func cancel( _ _mayInterruptIfRunning: Bool ) -> Bool {
              ^
         override 
java_util/Sources/RunnableFuture.swift:85:15: note: overridden declaration is here
    open func cancel( _ _mayInterruptIfRunning: Bool ) -> Bool {
              ^
java_util/Sources/RunnableScheduledFuture.swift:105:15: error: overriding declaration requires an 'override' keyword
    open func isDone() -> Bool {
              ^
         override 
java_util/Sources/RunnableFuture.swift:93:15: note: overridden declaration is here
    open func isDone() -> Bool {
              ^
java_util/Sources/RunnableScheduledFuture.swift:117:15: error: overriding declaration requires an 'override' keyword
    open func isCancelled() -> Bool {
              ^
         override 
java_util/Sources/RunnableFuture.swift:105:15: note: overridden declaration is here
    open func isCancelled() -> Bool {
              ^
java_util/Sources/AbstractMap.swift:128:15: error: overriding declaration requires an 'override' keyword
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/TreeMap.swift:127:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:128:15: note: overridden declaration is here
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/TreeMap.swift:142:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:383:15: note: overridden declaration is here
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/TreeMap.swift:152:15: error: overriding declaration requires an 'override' keyword
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:393:15: note: overridden declaration is here
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/TreeMap.swift:160:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:401:15: note: overridden declaration is here
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/TreeMap.swift:170:15: error: overriding declaration requires an 'override' keyword
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:411:15: note: overridden declaration is here
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/TreeMap.swift:178:15: error: overriding declaration requires an 'override' keyword
    open func replaceAll( arg0: BiFunction? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:419:15: note: overridden declaration is here
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/TreeMap.swift:185:15: error: overriding declaration requires an 'override' keyword
    open func replaceAll( _ _arg0: BiFunction? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:426:15: note: overridden declaration is here
    open func replaceAll( _ _arg0: BiFunction? ) {
              ^
java_util/Sources/TreeMap.swift:205:15: error: overriding declaration requires an 'override' keyword
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:192:15: note: overridden declaration is here
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
java_util/Sources/TreeMap.swift:212:15: error: overriding declaration requires an 'override' keyword
    open func putAll( _ _arg0: java_swift.JavaMap? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:199:15: note: overridden declaration is here
    open func putAll( _ _arg0: java_swift.JavaMap? ) {
              ^
java_util/Sources/TreeMap.swift:238:15: error: overriding declaration requires an 'override' keyword
    open func forEach( arg0: BiConsumer? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:350:15: note: overridden declaration is here
    open func forEach( arg0: BiConsumer? ) {
              ^
java_util/Sources/TreeMap.swift:245:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _arg0: BiConsumer? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:357:15: note: overridden declaration is here
    open func forEach( _ _arg0: BiConsumer? ) {
              ^
java_util/Sources/AbstractMap.swift:95:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:14:15: note: overridden declaration is here
    open func equals(arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/AbstractMap.swift:103:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/TreeMap.swift:695:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:95:15: note: overridden declaration is here
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/TreeMap.swift:703:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:103:15: note: overridden declaration is here
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/TreeMap.swift:711:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:43:15: note: overridden declaration is here
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/TreeMap.swift:720:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:52:15: note: overridden declaration is here
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/TreeMap.swift:740:15: error: overriding declaration requires an 'override' keyword
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:77:15: note: overridden declaration is here
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/TreeMap.swift:750:15: error: overriding declaration requires an 'override' keyword
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:87:15: note: overridden declaration is here
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/TreeMap.swift:762:15: error: overriding declaration requires an 'override' keyword
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:60:15: note: overridden declaration is here
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/TreeMap.swift:771:15: error: overriding declaration requires an 'override' keyword
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:69:15: note: overridden declaration is here
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/TreeMap.swift:779:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:222:15: note: overridden declaration is here
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/TreeMap.swift:787:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:230:15: note: overridden declaration is here
    open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/TreeMap.swift:799:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:238:15: note: overridden declaration is here
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/TreeMap.swift:807:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:246:15: note: overridden declaration is here
    open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/TransferQueue.swift:124:15: error: overriding declaration requires an 'override' keyword
    open func add( e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:69:24: note: overridden declaration is here
    override open func add( e: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:132:15: error: overriding declaration requires an 'override' keyword
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:77:24: note: overridden declaration is here
    override open func add( _ _e: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:140:15: error: overriding declaration requires an 'override' keyword
    open func remove( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:85:24: note: overridden declaration is here
    override open func remove( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:148:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:93:24: note: overridden declaration is here
    override open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:309:15: error: overriding declaration requires an 'override' keyword
    open func remove() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:254:24: note: overridden declaration is here
    override open func remove() -> java_swift.JavaObject! {
                       ^
java_util/Sources/TransferQueue.swift:156:15: error: overriding declaration requires an 'override' keyword
    open func put( e: java_swift.JavaObject? ) throws /* java.lang.InterruptedException */ {
              ^
         override 
java_util/Sources/BlockingQueue.swift:101:15: note: overridden declaration is here
    open func put( e: java_swift.JavaObject? ) throws /* java.lang.InterruptedException */ {
              ^
java_util/Sources/TransferQueue.swift:166:15: error: overriding declaration requires an 'override' keyword
    open func put( _ _e: java_swift.JavaObject? ) throws /* java.lang.InterruptedException */ {
              ^
         override 
java_util/Sources/BlockingQueue.swift:111:15: note: overridden declaration is here
    open func put( _ _e: java_swift.JavaObject? ) throws /* java.lang.InterruptedException */ {
              ^
java_util/Sources/TransferQueue.swift:174:15: error: overriding declaration requires an 'override' keyword
    open func contains( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:119:24: note: overridden declaration is here
    override open func contains( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:182:15: error: overriding declaration requires an 'override' keyword
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:127:24: note: overridden declaration is here
    override open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:190:15: error: overriding declaration requires an 'override' keyword
    open func poll( timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:135:15: note: overridden declaration is here
    open func poll( timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/TransferQueue.swift:203:15: error: overriding declaration requires an 'override' keyword
    open func poll( _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:148:15: note: overridden declaration is here
    open func poll( _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/TransferQueue.swift:322:15: error: overriding declaration requires an 'override' keyword
    open func poll() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:267:24: note: overridden declaration is here
    override open func poll() -> java_swift.JavaObject! {
                       ^
java_util/Sources/TransferQueue.swift:211:15: error: overriding declaration requires an 'override' keyword
    open func take() throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:156:15: note: overridden declaration is here
    open func take() throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/TransferQueue.swift:227:15: error: overriding declaration requires an 'override' keyword
    open func remainingCapacity() -> Int {
              ^
         override 
java_util/Sources/BlockingQueue.swift:172:15: note: overridden declaration is here
    open func remainingCapacity() -> Int {
              ^
java_util/Sources/TransferQueue.swift:239:15: error: overriding declaration requires an 'override' keyword
    open func drainTo( c: Collection?, maxElements: Int ) -> Int {
              ^
         override 
java_util/Sources/BlockingQueue.swift:184:15: note: overridden declaration is here
    open func drainTo( c: Collection?, maxElements: Int ) -> Int {
              ^
java_util/Sources/TransferQueue.swift:248:15: error: overriding declaration requires an 'override' keyword
    open func drainTo( _ _c: Collection?, _ _maxElements: Int ) -> Int {
              ^
         override 
java_util/Sources/BlockingQueue.swift:193:15: note: overridden declaration is here
    open func drainTo( _ _c: Collection?, _ _maxElements: Int ) -> Int {
              ^
java_util/Sources/TransferQueue.swift:256:15: error: overriding declaration requires an 'override' keyword
    open func drainTo( c: Collection? ) -> Int {
              ^
         override 
java_util/Sources/BlockingQueue.swift:201:15: note: overridden declaration is here
    open func drainTo( c: Collection? ) -> Int {
              ^
java_util/Sources/TransferQueue.swift:264:15: error: overriding declaration requires an 'override' keyword
    open func drainTo( _ _c: Collection? ) -> Int {
              ^
         override 
java_util/Sources/BlockingQueue.swift:209:15: note: overridden declaration is here
    open func drainTo( _ _c: Collection? ) -> Int {
              ^
java_util/Sources/TransferQueue.swift:272:15: error: overriding declaration requires an 'override' keyword
    open func offer( e: java_swift.JavaObject?, timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:217:15: note: overridden declaration is here
    open func offer( e: java_swift.JavaObject?, timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
              ^
java_util/Sources/TransferQueue.swift:285:15: error: overriding declaration requires an 'override' keyword
    open func offer( _ _e: java_swift.JavaObject?, _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:230:15: note: overridden declaration is here
    open func offer( _ _e: java_swift.JavaObject?, _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
              ^
java_util/Sources/TransferQueue.swift:293:15: error: overriding declaration requires an 'override' keyword
    open func offer( e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:238:24: note: overridden declaration is here
    override open func offer( e: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:301:15: error: overriding declaration requires an 'override' keyword
    open func offer( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:246:24: note: overridden declaration is here
    override open func offer( _ _e: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:335:15: error: overriding declaration requires an 'override' keyword
    open func peek() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:280:24: note: overridden declaration is here
    override open func peek() -> java_swift.JavaObject! {
                       ^
java_util/Sources/TransferQueue.swift:348:15: error: overriding declaration requires an 'override' keyword
    open func element() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:293:24: note: overridden declaration is here
    override open func element() -> java_swift.JavaObject! {
                       ^
java_util/Sources/TransferQueue.swift:361:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:306:24: note: overridden declaration is here
    override open func equals( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:369:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:314:24: note: overridden declaration is here
    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:377:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_util/Sources/BlockingQueue.swift:322:24: note: overridden declaration is here
    override open func hashCode() -> Int {
                       ^
java_util/Sources/TransferQueue.swift:389:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_util/Sources/BlockingQueue.swift:334:24: note: overridden declaration is here
    override open func clear() {
                       ^
java_util/Sources/TransferQueue.swift:400:15: error: overriding declaration requires an 'override' keyword
    open func isEmpty() -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:345:24: note: overridden declaration is here
    override open func isEmpty() -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:412:15: error: overriding declaration requires an 'override' keyword
    open func size() -> Int {
              ^
         override 
java_util/Sources/BlockingQueue.swift:357:24: note: overridden declaration is here
    override open func size() -> Int {
                       ^
java_util/Sources/TransferQueue.swift:424:15: error: overriding declaration requires an 'override' keyword
    open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:369:24: note: overridden declaration is here
    override open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
                       ^
java_util/Sources/TransferQueue.swift:432:15: error: overriding declaration requires an 'override' keyword
    open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:377:24: note: overridden declaration is here
    override open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
                       ^
java_util/Sources/TransferQueue.swift:440:15: error: overriding declaration requires an 'override' keyword
    open func toArray() -> [JavaObject]! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:385:24: note: overridden declaration is here
    override open func toArray() -> [JavaObject]! {
                       ^
java_util/Sources/TransferQueue.swift:452:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:397:24: note: overridden declaration is here
    override open func iterator() -> Iterator! {
                       ^
java_util/Sources/TransferQueue.swift:465:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:410:24: note: overridden declaration is here
    override open func spliterator() -> Spliterator! {
                       ^
java_util/Sources/TransferQueue.swift:478:15: error: overriding declaration requires an 'override' keyword
    open func addAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:423:24: note: overridden declaration is here
    override open func addAll( c: Collection? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:486:15: error: overriding declaration requires an 'override' keyword
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:431:24: note: overridden declaration is here
    override open func addAll( _ _c: Collection? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:494:15: error: overriding declaration requires an 'override' keyword
    open func stream() -> Stream! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:439:24: note: overridden declaration is here
    override open func stream() -> Stream! {
                       ^
java_util/Sources/TransferQueue.swift:507:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:452:24: note: overridden declaration is here
    override open func containsAll( c: Collection? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:515:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:460:24: note: overridden declaration is here
    override open func containsAll( _ _c: Collection? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:523:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:468:24: note: overridden declaration is here
    override open func removeAll( c: Collection? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:531:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:476:24: note: overridden declaration is here
    override open func removeAll( _ _c: Collection? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:539:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:484:24: note: overridden declaration is here
    override open func retainAll( c: Collection? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:547:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:492:24: note: overridden declaration is here
    override open func retainAll( _ _c: Collection? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:555:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:500:24: note: overridden declaration is here
    override open func removeIf( filter: Predicate? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:563:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/BlockingQueue.swift:508:24: note: overridden declaration is here
    override open func removeIf( _ _filter: Predicate? ) -> Bool {
                       ^
java_util/Sources/TransferQueue.swift:571:15: error: overriding declaration requires an 'override' keyword
    open func parallelStream() -> Stream! {
              ^
         override 
java_util/Sources/BlockingQueue.swift:516:24: note: overridden declaration is here
    override open func parallelStream() -> Stream! {
                       ^
java_util/Sources/TransferQueue.swift:584:15: error: overriding declaration requires an 'override' keyword
    open func forEach( action: Consumer? ) {
              ^
         override 
java_util/Sources/BlockingQueue.swift:529:24: note: overridden declaration is here
    override open func forEach( action: Consumer? ) {
                       ^
java_util/Sources/TransferQueue.swift:591:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _action: Consumer? ) {
              ^
         override 
java_util/Sources/BlockingQueue.swift:536:24: note: overridden declaration is here
    override open func forEach( _ _action: Consumer? ) {
                       ^
java_util/Sources/EnumSet.swift:40:15: error: overriding declaration requires an 'override' keyword
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/EnumSet.swift:56:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> EnumSet! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/EnumSet.swift:56:15: error: 'clone()' has already been overridden
    open func clone() -> EnumSet! {
              ^
java_util/Sources/EnumSet.swift:40:15: note: 'clone()' previously overridden here
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/LinkedTransferQueue.swift:345:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:74:24: note: overridden declaration is here
    override open func equals( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/LinkedTransferQueue.swift:353:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractQueue.swift:82:24: note: overridden declaration is here
    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:132:15: error: overriding declaration requires an 'override' keyword
    open func add( e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:48:24: note: overridden declaration is here
    override open func add( e: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:140:15: error: overriding declaration requires an 'override' keyword
    open func add( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:56:24: note: overridden declaration is here
    override open func add( _ _e: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:148:15: error: overriding declaration requires an 'override' keyword
    open func remove() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/Queue.swift:64:15: note: overridden declaration is here
    open func remove() -> java_swift.JavaObject! {
              ^
java_util/Sources/Deque.swift:161:15: error: overriding declaration requires an 'override' keyword
    open func remove( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:132:24: note: overridden declaration is here
    override open func remove( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:169:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:140:24: note: overridden declaration is here
    override open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:177:15: error: overriding declaration requires an 'override' keyword
    open func contains( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:199:24: note: overridden declaration is here
    override open func contains( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:185:15: error: overriding declaration requires an 'override' keyword
    open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:207:24: note: overridden declaration is here
    override open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:193:15: error: overriding declaration requires an 'override' keyword
    open func size() -> Int {
              ^
         override 
java_util/Sources/Queue.swift:215:24: note: overridden declaration is here
    override open func size() -> Int {
                       ^
java_util/Sources/Deque.swift:205:15: error: overriding declaration requires an 'override' keyword
    open func iterator() -> Iterator! {
              ^
         override 
java_util/Sources/Queue.swift:255:24: note: overridden declaration is here
    override open func iterator() -> Iterator! {
                       ^
java_util/Sources/Deque.swift:259:15: error: overriding declaration requires an 'override' keyword
    open func poll() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/Queue.swift:77:15: note: overridden declaration is here
    open func poll() -> java_swift.JavaObject! {
              ^
java_util/Sources/Deque.swift:272:15: error: overriding declaration requires an 'override' keyword
    open func peek() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/Queue.swift:90:15: note: overridden declaration is here
    open func peek() -> java_swift.JavaObject! {
              ^
java_util/Sources/Deque.swift:285:15: error: overriding declaration requires an 'override' keyword
    open func element() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/Queue.swift:103:15: note: overridden declaration is here
    open func element() -> java_swift.JavaObject! {
              ^
java_util/Sources/Deque.swift:483:15: error: overriding declaration requires an 'override' keyword
    open func offer( e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:116:15: note: overridden declaration is here
    open func offer( e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/Deque.swift:491:15: error: overriding declaration requires an 'override' keyword
    open func offer( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:124:15: note: overridden declaration is here
    open func offer( _ _e: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/Deque.swift:512:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:148:24: note: overridden declaration is here
    override open func equals( o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:520:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:156:24: note: overridden declaration is here
    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:528:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_util/Sources/Queue.swift:164:24: note: overridden declaration is here
    override open func hashCode() -> Int {
                       ^
java_util/Sources/Deque.swift:540:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_util/Sources/Queue.swift:176:24: note: overridden declaration is here
    override open func clear() {
                       ^
java_util/Sources/Deque.swift:551:15: error: overriding declaration requires an 'override' keyword
    open func isEmpty() -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:187:24: note: overridden declaration is here
    override open func isEmpty() -> Bool {
                       ^
java_util/Sources/Deque.swift:563:15: error: overriding declaration requires an 'override' keyword
    open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/Queue.swift:227:24: note: overridden declaration is here
    override open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
                       ^
java_util/Sources/Deque.swift:571:15: error: overriding declaration requires an 'override' keyword
    open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
              ^
         override 
java_util/Sources/Queue.swift:235:24: note: overridden declaration is here
    override open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
                       ^
java_util/Sources/Deque.swift:579:15: error: overriding declaration requires an 'override' keyword
    open func toArray() -> [JavaObject]! {
              ^
         override 
java_util/Sources/Queue.swift:243:24: note: overridden declaration is here
    override open func toArray() -> [JavaObject]! {
                       ^
java_util/Sources/Deque.swift:591:15: error: overriding declaration requires an 'override' keyword
    open func spliterator() -> Spliterator! {
              ^
         override 
java_util/Sources/Queue.swift:268:24: note: overridden declaration is here
    override open func spliterator() -> Spliterator! {
                       ^
java_util/Sources/Deque.swift:604:15: error: overriding declaration requires an 'override' keyword
    open func addAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:281:24: note: overridden declaration is here
    override open func addAll( c: Collection? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:612:15: error: overriding declaration requires an 'override' keyword
    open func addAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:289:24: note: overridden declaration is here
    override open func addAll( _ _c: Collection? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:620:15: error: overriding declaration requires an 'override' keyword
    open func stream() -> Stream! {
              ^
         override 
java_util/Sources/Queue.swift:297:24: note: overridden declaration is here
    override open func stream() -> Stream! {
                       ^
java_util/Sources/Deque.swift:633:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:310:24: note: overridden declaration is here
    override open func containsAll( c: Collection? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:641:15: error: overriding declaration requires an 'override' keyword
    open func containsAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:318:24: note: overridden declaration is here
    override open func containsAll( _ _c: Collection? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:649:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:326:24: note: overridden declaration is here
    override open func removeAll( c: Collection? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:657:15: error: overriding declaration requires an 'override' keyword
    open func removeAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:334:24: note: overridden declaration is here
    override open func removeAll( _ _c: Collection? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:665:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:342:24: note: overridden declaration is here
    override open func retainAll( c: Collection? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:673:15: error: overriding declaration requires an 'override' keyword
    open func retainAll( _ _c: Collection? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:350:24: note: overridden declaration is here
    override open func retainAll( _ _c: Collection? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:681:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:358:24: note: overridden declaration is here
    override open func removeIf( filter: Predicate? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:689:15: error: overriding declaration requires an 'override' keyword
    open func removeIf( _ _filter: Predicate? ) -> Bool {
              ^
         override 
java_util/Sources/Queue.swift:366:24: note: overridden declaration is here
    override open func removeIf( _ _filter: Predicate? ) -> Bool {
                       ^
java_util/Sources/Deque.swift:697:15: error: overriding declaration requires an 'override' keyword
    open func parallelStream() -> Stream! {
              ^
         override 
java_util/Sources/Queue.swift:374:24: note: overridden declaration is here
    override open func parallelStream() -> Stream! {
                       ^
java_util/Sources/Deque.swift:710:15: error: overriding declaration requires an 'override' keyword
    open func forEach( action: Consumer? ) {
              ^
         override 
java_util/Sources/Queue.swift:387:24: note: overridden declaration is here
    override open func forEach( action: Consumer? ) {
                       ^
java_util/Sources/Deque.swift:717:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _action: Consumer? ) {
              ^
         override 
java_util/Sources/Queue.swift:394:24: note: overridden declaration is here
    override open func forEach( _ _action: Consumer? ) {
                       ^
java_util/Sources/ConcurrentHashMap.swift:187:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:276:15: note: overridden declaration is here
    open func remove( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentHashMap.swift:196:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:285:15: note: overridden declaration is here
    open func remove( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentHashMap.swift:1153:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:43:15: note: overridden declaration is here
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:1162:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:52:15: note: overridden declaration is here
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:222:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:383:15: note: overridden declaration is here
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:232:15: error: overriding declaration requires an 'override' keyword
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:393:15: note: overridden declaration is here
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:240:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:401:15: note: overridden declaration is here
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentHashMap.swift:250:15: error: overriding declaration requires an 'override' keyword
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:411:15: note: overridden declaration is here
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentHashMap.swift:274:15: error: overriding declaration requires an 'override' keyword
    open func replaceAll( arg0: BiFunction? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:419:15: note: overridden declaration is here
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/ConcurrentHashMap.swift:281:15: error: overriding declaration requires an 'override' keyword
    open func replaceAll( _ _arg0: BiFunction? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:426:15: note: overridden declaration is here
    open func replaceAll( _ _arg0: BiFunction? ) {
              ^
java_util/Sources/ConcurrentHashMap.swift:308:15: error: overriding declaration requires an 'override' keyword
    open func putIfAbsent( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:313:15: note: overridden declaration is here
    open func putIfAbsent( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:318:15: error: overriding declaration requires an 'override' keyword
    open func putIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:323:15: note: overridden declaration is here
    open func putIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:368:15: error: overriding declaration requires an 'override' keyword
    open func getOrDefault( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:295:15: note: overridden declaration is here
    open func getOrDefault( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:378:15: error: overriding declaration requires an 'override' keyword
    open func getOrDefault( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:305:15: note: overridden declaration is here
    open func getOrDefault( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:386:15: error: overriding declaration requires an 'override' keyword
    open func forEach( arg0: BiConsumer? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:350:15: note: overridden declaration is here
    open func forEach( arg0: BiConsumer? ) {
              ^
java_util/Sources/ConcurrentHashMap.swift:393:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _arg0: BiConsumer? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:357:15: note: overridden declaration is here
    open func forEach( _ _arg0: BiConsumer? ) {
              ^
java_util/Sources/ConcurrentHashMap.swift:434:15: error: overriding declaration requires an 'override' keyword
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:258:15: note: overridden declaration is here
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:444:15: error: overriding declaration requires an 'override' keyword
    open func computeIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: Function? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:268:15: note: overridden declaration is here
    open func computeIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:452:15: error: overriding declaration requires an 'override' keyword
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:365:15: note: overridden declaration is here
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:462:15: error: overriding declaration requires an 'override' keyword
    open func computeIfPresent( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:375:15: note: overridden declaration is here
    open func computeIfPresent( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:470:15: error: overriding declaration requires an 'override' keyword
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:434:15: note: overridden declaration is here
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:480:15: error: overriding declaration requires an 'override' keyword
    open func compute( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:444:15: note: overridden declaration is here
    open func compute( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:488:15: error: overriding declaration requires an 'override' keyword
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:331:15: note: overridden declaration is here
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:499:15: error: overriding declaration requires an 'override' keyword
    open func merge( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:342:15: note: overridden declaration is here
    open func merge( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/AbstractMap.swift:95:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:14:15: note: overridden declaration is here
    open func equals(arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/AbstractMap.swift:103:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/ConcurrentHashMap.swift:1120:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:95:15: note: overridden declaration is here
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentHashMap.swift:1128:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:103:15: note: overridden declaration is here
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentHashMap.swift:1136:15: error: overriding declaration requires an 'override' keyword
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:60:15: note: overridden declaration is here
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:1145:15: error: overriding declaration requires an 'override' keyword
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:69:15: note: overridden declaration is here
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:1170:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:222:15: note: overridden declaration is here
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentHashMap.swift:1178:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:230:15: note: overridden declaration is here
    open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentHashMap.swift:1190:15: error: overriding declaration requires an 'override' keyword
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:192:15: note: overridden declaration is here
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
java_util/Sources/ConcurrentHashMap.swift:1197:15: error: overriding declaration requires an 'override' keyword
    open func putAll( _ _arg0: java_swift.JavaMap? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:199:15: note: overridden declaration is here
    open func putAll( _ _arg0: java_swift.JavaMap? ) {
              ^
java_util/Sources/ConcurrentHashMap.swift:1209:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:238:15: note: overridden declaration is here
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentHashMap.swift:1217:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:246:15: note: overridden declaration is here
    open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentHashMap.swift:1227:15: error: overriding declaration requires an 'override' keyword
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:77:15: note: overridden declaration is here
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentHashMap.swift:1237:15: error: overriding declaration requires an 'override' keyword
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:87:15: note: overridden declaration is here
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/BinaryOperator.swift:70:15: error: overriding declaration requires an 'override' keyword
    open func apply( t: java_swift.JavaObject?, u: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BiFunction.swift:34:15: note: overridden declaration is here
    open func apply( t: java_swift.JavaObject?, u: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/BinaryOperator.swift:80:15: error: overriding declaration requires an 'override' keyword
    open func apply( _ _t: java_swift.JavaObject?, _ _u: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BiFunction.swift:44:15: note: overridden declaration is here
    open func apply( _ _t: java_swift.JavaObject?, _ _u: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/BinaryOperator.swift:88:15: error: overriding declaration requires an 'override' keyword
    open func andThen( after: Function? ) -> BiFunction! {
              ^
         override 
java_util/Sources/BiFunction.swift:52:15: note: overridden declaration is here
    open func andThen( after: Function? ) -> BiFunction! {
              ^
java_util/Sources/BinaryOperator.swift:97:15: error: overriding declaration requires an 'override' keyword
    open func andThen( _ _after: Function? ) -> BiFunction! {
              ^
         override 
java_util/Sources/BiFunction.swift:61:15: note: overridden declaration is here
    open func andThen( _ _after: Function? ) -> BiFunction! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:127:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:276:15: note: overridden declaration is here
    open func remove( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:136:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:285:15: note: overridden declaration is here
    open func remove( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:834:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:43:15: note: overridden declaration is here
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:843:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:52:15: note: overridden declaration is here
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/AbstractMap.swift:128:15: error: overriding declaration requires an 'override' keyword
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentSkipListMap.swift:152:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> ConcurrentSkipListMap! {
              ^
         override 
java_util/Sources/AbstractMap.swift:128:15: note: overridden declaration is here
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:165:15: error: overriding declaration requires an 'override' keyword
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:128:15: note: overridden declaration is here
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:165:15: error: 'clone()' has already been overridden
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:152:15: note: 'clone()' previously overridden here
    open func clone() -> ConcurrentSkipListMap! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:185:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:383:15: note: overridden declaration is here
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:195:15: error: overriding declaration requires an 'override' keyword
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:393:15: note: overridden declaration is here
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:203:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:401:15: note: overridden declaration is here
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:213:15: error: overriding declaration requires an 'override' keyword
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:411:15: note: overridden declaration is here
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:221:15: error: overriding declaration requires an 'override' keyword
    open func replaceAll( arg0: BiFunction? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:419:15: note: overridden declaration is here
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:228:15: error: overriding declaration requires an 'override' keyword
    open func replaceAll( _ _arg0: BiFunction? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:426:15: note: overridden declaration is here
    open func replaceAll( _ _arg0: BiFunction? ) {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:242:15: error: overriding declaration requires an 'override' keyword
    open func putIfAbsent( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:313:15: note: overridden declaration is here
    open func putIfAbsent( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:252:15: error: overriding declaration requires an 'override' keyword
    open func putIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:323:15: note: overridden declaration is here
    open func putIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:272:15: error: overriding declaration requires an 'override' keyword
    open func getOrDefault( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:295:15: note: overridden declaration is here
    open func getOrDefault( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:282:15: error: overriding declaration requires an 'override' keyword
    open func getOrDefault( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:305:15: note: overridden declaration is here
    open func getOrDefault( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:290:15: error: overriding declaration requires an 'override' keyword
    open func forEach( arg0: BiConsumer? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:350:15: note: overridden declaration is here
    open func forEach( arg0: BiConsumer? ) {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:297:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _arg0: BiConsumer? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:357:15: note: overridden declaration is here
    open func forEach( _ _arg0: BiConsumer? ) {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:305:15: error: overriding declaration requires an 'override' keyword
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:258:15: note: overridden declaration is here
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:315:15: error: overriding declaration requires an 'override' keyword
    open func computeIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: Function? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:268:15: note: overridden declaration is here
    open func computeIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:323:15: error: overriding declaration requires an 'override' keyword
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:365:15: note: overridden declaration is here
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:333:15: error: overriding declaration requires an 'override' keyword
    open func computeIfPresent( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:375:15: note: overridden declaration is here
    open func computeIfPresent( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:341:15: error: overriding declaration requires an 'override' keyword
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:434:15: note: overridden declaration is here
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:351:15: error: overriding declaration requires an 'override' keyword
    open func compute( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:444:15: note: overridden declaration is here
    open func compute( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:359:15: error: overriding declaration requires an 'override' keyword
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:331:15: note: overridden declaration is here
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:370:15: error: overriding declaration requires an 'override' keyword
    open func merge( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:342:15: note: overridden declaration is here
    open func merge( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/AbstractMap.swift:95:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:14:15: note: overridden declaration is here
    open func equals(arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/AbstractMap.swift:103:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/ConcurrentSkipListMap.swift:818:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:95:15: note: overridden declaration is here
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:826:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:103:15: note: overridden declaration is here
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:851:15: error: overriding declaration requires an 'override' keyword
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:192:15: note: overridden declaration is here
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:858:15: error: overriding declaration requires an 'override' keyword
    open func putAll( _ _arg0: java_swift.JavaMap? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:199:15: note: overridden declaration is here
    open func putAll( _ _arg0: java_swift.JavaMap? ) {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:870:15: error: overriding declaration requires an 'override' keyword
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:77:15: note: overridden declaration is here
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:880:15: error: overriding declaration requires an 'override' keyword
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:87:15: note: overridden declaration is here
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:890:15: error: overriding declaration requires an 'override' keyword
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:60:15: note: overridden declaration is here
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:899:15: error: overriding declaration requires an 'override' keyword
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:69:15: note: overridden declaration is here
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:907:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:222:15: note: overridden declaration is here
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:915:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:230:15: note: overridden declaration is here
    open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:927:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:238:15: note: overridden declaration is here
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentSkipListMap.swift:935:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:246:15: note: overridden declaration is here
    open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/GZIPInputStream.swift:85:14: error: overriding declaration requires an 'override' keyword
    open var inf: Inflater! {
             ^
java_util/Sources/InflaterInputStream.swift:26:14: note: overridden declaration is here
    open var inf: Inflater! {
             ^
java_util/Sources/GZIPInputStream.swift:102:14: error: overriding declaration requires an 'override' keyword
    open var buf: [Int8]! {
             ^
java_util/Sources/InflaterInputStream.swift:43:14: note: overridden declaration is here
    open var buf: [Int8]! {
             ^
java_util/Sources/GZIPInputStream.swift:119:14: error: overriding declaration requires an 'override' keyword
    open var len: Int {
             ^
java_util/Sources/InflaterInputStream.swift:60:14: note: overridden declaration is here
    open var len: Int {
             ^
java_util/Sources/GZIPInputStream.swift:146:14: error: overriding declaration requires an 'override' keyword
    open var _in: /* java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/InflaterInputStream.swift:87:14: note: overridden declaration is here
    open var _in: /* java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/LongStream.swift:850:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_util/Sources/BaseStream.swift:83:24: note: overridden declaration is here
    override open func close() {
                       ^
java_util/Sources/LongStream.swift:861:15: error: overriding declaration requires an 'override' keyword
    open func isParallel() -> Bool {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func isParallel() -> Bool {
              ^
java_util/Sources/LongStream.swift:873:15: error: overriding declaration requires an 'override' keyword
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:119:15: note: overridden declaration is here
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:882:15: error: overriding declaration requires an 'override' keyword
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:128:15: note: overridden declaration is here
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:890:15: error: overriding declaration requires an 'override' keyword
    open func unordered() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:149:15: note: overridden declaration is here
    open func unordered() -> BaseStream! {
              ^
java_util/Sources/UnaryOperator.swift:43:15: error: overriding declaration requires an 'override' keyword
    open func apply( t: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/Function.swift:46:15: note: overridden declaration is here
    open func apply( t: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/UnaryOperator.swift:52:15: error: overriding declaration requires an 'override' keyword
    open func apply( _ _t: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/Function.swift:55:15: note: overridden declaration is here
    open func apply( _ _t: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/UnaryOperator.swift:60:15: error: overriding declaration requires an 'override' keyword
    open func compose( before: Function? ) -> Function! {
              ^
         override 
java_util/Sources/Function.swift:76:15: note: overridden declaration is here
    open func compose( before: Function? ) -> Function! {
              ^
java_util/Sources/UnaryOperator.swift:69:15: error: overriding declaration requires an 'override' keyword
    open func compose( _ _before: Function? ) -> Function! {
              ^
         override 
java_util/Sources/Function.swift:85:15: note: overridden declaration is here
    open func compose( _ _before: Function? ) -> Function! {
              ^
java_util/Sources/UnaryOperator.swift:77:15: error: overriding declaration requires an 'override' keyword
    open func andThen( after: Function? ) -> Function! {
              ^
         override 
java_util/Sources/Function.swift:93:15: note: overridden declaration is here
    open func andThen( after: Function? ) -> Function! {
              ^
java_util/Sources/UnaryOperator.swift:86:15: error: overriding declaration requires an 'override' keyword
    open func andThen( _ _after: Function? ) -> Function! {
              ^
         override 
java_util/Sources/Function.swift:102:15: note: overridden declaration is here
    open func andThen( _ _after: Function? ) -> Function! {
              ^
java_util/Sources/PrimitiveIterator.swift:79:15: error: overriding declaration requires an 'override' keyword
    open func forEachRemaining( action: Consumer? ) {
              ^
         override 
java_util/Sources/Iterator.swift:76:15: note: overridden declaration is here
    open func forEachRemaining( action: Consumer? ) {
              ^
java_util/Sources/PrimitiveIterator.swift:86:15: error: overriding declaration requires an 'override' keyword
    open func forEachRemaining( _ _action: Consumer? ) {
              ^
         override 
java_util/Sources/Iterator.swift:83:15: note: overridden declaration is here
    open func forEachRemaining( _ _action: Consumer? ) {
              ^
java_util/Sources/PrimitiveIterator.swift:43:15: error: overriding declaration requires an 'override' keyword
    open func remove() {
              ^
         override 
java_util/Sources/Iterator.swift:40:15: note: overridden declaration is here
    open func remove() {
              ^
java_util/Sources/PrimitiveIterator.swift:54:15: error: overriding declaration requires an 'override' keyword
    open func next() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/Iterator.swift:51:15: note: overridden declaration is here
    open func next() -> java_swift.JavaObject! {
              ^
java_util/Sources/PrimitiveIterator.swift:67:15: error: overriding declaration requires an 'override' keyword
    open func hasNext() -> Bool {
              ^
         override 
java_util/Sources/Iterator.swift:64:15: note: overridden declaration is here
    open func hasNext() -> Bool {
              ^
java_util/Sources/AbstractMap.swift:95:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:14:15: note: overridden declaration is here
    open func equals(arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/AbstractMap.swift:103:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/AbstractMap.swift:128:15: error: overriding declaration requires an 'override' keyword
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ZipInputStream.swift:48:14: error: overriding declaration requires an 'override' keyword
    open var inf: Inflater! {
             ^
java_util/Sources/InflaterInputStream.swift:26:14: note: overridden declaration is here
    open var inf: Inflater! {
             ^
java_util/Sources/JarInputStream.swift:140:14: error: overriding declaration requires an 'override' keyword
    open var inf: Inflater! {
             ^
java_util/Sources/ZipInputStream.swift:48:14: note: overridden declaration is here
    open var inf: Inflater! {
             ^
java_util/Sources/ZipInputStream.swift:65:14: error: overriding declaration requires an 'override' keyword
    open var buf: [Int8]! {
             ^
java_util/Sources/InflaterInputStream.swift:43:14: note: overridden declaration is here
    open var buf: [Int8]! {
             ^
java_util/Sources/JarInputStream.swift:157:14: error: overriding declaration requires an 'override' keyword
    open var buf: [Int8]! {
             ^
java_util/Sources/ZipInputStream.swift:65:14: note: overridden declaration is here
    open var buf: [Int8]! {
             ^
java_util/Sources/ZipInputStream.swift:82:14: error: overriding declaration requires an 'override' keyword
    open var len: Int {
             ^
java_util/Sources/InflaterInputStream.swift:60:14: note: overridden declaration is here
    open var len: Int {
             ^
java_util/Sources/JarInputStream.swift:174:14: error: overriding declaration requires an 'override' keyword
    open var len: Int {
             ^
java_util/Sources/ZipInputStream.swift:82:14: note: overridden declaration is here
    open var len: Int {
             ^
java_util/Sources/ZipInputStream.swift:109:14: error: overriding declaration requires an 'override' keyword
    open var _in: /* java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/InflaterInputStream.swift:87:14: note: overridden declaration is here
    open var _in: /* java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/JarInputStream.swift:201:14: error: overriding declaration requires an 'override' keyword
    open var _in: /* java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/ZipInputStream.swift:109:14: note: overridden declaration is here
    open var _in: /* java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/JarInputStream.swift:293:15: error: overriding declaration requires an 'override' keyword
    open func createZipEntry( name: String? ) -> ZipEntry! {
              ^
         override 
java_util/Sources/ZipInputStream.swift:175:15: note: overridden declaration is here
    open func createZipEntry( name: String? ) -> ZipEntry! {
              ^
java_util/Sources/JarInputStream.swift:302:15: error: overriding declaration requires an 'override' keyword
    open func createZipEntry( _ _name: String? ) -> ZipEntry! {
              ^
         override 
java_util/Sources/ZipInputStream.swift:184:15: note: overridden declaration is here
    open func createZipEntry( _ _name: String? ) -> ZipEntry! {
              ^
java_util/Sources/Manifest.swift:91:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/Manifest.swift:101:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentNavigableMap.swift:256:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:70:24: note: overridden declaration is here
    override open func remove( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:265:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:79:15: note: overridden declaration is here
    open func remove( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:448:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:262:24: note: overridden declaration is here
    override open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:457:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:271:24: note: overridden declaration is here
    override open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:273:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:87:24: note: overridden declaration is here
    override open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:283:15: error: overriding declaration requires an 'override' keyword
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:97:15: note: overridden declaration is here
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:291:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:105:24: note: overridden declaration is here
    override open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:301:15: error: overriding declaration requires an 'override' keyword
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:115:24: note: overridden declaration is here
    override open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:309:15: error: overriding declaration requires an 'override' keyword
    open func replaceAll( arg0: BiFunction? ) {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:123:15: note: overridden declaration is here
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:316:15: error: overriding declaration requires an 'override' keyword
    open func replaceAll( _ _arg0: BiFunction? ) {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:130:15: note: overridden declaration is here
    open func replaceAll( _ _arg0: BiFunction? ) {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:324:15: error: overriding declaration requires an 'override' keyword
    open func putIfAbsent( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:138:24: note: overridden declaration is here
    override open func putIfAbsent( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:334:15: error: overriding declaration requires an 'override' keyword
    open func putIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:148:24: note: overridden declaration is here
    override open func putIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:342:15: error: overriding declaration requires an 'override' keyword
    open func getOrDefault( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:156:24: note: overridden declaration is here
    override open func getOrDefault( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:352:15: error: overriding declaration requires an 'override' keyword
    open func getOrDefault( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:166:24: note: overridden declaration is here
    override open func getOrDefault( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:360:15: error: overriding declaration requires an 'override' keyword
    open func forEach( arg0: BiConsumer? ) {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:174:15: note: overridden declaration is here
    open func forEach( arg0: BiConsumer? ) {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:367:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _arg0: BiConsumer? ) {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:181:15: note: overridden declaration is here
    open func forEach( _ _arg0: BiConsumer? ) {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:375:15: error: overriding declaration requires an 'override' keyword
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:189:15: note: overridden declaration is here
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:385:15: error: overriding declaration requires an 'override' keyword
    open func computeIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: Function? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:199:15: note: overridden declaration is here
    open func computeIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:393:15: error: overriding declaration requires an 'override' keyword
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:207:15: note: overridden declaration is here
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:403:15: error: overriding declaration requires an 'override' keyword
    open func computeIfPresent( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:217:15: note: overridden declaration is here
    open func computeIfPresent( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:411:15: error: overriding declaration requires an 'override' keyword
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:225:15: note: overridden declaration is here
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:421:15: error: overriding declaration requires an 'override' keyword
    open func compute( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:235:15: note: overridden declaration is here
    open func compute( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:429:15: error: overriding declaration requires an 'override' keyword
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:243:15: note: overridden declaration is here
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:440:15: error: overriding declaration requires an 'override' keyword
    open func merge( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:254:15: note: overridden declaration is here
    open func merge( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:465:15: error: overriding declaration requires an 'override' keyword
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:279:24: note: overridden declaration is here
    override open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:474:15: error: overriding declaration requires an 'override' keyword
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:288:24: note: overridden declaration is here
    override open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:482:15: error: overriding declaration requires an 'override' keyword
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:296:24: note: overridden declaration is here
    override open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:492:15: error: overriding declaration requires an 'override' keyword
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:306:24: note: overridden declaration is here
    override open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:500:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:314:24: note: overridden declaration is here
    override open func equals( arg0: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:508:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:322:15: note: overridden declaration is here
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:516:15: error: overriding declaration requires an 'override' keyword
    open func values() -> Collection! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:330:15: note: overridden declaration is here
    open func values() -> Collection! {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:529:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:343:24: note: overridden declaration is here
    override open func hashCode() -> Int {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:541:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:355:15: note: overridden declaration is here
    open func clear() {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:552:15: error: overriding declaration requires an 'override' keyword
    open func isEmpty() -> Bool {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:366:24: note: overridden declaration is here
    override open func isEmpty() -> Bool {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:564:15: error: overriding declaration requires an 'override' keyword
    open func size() -> Int {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:378:24: note: overridden declaration is here
    override open func size() -> Int {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:576:15: error: overriding declaration requires an 'override' keyword
    open func entrySet() -> java_swift.JavaSet! {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:390:24: note: overridden declaration is here
    override open func entrySet() -> java_swift.JavaSet! {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:589:15: error: overriding declaration requires an 'override' keyword
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:403:15: note: overridden declaration is here
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:596:15: error: overriding declaration requires an 'override' keyword
    open func putAll( _ _arg0: java_swift.JavaMap? ) {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:410:15: note: overridden declaration is here
    open func putAll( _ _arg0: java_swift.JavaMap? ) {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:604:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:431:24: note: overridden declaration is here
    override open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:612:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:439:15: note: overridden declaration is here
    open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentNavigableMap.swift:620:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:447:24: note: overridden declaration is here
    override open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/ConcurrentNavigableMap.swift:628:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/ConcurrentMap.swift:455:15: note: overridden declaration is here
    open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentLinkedDeque.swift:456:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractCollection.swift:236:15: note: overridden declaration is here
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ConcurrentLinkedDeque.swift:464:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractCollection.swift:244:24: note: overridden declaration is here
    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ZipInputStream.swift:48:14: error: overriding declaration requires an 'override' keyword
    open var inf: Inflater! {
             ^
java_util/Sources/InflaterInputStream.swift:26:14: note: overridden declaration is here
    open var inf: Inflater! {
             ^
java_util/Sources/ZipInputStream.swift:65:14: error: overriding declaration requires an 'override' keyword
    open var buf: [Int8]! {
             ^
java_util/Sources/InflaterInputStream.swift:43:14: note: overridden declaration is here
    open var buf: [Int8]! {
             ^
java_util/Sources/ZipInputStream.swift:82:14: error: overriding declaration requires an 'override' keyword
    open var len: Int {
             ^
java_util/Sources/InflaterInputStream.swift:60:14: note: overridden declaration is here
    open var len: Int {
             ^
java_util/Sources/ZipInputStream.swift:109:14: error: overriding declaration requires an 'override' keyword
    open var _in: /* java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/InflaterInputStream.swift:87:14: note: overridden declaration is here
    open var _in: /* java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/BinaryOperator.swift:70:15: error: overriding declaration requires an 'override' keyword
    open func apply( t: java_swift.JavaObject?, u: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BiFunction.swift:34:15: note: overridden declaration is here
    open func apply( t: java_swift.JavaObject?, u: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/BinaryOperator.swift:80:15: error: overriding declaration requires an 'override' keyword
    open func apply( _ _t: java_swift.JavaObject?, _ _u: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/BiFunction.swift:44:15: note: overridden declaration is here
    open func apply( _ _t: java_swift.JavaObject?, _ _u: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/BinaryOperator.swift:88:15: error: overriding declaration requires an 'override' keyword
    open func andThen( after: Function? ) -> BiFunction! {
              ^
         override 
java_util/Sources/BiFunction.swift:52:15: note: overridden declaration is here
    open func andThen( after: Function? ) -> BiFunction! {
              ^
java_util/Sources/BinaryOperator.swift:97:15: error: overriding declaration requires an 'override' keyword
    open func andThen( _ _after: Function? ) -> BiFunction! {
              ^
         override 
java_util/Sources/BiFunction.swift:61:15: note: overridden declaration is here
    open func andThen( _ _after: Function? ) -> BiFunction! {
              ^
java_util/Sources/RunnableScheduledFuture.swift:41:15: error: overriding declaration requires an 'override' keyword
    open func run() {
              ^
         override 
java_util/Sources/RunnableFuture.swift:29:24: note: overridden declaration is here
    override open func run() {
                       ^
java_util/Sources/RunnableScheduledFuture.swift:52:15: error: overriding declaration requires an 'override' keyword
    open func get( timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/RunnableFuture.swift:40:15: note: overridden declaration is here
    open func get( timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/RunnableScheduledFuture.swift:65:15: error: overriding declaration requires an 'override' keyword
    open func get( _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/RunnableFuture.swift:53:15: note: overridden declaration is here
    open func get( _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/RunnableScheduledFuture.swift:73:15: error: overriding declaration requires an 'override' keyword
    open func get() throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/RunnableFuture.swift:61:15: note: overridden declaration is here
    open func get() throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/RunnableScheduledFuture.swift:89:15: error: overriding declaration requires an 'override' keyword
    open func cancel( mayInterruptIfRunning: Bool ) -> Bool {
              ^
         override 
java_util/Sources/RunnableFuture.swift:77:15: note: overridden declaration is here
    open func cancel( mayInterruptIfRunning: Bool ) -> Bool {
              ^
java_util/Sources/RunnableScheduledFuture.swift:97:15: error: overriding declaration requires an 'override' keyword
    open func cancel( _ _mayInterruptIfRunning: Bool ) -> Bool {
              ^
         override 
java_util/Sources/RunnableFuture.swift:85:15: note: overridden declaration is here
    open func cancel( _ _mayInterruptIfRunning: Bool ) -> Bool {
              ^
java_util/Sources/RunnableScheduledFuture.swift:105:15: error: overriding declaration requires an 'override' keyword
    open func isDone() -> Bool {
              ^
         override 
java_util/Sources/RunnableFuture.swift:93:15: note: overridden declaration is here
    open func isDone() -> Bool {
              ^
java_util/Sources/RunnableScheduledFuture.swift:117:15: error: overriding declaration requires an 'override' keyword
    open func isCancelled() -> Bool {
              ^
         override 
java_util/Sources/RunnableFuture.swift:105:15: note: overridden declaration is here
    open func isCancelled() -> Bool {
              ^
java_util/Sources/LongStream.swift:850:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_util/Sources/BaseStream.swift:83:24: note: overridden declaration is here
    override open func close() {
                       ^
java_util/Sources/LongStream.swift:861:15: error: overriding declaration requires an 'override' keyword
    open func isParallel() -> Bool {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func isParallel() -> Bool {
              ^
java_util/Sources/LongStream.swift:873:15: error: overriding declaration requires an 'override' keyword
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:119:15: note: overridden declaration is here
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:882:15: error: overriding declaration requires an 'override' keyword
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:128:15: note: overridden declaration is here
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:890:15: error: overriding declaration requires an 'override' keyword
    open func unordered() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:149:15: note: overridden declaration is here
    open func unordered() -> BaseStream! {
              ^
java_util/Sources/UUID.swift:66:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/IntStream.swift:867:15: error: overriding declaration requires an 'override' keyword
    open func close() {
              ^
         override 
java_util/Sources/BaseStream.swift:83:24: note: overridden declaration is here
    override open func close() {
                       ^
java_util/Sources/IntStream.swift:878:15: error: overriding declaration requires an 'override' keyword
    open func isParallel() -> Bool {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func isParallel() -> Bool {
              ^
java_util/Sources/IntStream.swift:890:15: error: overriding declaration requires an 'override' keyword
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:119:15: note: overridden declaration is here
    open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:899:15: error: overriding declaration requires an 'override' keyword
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:128:15: note: overridden declaration is here
    open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:907:15: error: overriding declaration requires an 'override' keyword
    open func unordered() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:149:15: note: overridden declaration is here
    open func unordered() -> BaseStream! {
              ^
java_util/Sources/LinkedHashMap.swift:205:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.HashMap:37:24: note: overridden declaration is here
    override open func equals(arg0: java_swift.JavaObject?) -> Bool
                       ^
java_util/Sources/LinkedHashMap.swift:213:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.HashMap:38:24: note: overridden declaration is here
    override open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
                       ^
java_util/Sources/LinkedHashMap.swift:239:15: error: overriding declaration requires an 'override' keyword
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.HashMap:39:15: note: overridden declaration is here
    open func get(arg0: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/LinkedHashMap.swift:248:15: error: overriding declaration requires an 'override' keyword
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.HashMap:40:15: note: overridden declaration is here
    open func get(_ _arg0: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/LinkedHashMap.swift:256:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.HashMap:41:15: note: overridden declaration is here
    open func remove(arg0: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/LinkedHashMap.swift:265:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.HashMap:42:15: note: overridden declaration is here
    open func remove(_ _arg0: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/LinkedHashMap.swift:273:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.HashMap:14:15: note: overridden declaration is here
    open func remove(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/LinkedHashMap.swift:282:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.HashMap:15:15: note: overridden declaration is here
    open func remove(_ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/LinkedHashMap.swift:290:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.HashMap:43:15: note: overridden declaration is here
    open func containsValue(arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/LinkedHashMap.swift:298:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.HashMap:44:15: note: overridden declaration is here
    open func containsValue(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/LinkedHashMap.swift:310:15: error: overriding declaration requires an 'override' keyword
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
         override 
java_swift.HashMap:45:15: note: overridden declaration is here
    open func putAll(arg0: JavaMap?)
              ^
java_util/Sources/LinkedHashMap.swift:317:15: error: overriding declaration requires an 'override' keyword
    open func putAll( _ _arg0: java_swift.JavaMap? ) {
              ^
         override 
java_swift.HashMap:46:15: note: overridden declaration is here
    open func putAll(_ _arg0: JavaMap?)
              ^
java_util/Sources/LinkedHashMap.swift:325:15: error: overriding declaration requires an 'override' keyword
    open func getOrDefault( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.HashMap:25:15: note: overridden declaration is here
    open func getOrDefault(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/LinkedHashMap.swift:335:15: error: overriding declaration requires an 'override' keyword
    open func getOrDefault( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.HashMap:26:15: note: overridden declaration is here
    open func getOrDefault(_ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/LinkedHashMap.swift:345:15: error: overriding declaration requires an 'override' keyword
    open func putIfAbsent( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.HashMap:23:15: note: overridden declaration is here
    open func putIfAbsent(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/LinkedHashMap.swift:355:15: error: overriding declaration requires an 'override' keyword
    open func putIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.HashMap:24:15: note: overridden declaration is here
    open func putIfAbsent(_ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/LinkedHashMap.swift:365:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.HashMap:47:15: note: overridden declaration is here
    open func containsKey(arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/LinkedHashMap.swift:373:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.HashMap:48:15: note: overridden declaration is here
    open func containsKey(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/LinkedHashMap.swift:435:15: error: overriding declaration requires an 'override' keyword
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.HashMap:49:15: note: overridden declaration is here
    open func put(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/LinkedHashMap.swift:445:15: error: overriding declaration requires an 'override' keyword
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.HashMap:50:15: note: overridden declaration is here
    open func put(_ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/LinkedHashMap.swift:453:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.HashMap:19:15: note: overridden declaration is here
    open func replace(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/LinkedHashMap.swift:463:15: error: overriding declaration requires an 'override' keyword
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_swift.HashMap:20:15: note: overridden declaration is here
    open func replace(_ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?) -> java_swift.JavaObject!
              ^
java_util/Sources/LinkedHashMap.swift:471:15: error: overriding declaration requires an 'override' keyword
    open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.HashMap:17:15: note: overridden declaration is here
    open func replace(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/LinkedHashMap.swift:481:15: error: overriding declaration requires an 'override' keyword
    open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.HashMap:18:15: note: overridden declaration is here
    open func replace(_ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/WeakHashMap.swift:130:15: error: overriding declaration requires an 'override' keyword
    open func replaceAll( arg0: BiFunction? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:419:15: note: overridden declaration is here
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/WeakHashMap.swift:137:15: error: overriding declaration requires an 'override' keyword
    open func replaceAll( _ _arg0: BiFunction? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:426:15: note: overridden declaration is here
    open func replaceAll( _ _arg0: BiFunction? ) {
              ^
java_util/Sources/WeakHashMap.swift:157:15: error: overriding declaration requires an 'override' keyword
    open func forEach( arg0: BiConsumer? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:350:15: note: overridden declaration is here
    open func forEach( arg0: BiConsumer? ) {
              ^
java_util/Sources/WeakHashMap.swift:164:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _arg0: BiConsumer? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:357:15: note: overridden declaration is here
    open func forEach( _ _arg0: BiConsumer? ) {
              ^
java_util/Sources/AbstractMap.swift:95:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:14:15: note: overridden declaration is here
    open func equals(arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/AbstractMap.swift:103:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/WeakHashMap.swift:198:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:95:15: note: overridden declaration is here
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/WeakHashMap.swift:206:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:103:15: note: overridden declaration is here
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/WeakHashMap.swift:216:15: error: overriding declaration requires an 'override' keyword
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:60:15: note: overridden declaration is here
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/WeakHashMap.swift:225:15: error: overriding declaration requires an 'override' keyword
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:69:15: note: overridden declaration is here
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/WeakHashMap.swift:233:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:43:15: note: overridden declaration is here
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/WeakHashMap.swift:242:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:52:15: note: overridden declaration is here
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/WeakHashMap.swift:252:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:222:15: note: overridden declaration is here
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/WeakHashMap.swift:260:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:230:15: note: overridden declaration is here
    open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/WeakHashMap.swift:272:15: error: overriding declaration requires an 'override' keyword
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:192:15: note: overridden declaration is here
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
java_util/Sources/WeakHashMap.swift:279:15: error: overriding declaration requires an 'override' keyword
    open func putAll( _ _arg0: java_swift.JavaMap? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:199:15: note: overridden declaration is here
    open func putAll( _ _arg0: java_swift.JavaMap? ) {
              ^
java_util/Sources/WeakHashMap.swift:295:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:238:15: note: overridden declaration is here
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/WeakHashMap.swift:303:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:246:15: note: overridden declaration is here
    open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/WeakHashMap.swift:317:15: error: overriding declaration requires an 'override' keyword
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:77:15: note: overridden declaration is here
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/WeakHashMap.swift:327:15: error: overriding declaration requires an 'override' keyword
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:87:15: note: overridden declaration is here
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/AbstractPreferences.swift:160:15: error: overriding declaration requires an 'override' keyword
    open func node( _ _path: String? ) -> Preferences! {
              ^
         override 
java_util/Sources/Preferences.swift:385:15: note: overridden declaration is here
    open func node( _ _pathName: String? ) -> Preferences! {
              ^
java_util/Sources/AbstractPreferences.swift:229:15: error: overriding declaration requires an 'override' keyword
    open func nodeExists( _ _path: String? ) throws /* java.util.prefs.BackingStoreException */ -> Bool {
              ^
         override 
java_util/Sources/Preferences.swift:487:15: note: overridden declaration is here
    open func nodeExists( _ _pathName: String? ) throws /* java.util.prefs.BackingStoreException */ -> Bool {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:111:15: error: overriding declaration requires an 'override' keyword
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentSkipListSet.swift:127:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> ConcurrentSkipListSet! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/ConcurrentSkipListSet.swift:127:15: error: 'clone()' has already been overridden
    open func clone() -> ConcurrentSkipListSet! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:111:15: note: 'clone()' previously overridden here
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:12:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:12:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractMap.swift:128:15: error: overriding declaration requires an 'override' keyword
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/IdentityHashMap.swift:112:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:128:15: note: overridden declaration is here
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/IdentityHashMap.swift:129:15: error: overriding declaration requires an 'override' keyword
    open func replaceAll( arg0: BiFunction? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:419:15: note: overridden declaration is here
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/IdentityHashMap.swift:136:15: error: overriding declaration requires an 'override' keyword
    open func replaceAll( _ _arg0: BiFunction? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:426:15: note: overridden declaration is here
    open func replaceAll( _ _arg0: BiFunction? ) {
              ^
java_util/Sources/IdentityHashMap.swift:166:15: error: overriding declaration requires an 'override' keyword
    open func forEach( arg0: BiConsumer? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:350:15: note: overridden declaration is here
    open func forEach( arg0: BiConsumer? ) {
              ^
java_util/Sources/IdentityHashMap.swift:173:15: error: overriding declaration requires an 'override' keyword
    open func forEach( _ _arg0: BiConsumer? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:357:15: note: overridden declaration is here
    open func forEach( _ _arg0: BiConsumer? ) {
              ^
java_util/Sources/AbstractMap.swift:95:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:14:15: note: overridden declaration is here
    open func equals(arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/AbstractMap.swift:103:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:15:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/IdentityHashMap.swift:205:15: error: overriding declaration requires an 'override' keyword
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:95:15: note: overridden declaration is here
    open func equals( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/IdentityHashMap.swift:213:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:103:15: note: overridden declaration is here
    open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/IdentityHashMap.swift:223:15: error: overriding declaration requires an 'override' keyword
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:60:15: note: overridden declaration is here
    open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/IdentityHashMap.swift:232:15: error: overriding declaration requires an 'override' keyword
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:69:15: note: overridden declaration is here
    open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/IdentityHashMap.swift:240:15: error: overriding declaration requires an 'override' keyword
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:43:15: note: overridden declaration is here
    open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/IdentityHashMap.swift:249:15: error: overriding declaration requires an 'override' keyword
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:52:15: note: overridden declaration is here
    open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/IdentityHashMap.swift:259:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:222:15: note: overridden declaration is here
    open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/IdentityHashMap.swift:267:15: error: overriding declaration requires an 'override' keyword
    open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:230:15: note: overridden declaration is here
    open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/IdentityHashMap.swift:279:15: error: overriding declaration requires an 'override' keyword
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:192:15: note: overridden declaration is here
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
java_util/Sources/IdentityHashMap.swift:286:15: error: overriding declaration requires an 'override' keyword
    open func putAll( _ _arg0: java_swift.JavaMap? ) {
              ^
         override 
java_util/Sources/AbstractMap.swift:199:15: note: overridden declaration is here
    open func putAll( _ _arg0: java_swift.JavaMap? ) {
              ^
java_util/Sources/IdentityHashMap.swift:302:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:238:15: note: overridden declaration is here
    open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/IdentityHashMap.swift:310:15: error: overriding declaration requires an 'override' keyword
    open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractMap.swift:246:15: note: overridden declaration is here
    open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/IdentityHashMap.swift:324:15: error: overriding declaration requires an 'override' keyword
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:77:15: note: overridden declaration is here
    open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/IdentityHashMap.swift:334:15: error: overriding declaration requires an 'override' keyword
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:87:15: note: overridden declaration is here
    open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ArrayDeque.swift:107:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> ArrayDeque! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/ArrayDeque.swift:120:15: error: overriding declaration requires an 'override' keyword
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/ArrayDeque.swift:120:15: error: 'clone()' has already been overridden
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/ArrayDeque.swift:107:15: note: 'clone()' previously overridden here
    open func clone() -> ArrayDeque! {
              ^
java_util/Sources/ArrayDeque.swift:464:15: error: overriding declaration requires an 'override' keyword
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractCollection.swift:236:15: note: overridden declaration is here
    open func equals( o: java_swift.JavaObject? ) -> Bool {
              ^
java_util/Sources/ArrayDeque.swift:472:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_util/Sources/AbstractCollection.swift:244:24: note: overridden declaration is here
    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:12:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:12:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractMap.swift:128:15: error: overriding declaration requires an 'override' keyword
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
         override 
java_swift.JavaObject:19:15: note: overridden declaration is here
    open func clone() throws -> java_swift.JavaObject!
              ^
java_util/Sources/EnumMap.swift:133:15: error: overriding declaration requires an 'override' keyword
    open func clone() -> EnumMap! {
              ^
         override 
java_util/Sources/AbstractMap.swift:128:15: note: overridden declaration is here
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/EnumMap.swift:146:15: error: overriding declaration requires an 'override' keyword
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
         override 
java_util/Sources/AbstractMap.swift:128:15: note: overridden declaration is here
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/EnumMap.swift:146:15: error: 'clone()' has already been overridden
    open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
              ^
java_util/Sources/EnumMap.swift:133:15: note: 'clone()' previously overridden here
    open func clone() -> EnumMap! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:127:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:111:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:12:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:12:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:120:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:107:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:12:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:12:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:146:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:133:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:127:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:111:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:12:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:12:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:120:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:107:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:12:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:12:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:146:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:133:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:127:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:111:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:12:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:12:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:120:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:107:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:12:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:12:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:146:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:133:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:127:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:111:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:12:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:12:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:120:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:107:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:12:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:12:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:146:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:133:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:127:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:111:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:12:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:12:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:120:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:107:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:12:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:12:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:146:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:133:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:127:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:111:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:12:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:12:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:120:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:107:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:12:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:12:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:146:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:133:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:127:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:111:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:12:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:12:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:120:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:107:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:12:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:12:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:146:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:133:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:127:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:111:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:12:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:12:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:120:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:107:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:12:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:12:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:146:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:133:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:127:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:111:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:12:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:12:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:120:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:107:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:12:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:12:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:146:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:133:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:127:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:111:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:12:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:12:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:120:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:107:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:12:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:12:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:146:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:133:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:127:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:111:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:12:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:12:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:120:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:107:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:12:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:12:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:146:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:133:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:12:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:12:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:12:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:342:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:449:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:415:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:12:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:12:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:11:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:28:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:166:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:184:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:200:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:34:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:216:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:56:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:40:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:12:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:12:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:165:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:152:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:12:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:258:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:365:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:434:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:331:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:12:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:412:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:430:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:448:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:50:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:466:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:127:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:111:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:12:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:12:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:120:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:107:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:12:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:12:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:146:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:133:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
Build settings from command line:
    SYMROOT = /tmp
java_swift/Sources/JNICore.swift:115:17: warning: 'JNI_CreateJavaVM' is deprecated
                JNI_CreateJavaVM( &self.jvm, $0, &vmArgs )
                ^
java_swift/Sources/JNICore.swift:115:17: warning: 'JNI_CreateJavaVM' is deprecated
                JNI_CreateJavaVM( &self.jvm, $0, &vmArgs )
                ^
MergeSwiftModule normal x86_64 /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule
Ditto /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftmodule /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule
    /usr/bin/ditto -rsrc /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftmodule
Ditto /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftdoc /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftdoc
    /usr/bin/ditto -rsrc /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftdoc /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftdoc
Ld /tmp/Debug/java_swift.framework/Versions/A/java_swift normal x86_64
Touch /tmp/Debug/java_swift.framework
    /usr/bin/touch -c /tmp/Debug/java_swift.framework
Build settings from command line:
    SYMROOT = /tmp
MergeSwiftModule normal x86_64 /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule
MergeSwiftModule normal x86_64 /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.swiftmodule
Ditto /tmp/Debug/java_lang.framework/Versions/A/Modules/java_lang.swiftmodule/x86_64.swiftmodule /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.swiftmodule
    /usr/bin/ditto -rsrc /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.swiftmodule /tmp/Debug/java_lang.framework/Versions/A/Modules/java_lang.swiftmodule/x86_64.swiftmodule
Ditto /tmp/Debug/java_lang.framework/Versions/A/Modules/java_lang.swiftmodule/x86_64.swiftdoc /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.swiftdoc
    /usr/bin/ditto -rsrc /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.swiftdoc /tmp/Debug/java_lang.framework/Versions/A/Modules/java_lang.swiftmodule/x86_64.swiftdoc
Ld /tmp/Debug/java_lang.framework/Versions/A/java_lang normal x86_64
Touch /tmp/Debug/java_lang.framework
    /usr/bin/touch -c /tmp/Debug/java_lang.framework
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/DoubleStream.swift:483:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:91:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/DoubleStream.swift:703:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/DoubleStream.swift:483:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:91:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/DoubleStream.swift:703:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/DoubleStream.swift:483:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:91:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/DoubleStream.swift:703:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/DoubleStream.swift:483:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:91:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/DoubleStream.swift:703:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
Build settings from command line:
    SYMROOT = /tmp
MergeSwiftModule normal x86_64 /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/IntStream.swift:732:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:728:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/LongStream.swift:728:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:732:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:728:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:732:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/IntStream.swift:732:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:728:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:732:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:728:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:732:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/LongStream.swift:728:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:732:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/LongStream.swift:728:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:732:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:732:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:728:15: error: overriding declaration requires an 'override' keyword
    open func sequential() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:133:15: note: overridden declaration is here
    open func sequential() -> BaseStream! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:124:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:108:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:117:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:104:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:143:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:130:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:124:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:108:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:117:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:104:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:143:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:130:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:124:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:108:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:117:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:104:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:143:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:130:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:124:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:108:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:117:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:104:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:143:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:130:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:124:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:108:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:117:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:104:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:143:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:130:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:124:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:108:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:117:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:104:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:143:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:130:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:124:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:108:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:117:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:104:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:143:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:130:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:124:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:108:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:117:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:104:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:143:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:130:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:124:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:108:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:117:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:104:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:143:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:130:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:124:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:108:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:117:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:104:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:143:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:130:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:124:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:108:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:117:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:104:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:143:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:130:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:124:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:108:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:117:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:104:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:143:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:130:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:82: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:339:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:446:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:515:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:412:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/HashSet.swift:9:82: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:26:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:163:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:28:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:181:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:30:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:197:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:32:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:213:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:53:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:37:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:82: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                 ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:162:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:149:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:255:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:362:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:431:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:328:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:42:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:409:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:44:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:427:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:46:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:445:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:48:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:463:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:124:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:108:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:96: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
                                                                                               ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:117:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:104:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:73: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
                                                                        ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:143:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:130:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
Build settings from command line:
    SYMROOT = /tmp
java_swift/Sources/JNICore.swift:115:17: warning: 'JNI_CreateJavaVM' is deprecated
                JNI_CreateJavaVM( &self.jvm, $0, &vmArgs )
                ^
java_swift/Sources/JNICore.swift:115:17: warning: 'JNI_CreateJavaVM' is deprecated
                JNI_CreateJavaVM( &self.jvm, $0, &vmArgs )
                ^
Build settings from command line:
    SYMROOT = /tmp
ProcessInfoPlistFile /tmp/Debug/java_swift.framework/Versions/A/Resources/Info.plist Info.plist
    builtin-infoPlistUtility java_swift/Info.plist -expandbuildsettings -platform macosx -o /tmp/Debug/java_swift.framework/Versions/A/Resources/Info.plist
java_swift/Sources/JNIProxy.swift:82:90: error: extra argument in call
                                              object: javaObject, locals: &locals, file, line )
                                                                                         ^~~~
java_swift/Sources/JNICore.swift:118:17: warning: 'JNI_CreateJavaVM' is deprecated
                JNI_CreateJavaVM( &self.jvm, $0, &vmArgs )
                ^
java_swift/Sources/JNICore.swift:118:17: warning: 'JNI_CreateJavaVM' is deprecated
                JNI_CreateJavaVM( &self.jvm, $0, &vmArgs )
                ^
java_swift/Sources/HashMap.swift:557:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_swift/Sources/JavaObject.swift:94:15: note: overridden declaration is here
    open func hashCode() -> Int {
              ^
java_swift/Sources/HashMap.swift:557:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_swift/Sources/JavaObject.swift:94:15: note: overridden declaration is here
    open func hashCode() -> Int {
              ^
Build settings from command line:
    SYMROOT = /tmp
Build settings from command line:
    SYMROOT = /tmp
Build settings from command line:
    SYMROOT = /tmp
java_swift/Sources/JNICore.swift:118:17: warning: 'JNI_CreateJavaVM' is deprecated
                JNI_CreateJavaVM( &self.jvm, $0, &vmArgs )
                ^
java_swift/Sources/JNICore.swift:118:17: warning: 'JNI_CreateJavaVM' is deprecated
                JNI_CreateJavaVM( &self.jvm, $0, &vmArgs )
                ^
MergeSwiftModule normal x86_64 /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule
Ditto /tmp/Debug/java_swift.framework/Versions/A/Headers/java_swift-Swift.h /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift-Swift.h
    /usr/bin/ditto -rsrc /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift-Swift.h /tmp/Debug/java_swift.framework/Versions/A/Headers/java_swift-Swift.h
Ditto /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftmodule /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule
    /usr/bin/ditto -rsrc /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftmodule
CompileC /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift_vers.o /tmp/java_swift.build/Debug/java_swift.build/DerivedSources/java_swift_vers.c normal x86_64 c com.apple.compilers.llvm.clang.1_0.compiler
Ditto /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftdoc /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftdoc
    /usr/bin/ditto -rsrc /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftdoc /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftdoc
Ld /tmp/Debug/java_swift.framework/Versions/A/java_swift normal x86_64
CpHeader java_swift.h /tmp/Debug/java_swift.framework/Versions/A/Headers/java_swift.h
    builtin-copy -exclude .DS_Store -exclude CVS -exclude .svn -exclude .git -exclude .hg -resolve-src-symlinks java_swift/java_swift.h /tmp/Debug/java_swift.framework/Versions/A/Headers
CpResource LICENSE /tmp/Debug/java_swift.framework/Versions/A/Resources/LICENSE
    builtin-copy -exclude .DS_Store -exclude CVS -exclude .svn -exclude .git -exclude .hg -resolve-src-symlinks java_swift/LICENSE /tmp/Debug/java_swift.framework/Versions/A/Resources
Ditto /tmp/java_swift.build/Debug/java_swift.build/module.modulemap /tmp/Debug/java_swift.framework/Versions/A/Modules/module.modulemap
    builtin-copy -exclude .DS_Store -exclude CVS -exclude .svn -exclude .git -exclude .hg -resolve-src-symlinks /tmp/java_swift.build/Debug/java_swift.build/module.modulemap /tmp/Debug/java_swift.framework/Versions/A/Modules
Touch /tmp/Debug/java_swift.framework
    /usr/bin/touch -c /tmp/Debug/java_swift.framework
Write auxiliary files
write-file /tmp/java_lang.build/Debug/java_lang.build/swift-overrides.hmap
write-file /tmp/java_lang.build/Debug/java_lang.build/module.modulemap
/bin/mkdir -p /tmp/java_lang.build/Debug/java_lang.build/DerivedSources
write-file /tmp/java_lang.build/Debug/java_lang.build/DerivedSources/java_lang_vers.c
write-file /tmp/java_lang.build/Debug/java_lang.build/java_lang.hmap
write-file /tmp/java_lang.build/Debug/java_lang.build/java_lang-own-target-headers.hmap
/bin/mkdir -p /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64
write-file /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang-OutputFileMap.json
write-file /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.LinkFileList
write-file /tmp/java_lang.build/Debug/java_lang.build/java_lang-project-headers.hmap
write-file /tmp/java_lang.build/Debug/java_lang.build/java_lang-all-non-framework-target-headers.hmap
write-file /tmp/java_lang.build/Debug/java_lang.build/unextended-module.modulemap
write-file /tmp/java_lang.build/Debug/java_lang.build/java_lang-all-target-headers.hmap
write-file /tmp/java_lang.build/Debug/java_lang.build/java_lang-generated-files.hmap
write-file /tmp/java_lang.build/Debug/java_lang.build/unextended-module-overlay.yaml
write-file /tmp/java_lang.build/all-product-headers.yaml
Create product structure
/bin/mkdir -p /tmp/Debug/java_lang.framework/Versions/A/Modules
/bin/ln -sfh Versions/Current/Modules /tmp/Debug/java_lang.framework/Modules
/bin/mkdir -p /tmp/Debug/java_lang.framework/Versions/A/Headers
/bin/mkdir -p /tmp/Debug/java_lang.framework/Versions/A/Resources
/bin/ln -sfh A /tmp/Debug/java_lang.framework/Versions/Current
/bin/ln -sfh Versions/Current/Resources /tmp/Debug/java_lang.framework/Resources
/bin/ln -sfh Versions/Current/Headers /tmp/Debug/java_lang.framework/Headers
/bin/ln -sfh Versions/Current/java_lang /tmp/Debug/java_lang.framework/java_lang
ProcessInfoPlistFile /tmp/Debug/java_lang.framework/Versions/A/Resources/Info.plist Info.plist
    builtin-infoPlistUtility java_lang/Info.plist -expandbuildsettings -platform macosx -o /tmp/Debug/java_lang.framework/Versions/A/Resources/Info.plist
MergeSwiftModule normal x86_64 /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.swiftmodule
Ditto /tmp/Debug/java_lang.framework/Versions/A/Headers/java_lang-Swift.h /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang-Swift.h
    /usr/bin/ditto -rsrc /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang-Swift.h /tmp/Debug/java_lang.framework/Versions/A/Headers/java_lang-Swift.h
CompileC /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang_vers.o /tmp/java_lang.build/Debug/java_lang.build/DerivedSources/java_lang_vers.c normal x86_64 c com.apple.compilers.llvm.clang.1_0.compiler
Ditto /tmp/Debug/java_lang.framework/Versions/A/Modules/java_lang.swiftmodule/x86_64.swiftmodule /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.swiftmodule
    /usr/bin/ditto -rsrc /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.swiftmodule /tmp/Debug/java_lang.framework/Versions/A/Modules/java_lang.swiftmodule/x86_64.swiftmodule
Ditto /tmp/Debug/java_lang.framework/Versions/A/Modules/java_lang.swiftmodule/x86_64.swiftdoc /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.swiftdoc
    /usr/bin/ditto -rsrc /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.swiftdoc /tmp/Debug/java_lang.framework/Versions/A/Modules/java_lang.swiftmodule/x86_64.swiftdoc
Ld /tmp/Debug/java_lang.framework/Versions/A/java_lang normal x86_64
CpHeader java_lang.h /tmp/Debug/java_lang.framework/Versions/A/Headers/java_lang.h
    builtin-copy -exclude .DS_Store -exclude CVS -exclude .svn -exclude .git -exclude .hg -resolve-src-symlinks java_lang/java_lang.h /tmp/Debug/java_lang.framework/Versions/A/Headers
Ditto /tmp/java_lang.build/Debug/java_lang.build/module.modulemap /tmp/Debug/java_lang.framework/Versions/A/Modules/module.modulemap
    builtin-copy -exclude .DS_Store -exclude CVS -exclude .svn -exclude .git -exclude .hg -resolve-src-symlinks /tmp/java_lang.build/Debug/java_lang.build/module.modulemap /tmp/Debug/java_lang.framework/Versions/A/Modules
Touch /tmp/Debug/java_lang.framework
    /usr/bin/touch -c /tmp/Debug/java_lang.framework
Write auxiliary files
write-file /tmp/java_util.build/all-product-headers.yaml
write-file /tmp/java_util.build/Debug/java_util.build/java_util-generated-files.hmap
write-file /tmp/java_util.build/Debug/java_util.build/swift-overrides.hmap
write-file /tmp/java_util.build/Debug/java_util.build/unextended-module-overlay.yaml
/bin/mkdir -p /tmp/java_util.build/Debug/java_util.build/DerivedSources
write-file /tmp/java_util.build/Debug/java_util.build/DerivedSources/java_util_vers.c
write-file /tmp/java_util.build/Debug/java_util.build/unextended-module.modulemap
/bin/mkdir -p /tmp/java_util.build/Debug/java_util.build/Objects-normal/x86_64
write-file /tmp/java_util.build/Debug/java_util.build/Objects-normal/x86_64/java_util-OutputFileMap.json
write-file /tmp/java_util.build/Debug/java_util.build/java_util-own-target-headers.hmap
write-file /tmp/java_util.build/Debug/java_util.build/java_util-all-non-framework-target-headers.hmap
write-file /tmp/java_util.build/Debug/java_util.build/java_util-project-headers.hmap
write-file /tmp/java_util.build/Debug/java_util.build/module.modulemap
write-file /tmp/java_util.build/Debug/java_util.build/Objects-normal/x86_64/java_util.LinkFileList
write-file /tmp/java_util.build/Debug/java_util.build/java_util-all-target-headers.hmap
write-file /tmp/java_util.build/Debug/java_util.build/java_util.hmap
Create product structure
/bin/mkdir -p /tmp/Debug/java_util.framework/Versions/A/Modules
/bin/ln -sfh Versions/Current/Modules /tmp/Debug/java_util.framework/Modules
/bin/mkdir -p /tmp/Debug/java_util.framework/Versions/A/Headers
/bin/mkdir -p /tmp/Debug/java_util.framework/Versions/A/Resources
/bin/ln -sfh A /tmp/Debug/java_util.framework/Versions/Current
/bin/ln -sfh Versions/Current/Resources /tmp/Debug/java_util.framework/Resources
/bin/ln -sfh Versions/Current/Headers /tmp/Debug/java_util.framework/Headers
/bin/ln -sfh Versions/Current/java_util /tmp/Debug/java_util.framework/java_util
ProcessInfoPlistFile /tmp/Debug/java_util.framework/Versions/A/Resources/Info.plist Info.plist
    builtin-infoPlistUtility java_util/Info.plist -expandbuildsettings -platform macosx -o /tmp/Debug/java_util.framework/Versions/A/Resources/Info.plist
java_util/Sources/PropertyPermission.swift:75:15: error: overriding declaration requires an 'override' keyword
    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
              ^
         override 
java_swift.JavaObject:8:15: note: overridden declaration is here
    open func equals(_ _arg0: java_swift.JavaObject?) -> Bool
              ^
java_util/Sources/PropertyPermission.swift:101:15: error: overriding declaration requires an 'override' keyword
    open func hashCode() -> Int {
              ^
         override 
java_swift.JavaObject:11:15: note: overridden declaration is here
    open func hashCode() -> Int
              ^
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentMap.swift:67:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_swift.JavaMapForward:2:15: note: overridden declaration is here
    open func clear()
              ^
java_util/Sources/ConcurrentMap.swift:317:15: error: overriding declaration requires an 'override' keyword
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
         override 
java_swift.JavaMapForward:25:15: note: overridden declaration is here
    open func putAll(arg0: JavaMap?)
              ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/ZipOutputStream.swift:108:14: error: overriding declaration requires an 'override' keyword
    open var out: /* class java.io.OutputStream */ UnavailableObject! {
             ^
java_util/Sources/DeflaterOutputStream.swift:62:14: note: overridden declaration is here
    open var out: /* class java.io.OutputStream */ UnavailableObject! {
             ^
java_util/Sources/JarOutputStream.swift:174:14: error: overriding declaration requires an 'override' keyword
    open var out: /* class java.io.OutputStream */ UnavailableObject! {
             ^
java_util/Sources/ZipOutputStream.swift:108:14: note: overridden declaration is here
    open var out: /* class java.io.OutputStream */ UnavailableObject! {
             ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/GZIPOutputStream.swift:83:14: error: overriding declaration requires an 'override' keyword
    open var out: /* class java.io.OutputStream */ UnavailableObject! {
             ^
java_util/Sources/DeflaterOutputStream.swift:62:14: note: overridden declaration is here
    open var out: /* class java.io.OutputStream */ UnavailableObject! {
             ^
java_util/Sources/GZIPOutputStream.swift:195:15: error: overriding declaration requires an 'override' keyword
    open func write( _ _buf: [Int8]?, _ _off: Int, _ _len: Int ) throws /* java.io.IOException */ {
              ^
         override 
java_util/Sources/DeflaterOutputStream.swift:263:15: note: overridden declaration is here
    open func write( _ _b: [Int8]?, _ _off: Int, _ _len: Int ) throws /* java.io.IOException */ {
              ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/SortedSet.swift:81:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_swift.JavaSetForward:4:15: note: overridden declaration is here
    open func clear()
              ^
java_util/Sources/LongAdder.swift:177:15: error: overriding declaration requires an 'override' keyword
    open func toString() -> String! {
              ^
         override 
java_swift.JavaObject:14:15: note: overridden declaration is here
    open func toString() -> String!
              ^
java_util/Sources/SortedSet.swift:81:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_swift.JavaSetForward:4:15: note: overridden declaration is here
    open func clear()
              ^
java_util/Sources/SortedMap.swift:57:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_swift.JavaMapForward:2:15: note: overridden declaration is here
    open func clear()
              ^
java_util/Sources/SortedMap.swift:363:15: error: overriding declaration requires an 'override' keyword
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
         override 
java_swift.JavaMapForward:25:15: note: overridden declaration is here
    open func putAll(arg0: JavaMap?)
              ^
java_util/Sources/JarFile.swift:316:15: error: overriding declaration requires an 'override' keyword
    open func getInputStream( _ _ze: ZipEntry? ) throws /* java.io.IOException */ -> /* class java.io.InputStream */ UnavailableObject! {
              ^
         override 
java_util/Sources/ZipFile.swift:349:15: note: overridden declaration is here
    open func getInputStream( _ _entry: ZipEntry? ) throws /* java.io.IOException */ -> /* class java.io.InputStream */ UnavailableObject! {
              ^
java_util/Sources/SortedSet.swift:81:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_swift.JavaSetForward:4:15: note: overridden declaration is here
    open func clear()
              ^
java_util/Sources/SortedMap.swift:57:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_swift.JavaMapForward:2:15: note: overridden declaration is here
    open func clear()
              ^
java_util/Sources/SortedMap.swift:363:15: error: overriding declaration requires an 'override' keyword
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
         override 
java_swift.JavaMapForward:25:15: note: overridden declaration is here
    open func putAll(arg0: JavaMap?)
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/DoubleAdder.swift:155:15: error: overriding declaration requires an 'override' keyword
    open func toString() -> String! {
              ^
         override 
java_swift.JavaObject:14:15: note: overridden declaration is here
    open func toString() -> String!
              ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/GZIPInputStream.swift:140:14: error: overriding declaration requires an 'override' keyword
    open var _in: /* class java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/InflaterInputStream.swift:82:14: note: overridden declaration is here
    open var _in: /* class java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/GZIPInputStream.swift:216:15: error: overriding declaration requires an 'override' keyword
    open func read( _ _buf: [Int8]?, _ _off: Int, _ _len: Int ) throws /* java.io.IOException */ -> Int {
              ^
         override 
java_util/Sources/InflaterInputStream.swift:260:15: note: overridden declaration is here
    open func read( _ _b: [Int8]?, _ _off: Int, _ _len: Int ) throws /* java.io.IOException */ -> Int {
              ^
java_util/Sources/ZipOutputStream.swift:108:14: error: overriding declaration requires an 'override' keyword
    open var out: /* class java.io.OutputStream */ UnavailableObject! {
             ^
java_util/Sources/DeflaterOutputStream.swift:62:14: note: overridden declaration is here
    open var out: /* class java.io.OutputStream */ UnavailableObject! {
             ^
java_util/Sources/TimeUnit.swift:41:16: error: call can throw but is not marked with 'try'
        return underlier().sleep( timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:52:16: error: call can throw but is not marked with 'try'
        return underlier().timedJoin( thread: thread, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:63:16: error: call can throw but is not marked with 'try'
        return underlier().timedWait( obj: obj, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/ZipInputStream.swift:104:14: error: overriding declaration requires an 'override' keyword
    open var _in: /* class java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/InflaterInputStream.swift:82:14: note: overridden declaration is here
    open var _in: /* class java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/JarInputStream.swift:196:14: error: overriding declaration requires an 'override' keyword
    open var _in: /* class java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/ZipInputStream.swift:104:14: note: overridden declaration is here
    open var _in: /* class java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/ConcurrentMap.swift:67:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_swift.JavaMapForward:2:15: note: overridden declaration is here
    open func clear()
              ^
java_util/Sources/ConcurrentMap.swift:317:15: error: overriding declaration requires an 'override' keyword
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
         override 
java_swift.JavaMapForward:25:15: note: overridden declaration is here
    open func putAll(arg0: JavaMap?)
              ^
java_util/Sources/SortedMap.swift:57:15: error: overriding declaration requires an 'override' keyword
    open func clear() {
              ^
         override 
java_swift.JavaMapForward:2:15: note: overridden declaration is here
    open func clear()
              ^
java_util/Sources/SortedMap.swift:363:15: error: overriding declaration requires an 'override' keyword
    open func putAll( arg0: java_swift.JavaMap? ) {
              ^
         override 
java_swift.JavaMapForward:25:15: note: overridden declaration is here
    open func putAll(arg0: JavaMap?)
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:155:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:173:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:191:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:274:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:332:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:456:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/ZipInputStream.swift:104:14: error: overriding declaration requires an 'override' keyword
    open var _in: /* class java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/InflaterInputStream.swift:82:14: note: overridden declaration is here
    open var _in: /* class java.io.InputStream */ UnavailableObject! {
             ^
java_util/Sources/LongAccumulator.swift:169:15: error: overriding declaration requires an 'override' keyword
    open func toString() -> String! {
              ^
         override 
java_swift.JavaObject:14:15: note: overridden declaration is here
    open func toString() -> String!
              ^
java_util/Sources/ConcurrentSkipListSet.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:123:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:106: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                                         ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:127:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:83: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                  ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:131:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:118:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
java_util/Sources/DoubleAccumulator.swift:169:15: error: overriding declaration requires an 'override' keyword
    open func toString() -> String! {
              ^
         override 
java_swift.JavaObject:14:15: note: overridden declaration is here
    open func toString() -> String!
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/TimeUnit.swift:41:16: error: call can throw but is not marked with 'try'
        return underlier().sleep( timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:52:16: error: call can throw but is not marked with 'try'
        return underlier().timedJoin( thread: thread, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:63:16: error: call can throw but is not marked with 'try'
        return underlier().timedWait( obj: obj, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/TimeUnit.swift:41:16: error: call can throw but is not marked with 'try'
        return underlier().sleep( timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:52:16: error: call can throw but is not marked with 'try'
        return underlier().timedJoin( thread: thread, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:63:16: error: call can throw but is not marked with 'try'
        return underlier().timedWait( obj: obj, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:155:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:173:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:191:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:274:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:332:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:456:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:123:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:106: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                                         ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:127:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:83: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                  ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:131:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:118:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/TimeUnit.swift:41:16: error: call can throw but is not marked with 'try'
        return underlier().sleep( timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:52:16: error: call can throw but is not marked with 'try'
        return underlier().timedJoin( thread: thread, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:63:16: error: call can throw but is not marked with 'try'
        return underlier().timedWait( obj: obj, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/TimeUnit.swift:41:16: error: call can throw but is not marked with 'try'
        return underlier().sleep( timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:52:16: error: call can throw but is not marked with 'try'
        return underlier().timedJoin( thread: thread, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:63:16: error: call can throw but is not marked with 'try'
        return underlier().timedWait( obj: obj, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:155:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:173:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:191:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:274:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:332:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:456:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:123:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:106: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                                         ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:127:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:83: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                  ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:131:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:118:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/TimeUnit.swift:41:16: error: call can throw but is not marked with 'try'
        return underlier().sleep( timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:52:16: error: call can throw but is not marked with 'try'
        return underlier().timedJoin( thread: thread, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:63:16: error: call can throw but is not marked with 'try'
        return underlier().timedWait( obj: obj, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/TimeUnit.swift:41:16: error: call can throw but is not marked with 'try'
        return underlier().sleep( timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:52:16: error: call can throw but is not marked with 'try'
        return underlier().timedJoin( thread: thread, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:63:16: error: call can throw but is not marked with 'try'
        return underlier().timedWait( obj: obj, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:155:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:173:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:191:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:274:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:332:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:456:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:123:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:106: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                                         ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:127:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:83: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                  ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:131:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:118:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/TimeUnit.swift:41:16: error: call can throw but is not marked with 'try'
        return underlier().sleep( timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:52:16: error: call can throw but is not marked with 'try'
        return underlier().timedJoin( thread: thread, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:63:16: error: call can throw but is not marked with 'try'
        return underlier().timedWait( obj: obj, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/TimeUnit.swift:41:16: error: call can throw but is not marked with 'try'
        return underlier().sleep( timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:52:16: error: call can throw but is not marked with 'try'
        return underlier().timedJoin( thread: thread, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:63:16: error: call can throw but is not marked with 'try'
        return underlier().timedWait( obj: obj, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:155:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:173:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:191:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:274:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:332:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:456:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:123:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:106: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                                         ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:127:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:83: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                  ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:131:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:118:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/TimeUnit.swift:41:16: error: call can throw but is not marked with 'try'
        return underlier().sleep( timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:52:16: error: call can throw but is not marked with 'try'
        return underlier().timedJoin( thread: thread, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:63:16: error: call can throw but is not marked with 'try'
        return underlier().timedWait( obj: obj, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/TimeUnit.swift:41:16: error: call can throw but is not marked with 'try'
        return underlier().sleep( timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:52:16: error: call can throw but is not marked with 'try'
        return underlier().timedJoin( thread: thread, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/TimeUnit.swift:63:16: error: call can throw but is not marked with 'try'
        return underlier().timedWait( obj: obj, timeout: timeout )
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:155:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:173:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:191:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:274:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:332:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:456:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:123:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:106: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                                         ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:127:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:83: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                  ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:131:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:118:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
Build settings from command line:
    SYMROOT = /tmp
MergeSwiftModule normal x86_64 /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/LongStream.swift:688:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:705:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/LongStream.swift:688:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:705:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/LongStream.swift:688:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:705:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:705:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:688:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:705:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:155:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:173:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:191:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:274:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:332:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:456:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/LongStream.swift:688:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:705:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/IntStream.swift:705:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/LongStream.swift:688:15: error: overriding declaration requires an 'override' keyword
    open func parallel() -> BaseStream! {
              ^
         override 
java_util/Sources/BaseStream.swift:107:15: note: overridden declaration is here
    open func parallel() -> BaseStream! {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:123:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:106: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                                         ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:127:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:83: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                  ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:131:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:118:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:155:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:173:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:191:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:274:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:332:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:456:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:123:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:106: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                                         ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:127:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:83: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                  ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:131:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:118:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:155:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:173:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:191:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:274:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:332:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:456:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:155:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:173:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:191:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:274:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:332:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:456:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:123:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:106: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                                         ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:127:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:83: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                  ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:131:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:118:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:155:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:173:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:191:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:274:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:332:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:456:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:155:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:173:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:191:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:274:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:332:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:456:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/ConcurrentSkipListSet.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() -> ConcurrentSkipListSet! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:123:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListSet.swift:9:106: error: redundant conformance of 'ConcurrentSkipListSet' to protocol 'UnavailableProtocol'
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                                         ^
java_util/Sources/ConcurrentSkipListSet.swift:9:12: note: 'ConcurrentSkipListSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ArrayDeque.swift:140:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ArrayDeque.swift:127:24: note: 'clone()' previously overridden here
    override open func clone() -> ArrayDeque! {
                       ^
java_util/Sources/CopyOnWriteArraySet.swift:9:83: error: redundant conformance of 'CopyOnWriteArraySet' to protocol 'UnavailableProtocol'
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                  ^
java_util/Sources/CopyOnWriteArraySet.swift:9:12: note: 'CopyOnWriteArraySet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class CopyOnWriteArraySet: AbstractSet, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/EnumMap.swift:131:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumMap.swift:118:24: note: 'clone()' previously overridden here
    override open func clone() -> EnumMap! {
                       ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
java_util/Sources/EnumSet.swift:77:24: error: 'clone()' has already been overridden
    override open func clone() -> EnumSet! {
                       ^
java_util/Sources/EnumSet.swift:60:24: note: 'clone()' previously overridden here
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/EnumSet.swift:9:92: error: redundant conformance of 'EnumSet' to protocol 'UnavailableProtocol'
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/EnumSet.swift:9:12: note: 'EnumSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class EnumSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/ConcurrentSkipListMap.swift:179:24: error: 'clone()' has already been overridden
    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
                       ^
java_util/Sources/ConcurrentSkipListMap.swift:166:24: note: 'clone()' previously overridden here
    override open func clone() -> ConcurrentSkipListMap! {
                       ^
java_util/Sources/AbstractMap.swift:9:12: error: type 'AbstractMap' does not conform to protocol 'JavaMap'
open class AbstractMap: java_swift.JavaObject, java_swift.JavaMap {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:256:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:274:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:292:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:310:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/AbstractMap.swift:345:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/AbstractMap.swift:435:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/Hashtable.swift:9:12: error: type 'Hashtable' does not conform to protocol 'JavaMap'
open class Hashtable: Dictionary, java_swift.JavaMap, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:155:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:173:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:191:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:274:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Hashtable.swift:332:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Hashtable.swift:456:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
Build settings from command line:
    SYMROOT = /tmp
java_util/Sources/TreeSet.swift:9:92: error: redundant conformance of 'TreeSet' to protocol 'UnavailableProtocol'
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/TreeSet.swift:9:12: note: 'TreeSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class TreeSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/Attributes.swift:9:12: error: type 'Attributes' does not conform to protocol 'JavaMap'
open class Attributes: java_swift.JavaObject, java_swift.JavaMap, java_lang.Cloneable {
           ^
java_swift.JavaMap:7:17: note: protocol requires function 'compute(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func compute(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:337:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:9:17: note: protocol requires function 'computeIfAbsent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfAbsent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:355:15: note: candidate has non-matching type '(JavaObject?, Function?) -> JavaObject!'
    open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:11:17: note: protocol requires function 'computeIfPresent(arg0:arg1:)' with type '(JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func computeIfPresent(arg0: java_swift.JavaObject?, arg1: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:373:15: note: candidate has non-matching type '(JavaObject?, BiFunction?) -> JavaObject!'
    open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:21:17: note: protocol requires function 'forEach(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func forEach(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:393:15: note: candidate has non-matching type '(BiConsumer?) -> ()'
    open func forEach( arg0: BiConsumer? ) {
              ^
java_swift.JavaMap:33:17: note: protocol requires function 'merge(arg0:arg1:arg2:)' with type '(JavaObject?, JavaObject?, UnavailableProtocol?) -> JavaObject!'; do you want to add a stub?
    public func merge(arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: UnavailableProtocol?) -> java_swift.JavaObject!
                ^
java_util/Sources/Attributes.swift:428:15: note: candidate has non-matching type '(JavaObject?, JavaObject?, BiFunction?) -> JavaObject!'
    open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
              ^
java_swift.JavaMap:49:17: note: protocol requires function 'replaceAll(arg0:)' with type '(UnavailableProtocol?) -> ()'; do you want to add a stub?
    public func replaceAll(arg0: UnavailableProtocol?)
                ^
java_util/Sources/Attributes.swift:518:15: note: candidate has non-matching type '(BiFunction?) -> ()'
    open func replaceAll( arg0: BiFunction? ) {
              ^
java_util/Sources/HashSet.swift:9:92: error: redundant conformance of 'HashSet' to protocol 'UnavailableProtocol'
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
                                                                                           ^
java_util/Sources/HashSet.swift:9:12: note: 'HashSet' inherits conformance to protocol 'UnavailableProtocol' from superclass here
open class HashSet: AbstractSet, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {
           ^
java_util/Sources/AbstractSet.swift:8:12: error: type 'AbstractSet' does not conform to protocol 'JavaSet'
open class AbstractSet: AbstractCollection, java_swift.JavaSet {
           ^
java_swift.JavaSet:7:17: note: protocol requires function 'addAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func addAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:53:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func addAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:13:17: note: protocol requires function 'containsAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func containsAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:96:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func containsAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:24:17: note: protocol requires function 'removeAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func removeAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:157:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func removeAll( c: Collection? ) -> Bool {
              ^
java_swift.JavaSet:26:17: note: protocol requires function 'retainAll(c:)' with type '(UnavailableProtocol?) -> Bool'; do you want to add a stub?
    public func retainAll(c: UnavailableProtocol?) -> Bool
                ^
java_util/Sources/AbstractCollection.swift:173:15: note: candidate has non-matching type '(Collection?) -> Bool'
    open func retainAll( c: Collection? ) -> Bool {
              ^
Build settings from command line:
    SYMROOT = /tmp
Build settings from command line:
    SYMROOT = /tmp
ProcessInfoPlistFile /tmp/Debug/java_swift.framework/Versions/A/Resources/Info.plist Info.plist
    builtin-infoPlistUtility java_swift/Info.plist -expandbuildsettings -platform macosx -o /tmp/Debug/java_swift.framework/Versions/A/Resources/Info.plist
java_swift/Sources/JNICore.swift:118:17: warning: 'JNI_CreateJavaVM' is deprecated
                JNI_CreateJavaVM( &self.jvm, $0, &vmArgs )
                ^
java_swift/Sources/JNICore.swift:118:17: warning: 'JNI_CreateJavaVM' is deprecated
                JNI_CreateJavaVM( &self.jvm, $0, &vmArgs )
                ^
MergeSwiftModule normal x86_64 /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule
Ditto /tmp/Debug/java_swift.framework/Versions/A/Headers/java_swift-Swift.h /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift-Swift.h
    /usr/bin/ditto -rsrc /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift-Swift.h /tmp/Debug/java_swift.framework/Versions/A/Headers/java_swift-Swift.h
Ditto /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftmodule /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule
    /usr/bin/ditto -rsrc /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftmodule
Ditto /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftdoc /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftdoc
    /usr/bin/ditto -rsrc /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftdoc /tmp/Debug/java_swift.framework/Versions/A/Modules/java_swift.swiftmodule/x86_64.swiftdoc
CompileC /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift_vers.o /tmp/java_swift.build/Debug/java_swift.build/DerivedSources/java_swift_vers.c normal x86_64 c com.apple.compilers.llvm.clang.1_0.compiler
Ld /tmp/Debug/java_swift.framework/Versions/A/java_swift normal x86_64
CpHeader java_swift.h /tmp/Debug/java_swift.framework/Versions/A/Headers/java_swift.h
    builtin-copy -exclude .DS_Store -exclude CVS -exclude .svn -exclude .git -exclude .hg -resolve-src-symlinks java_swift/java_swift.h /tmp/Debug/java_swift.framework/Versions/A/Headers
CpResource LICENSE /tmp/Debug/java_swift.framework/Versions/A/Resources/LICENSE
    builtin-copy -exclude .DS_Store -exclude CVS -exclude .svn -exclude .git -exclude .hg -resolve-src-symlinks java_swift/LICENSE /tmp/Debug/java_swift.framework/Versions/A/Resources
Ditto /tmp/java_swift.build/Debug/java_swift.build/module.modulemap /tmp/Debug/java_swift.framework/Versions/A/Modules/module.modulemap
    builtin-copy -exclude .DS_Store -exclude CVS -exclude .svn -exclude .git -exclude .hg -resolve-src-symlinks /tmp/java_swift.build/Debug/java_swift.build/module.modulemap /tmp/Debug/java_swift.framework/Versions/A/Modules
Touch /tmp/Debug/java_swift.framework
    /usr/bin/touch -c /tmp/Debug/java_swift.framework
Write auxiliary files
write-file /tmp/java_lang.build/Debug/java_lang.build/swift-overrides.hmap
write-file /tmp/java_lang.build/Debug/java_lang.build/module.modulemap
/bin/mkdir -p /tmp/java_lang.build/Debug/java_lang.build/DerivedSources
write-file /tmp/java_lang.build/Debug/java_lang.build/DerivedSources/java_lang_vers.c
write-file /tmp/java_lang.build/Debug/java_lang.build/java_lang.hmap
write-file /tmp/java_lang.build/Debug/java_lang.build/java_lang-own-target-headers.hmap
/bin/mkdir -p /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64
write-file /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang-OutputFileMap.json
write-file /tmp/java_lang.build/Debug/java_lang.build/Objects-normal/x86_64/java_lang.LinkFileList
write-file /tmp/java_lang.build/Debug/java_lang.build/java_lang-project-headers.hmap
write-file /tmp/java_lang.build/Debug/java_lang.build/java_lang-all-non-framework-target-headers.hmap
write-file /tmp/java_lang.build/Debug/java_lang.build/unextended-module.modulemap
write-file /tmp/java_lang.build/Debug/java_lang.build/java_lang-all-target-headers.hmap
write-file /tmp/java_lang.build/Debug/java_lang.build/java_lang-generated-files.hmap
write-file /tmp/java_lang.build/Debug/java_lang.build/unextended-module-overlay.yaml
write-file /tmp/java_lang.build/all-product-headers.yaml
Create product structure
/bin/mkdir -p /tmp/Debug/java_lang.framework/Versions/A/Modules
/bin/ln -sfh Versions/Current/Modules /tmp/Debug/java_lang.framework/Modules
/bin/mkdir -p /tmp/Debug/java_lang.framework/Versions/A/Headers
/bin/mkdir -p /tmp/Debug/java_lang.framework/Versions/A/Resources
/bin/ln -sfh A /tmp/Debug/java_lang.framework/Versions/Current
/bin/ln -sfh Versions/Current/Resources /tmp/Debug/java_lang.framework/Resources
/bin/ln -sfh Versions/Current/Headers /tmp/Debug/java_lang.framework/Headers
/bin/ln -sfh Versions/Current/java_lang /tmp/Debug/java_lang.framework/java_lang
ProcessInfoPlistFile /tmp/Debug/java_lang.framework/Versions/A/Resources/Info.plist Info.plist
    builtin-infoPlistUtility java_lang/Info.plist -expandbuildsettings -platform macosx -o /tmp/Debug/java_lang.framework/Versions/A/Resources/Info.plist
Build settings from command line:
    SYMROOT = /tmp
MergeSwiftModule normal x86_64 /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule
Build settings from command line:
    SYMROOT = /tmp
Build settings from command line:
    SYMROOT = /tmp
MergeSwiftModule normal x86_64 /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule
Build settings from command line:
    SYMROOT = /tmp

=== BUILD TARGET CJavaVM OF PROJECT CJavaVM WITH CONFIGURATION Debug ===

Check dependencies

=== BUILD TARGET java_swift OF PROJECT java_swift WITH CONFIGURATION Debug ===

Check dependencies

CompileSwiftSources normal x86_64 com.apple.xcode.tools.swift.compiler
    cd /Users/user/SwiftJava/java_swift
    export DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer
    export SDKROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc -incremental -module-name java_swift -Onone -DDEBUG -sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -target x86_64-apple-macosx10.10 -g -Xfrontend -serialize-debugging-options -enable-testing -I /tmp/Debug -F /tmp/Debug -c -j8 /Users/user/SwiftJava/java_swift/Sources/JNIProxy.swift /Users/user/SwiftJava/java_swift/Sources/JavaMap.swift /Users/user/SwiftJava/java_swift/Sources/JNICore.swift /Users/user/SwiftJava/java_swift/Sources/JNIObject.swift /Users/user/SwiftJava/java_swift/Sources/JavaClass.swift /Users/user/SwiftJava/java_swift/Sources/JavaObject.swift /Users/user/SwiftJava/java_swift/Sources/JNIField.swift /Users/user/SwiftJava/java_swift/Sources/JNIMethod.swift /Users/user/SwiftJava/java_swift/Sources/JNIType.swift /Users/user/SwiftJava/java_swift/Sources/JavaSet.swift /Users/user/SwiftJava/java_swift/Sources/JavaEnum.swift /Users/user/SwiftJava/java_swift/Sources/Runnable.swift /Users/user/SwiftJava/java_swift/Sources/Throwable.swift /Users/user/SwiftJava/java_swift/Sources/HashMap.swift /Users/user/SwiftJava/java_swift/Sources/Exception.swift -output-file-map /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift-OutputFileMap.json -parseable-output -serialize-diagnostics -emit-dependencies -emit-module -emit-module-path /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift.swiftmodule -Xcc -I/tmp/java_swift.build/Debug/java_swift.build/swift-overrides.hmap -Xcc -iquote -Xcc /tmp/java_swift.build/Debug/java_swift.build/java_swift-generated-files.hmap -Xcc -I/tmp/java_swift.build/Debug/java_swift.build/java_swift-own-target-headers.hmap -Xcc -I/tmp/java_swift.build/Debug/java_swift.build/java_swift-all-non-framework-target-headers.hmap -Xcc -ivfsoverlay -Xcc /tmp/java_swift.build/all-product-headers.yaml -Xcc -iquote -Xcc /tmp/java_swift.build/Debug/java_swift.build/java_swift-project-headers.hmap -Xcc -I/tmp/Debug/include -Xcc -I/tmp/java_swift.build/Debug/java_swift.build/DerivedSources/x86_64 -Xcc -I/tmp/java_swift.build/Debug/java_swift.build/DerivedSources -Xcc -DDEBUG=1 -emit-objc-header -emit-objc-header-path /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/java_swift-Swift.h -import-underlying-module -Xcc -ivfsoverlay -Xcc /tmp/java_swift.build/Debug/java_swift.build/unextended-module-overlay.yaml -Xcc -working-directory/Users/user/SwiftJava/java_swift

CompileSwift normal x86_64 /Users/user/SwiftJava/java_swift/Sources/JavaMap.swift
    cd /Users/user/SwiftJava/java_swift
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -frontend -c /Users/user/SwiftJava/java_swift/Sources/JNIProxy.swift -primary-file /Users/user/SwiftJava/java_swift/Sources/JavaMap.swift /Users/user/SwiftJava/java_swift/Sources/JNICore.swift /Users/user/SwiftJava/java_swift/Sources/JNIObject.swift /Users/user/SwiftJava/java_swift/Sources/JavaClass.swift /Users/user/SwiftJava/java_swift/Sources/JavaObject.swift /Users/user/SwiftJava/java_swift/Sources/JNIField.swift /Users/user/SwiftJava/java_swift/Sources/JNIMethod.swift /Users/user/SwiftJava/java_swift/Sources/JNIType.swift /Users/user/SwiftJava/java_swift/Sources/JavaSet.swift /Users/user/SwiftJava/java_swift/Sources/JavaEnum.swift /Users/user/SwiftJava/java_swift/Sources/Runnable.swift /Users/user/SwiftJava/java_swift/Sources/Throwable.swift /Users/user/SwiftJava/java_swift/Sources/HashMap.swift /Users/user/SwiftJava/java_swift/Sources/Exception.swift -target x86_64-apple-macosx10.10 -enable-objc-interop -sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -I /tmp/Debug -F /tmp/Debug -enable-testing -g -import-underlying-module -D DEBUG -serialize-debugging-options -Xcc -I/tmp/java_swift.build/Debug/java_swift.build/swift-overrides.hmap -Xcc -iquote -Xcc /tmp/java_swift.build/Debug/java_swift.build/java_swift-generated-files.hmap -Xcc -I/tmp/java_swift.build/Debug/java_swift.build/java_swift-own-target-headers.hmap -Xcc -I/tmp/java_swift.build/Debug/java_swift.build/java_swift-all-non-framework-target-headers.hmap -Xcc -ivfsoverlay -Xcc /tmp/java_swift.build/all-product-headers.yaml -Xcc -iquote -Xcc /tmp/java_swift.build/Debug/java_swift.build/java_swift-project-headers.hmap -Xcc -I/tmp/Debug/include -Xcc -I/tmp/java_swift.build/Debug/java_swift.build/DerivedSources/x86_64 -Xcc -I/tmp/java_swift.build/Debug/java_swift.build/DerivedSources -Xcc -DDEBUG=1 -Xcc -ivfsoverlay -Xcc /tmp/java_swift.build/Debug/java_swift.build/unextended-module-overlay.yaml -Xcc -working-directory/Users/user/SwiftJava/java_swift -emit-module-doc-path /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/JavaMap~partial.swiftdoc -serialize-diagnostics-path /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/JavaMap.dia -Onone -module-name java_swift -emit-module-path /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/JavaMap~partial.swiftmodule -emit-dependencies-path /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/JavaMap.d -emit-reference-dependencies-path /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/JavaMap.swiftdeps -o /tmp/java_swift.build/Debug/java_swift.build/Objects-normal/x86_64/JavaMap.o
