
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:53 GMT 2016 ///

/// class java.util.jar.JarOutputStream ///

open class JarOutputStream: ZipOutputStream {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.jar.JarOutputStream", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var JarOutputStreamJNIClass: jclass?

    /// private static final int java.util.jar.JarOutputStream.JAR_MAGIC

    /// private boolean java.util.jar.JarOutputStream.firstEntry

    /// private java.util.zip.ZipOutputStream$XEntry java.util.zip.ZipOutputStream.current

    /// private java.util.Vector java.util.zip.ZipOutputStream.xentries

    /// private java.util.HashSet java.util.zip.ZipOutputStream.names

    /// private java.util.zip.CRC32 java.util.zip.ZipOutputStream.crc

    /// private long java.util.zip.ZipOutputStream.written

    /// private long java.util.zip.ZipOutputStream.locoff

    /// private java.lang.String java.util.zip.ZipOutputStream.comment

    /// private int java.util.zip.ZipOutputStream.method

    /// private boolean java.util.zip.ZipOutputStream.finished

    /// private boolean java.util.zip.ZipOutputStream.closed

    /// public static final int java.util.zip.ZipOutputStream.STORED

    /// public static final int java.util.zip.ZipOutputStream.DEFLATED

    /// public static final long java.util.zip.ZipConstants.LOCSIG

    /// public static final long java.util.zip.ZipConstants.EXTSIG

    /// public static final long java.util.zip.ZipConstants.CENSIG

    /// public static final long java.util.zip.ZipConstants.ENDSIG

    /// public static final int java.util.zip.ZipConstants.LOCHDR

    /// public static final int java.util.zip.ZipConstants.EXTHDR

    /// public static final int java.util.zip.ZipConstants.CENHDR

    /// public static final int java.util.zip.ZipConstants.ENDHDR

    /// public static final int java.util.zip.ZipConstants.LOCVER

    /// public static final int java.util.zip.ZipConstants.LOCFLG

    /// public static final int java.util.zip.ZipConstants.LOCHOW

    /// public static final int java.util.zip.ZipConstants.LOCTIM

    /// public static final int java.util.zip.ZipConstants.LOCCRC

    /// public static final int java.util.zip.ZipConstants.LOCSIZ

    /// public static final int java.util.zip.ZipConstants.LOCLEN

    /// public static final int java.util.zip.ZipConstants.LOCNAM

    /// public static final int java.util.zip.ZipConstants.LOCEXT

    /// public static final int java.util.zip.ZipConstants.EXTCRC

    /// public static final int java.util.zip.ZipConstants.EXTSIZ

    /// public static final int java.util.zip.ZipConstants.EXTLEN

    /// public static final int java.util.zip.ZipConstants.CENVEM

    /// public static final int java.util.zip.ZipConstants.CENVER

    /// public static final int java.util.zip.ZipConstants.CENFLG

    /// public static final int java.util.zip.ZipConstants.CENHOW

    /// public static final int java.util.zip.ZipConstants.CENTIM

    /// public static final int java.util.zip.ZipConstants.CENCRC

    /// public static final int java.util.zip.ZipConstants.CENSIZ

    /// public static final int java.util.zip.ZipConstants.CENLEN

    /// public static final int java.util.zip.ZipConstants.CENNAM

    /// public static final int java.util.zip.ZipConstants.CENEXT

    /// public static final int java.util.zip.ZipConstants.CENCOM

    /// public static final int java.util.zip.ZipConstants.CENDSK

    /// public static final int java.util.zip.ZipConstants.CENATT

    /// public static final int java.util.zip.ZipConstants.CENATX

    /// public static final int java.util.zip.ZipConstants.CENOFF

    /// public static final int java.util.zip.ZipConstants.ENDSUB

    /// public static final int java.util.zip.ZipConstants.ENDTOT

    /// public static final int java.util.zip.ZipConstants.ENDSIZ

    /// public static final int java.util.zip.ZipConstants.ENDOFF

    /// public static final int java.util.zip.ZipConstants.ENDCOM

    /// protected java.util.zip.Deflater java.util.zip.DeflaterOutputStream.def

    private static var def_FieldID: jfieldID?

    override open var def: Deflater! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "def", fieldType: "Ljava/util/zip/Deflater;", fieldCache: &JarOutputStream.def_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? Deflater( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "def", fieldType: "Ljava/util/zip/Deflater;", fieldCache: &JarOutputStream.def_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected byte[] java.util.zip.DeflaterOutputStream.buf

    private static var buf_FieldID: jfieldID?

    override open var buf: [Int8]! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "buf", fieldType: "[B", fieldCache: &JarOutputStream.buf_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: [Int8](), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "buf", fieldType: "[B", fieldCache: &JarOutputStream.buf_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean java.util.zip.DeflaterOutputStream.closed

    /// boolean java.util.zip.DeflaterOutputStream.usesDefaultDeflater

    /// protected java.io.OutputStream java.io.FilterOutputStream.out

    private static var out_FieldID: jfieldID?

    override open var out: /* java.io.OutputStream */ UnclassedObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "out", fieldType: "Ljava/io/OutputStream;", fieldCache: &JarOutputStream.out_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? /* java.io.OutputStream */ UnclassedObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "out", fieldType: "Ljava/io/OutputStream;", fieldCache: &JarOutputStream.out_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public java.util.jar.JarOutputStream(java.io.OutputStream,java.util.jar.Manifest) throws java.io.IOException

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: /* java.io.OutputStream */ UnclassedObject?, arg1: Manifest? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/jar/JarOutputStream", classCache: &JarOutputStream.JarOutputStreamJNIClass, methodSig: "(Ljava/io/OutputStream;Ljava/util/jar/Manifest;)V", methodCache: &JarOutputStream.new_MethodID_1, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.IOException */ UnclassedObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* java.io.OutputStream */ UnclassedObject?, _ _arg1: Manifest? ) throws {
        try self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.jar.JarOutputStream(java.io.OutputStream) throws java.io.IOException

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: /* java.io.OutputStream */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/jar/JarOutputStream", classCache: &JarOutputStream.JarOutputStreamJNIClass, methodSig: "(Ljava/io/OutputStream;)V", methodCache: &JarOutputStream.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* java.io.OutputStream */ UnclassedObject? ) {
        self.init( arg0: _arg0 )
    }

    /// private static int java.util.jar.JarOutputStream.get16(byte[],int)

    /// public void java.util.jar.JarOutputStream.putNextEntry(java.util.zip.ZipEntry) throws java.io.IOException

    /// private static boolean java.util.jar.JarOutputStream.hasMagic(byte[])

    /// private static void java.util.jar.JarOutputStream.set16(byte[],int,int)

}
