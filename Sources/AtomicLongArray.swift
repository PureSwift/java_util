
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:51 GMT 2016 ///

/// class java.util.concurrent.atomic.AtomicLongArray ///

open class AtomicLongArray: java_lang.JavaObject, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.atomic.AtomicLongArray", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AtomicLongArrayJNIClass: jclass?

    /// private static final long java.util.concurrent.atomic.AtomicLongArray.serialVersionUID

    /// private static final sun.misc.Unsafe java.util.concurrent.atomic.AtomicLongArray.unsafe

    /// private static final int java.util.concurrent.atomic.AtomicLongArray.base

    /// private static final int java.util.concurrent.atomic.AtomicLongArray.scale

    /// private final long[] java.util.concurrent.atomic.AtomicLongArray.array

    /// public java.util.concurrent.atomic.AtomicLongArray(int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/atomic/AtomicLongArray", classCache: &AtomicLongArray.AtomicLongArrayJNIClass, methodSig: "(I)V", methodCache: &AtomicLongArray.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.concurrent.atomic.AtomicLongArray(long[])

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: [Int64]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/atomic/AtomicLongArray", classCache: &AtomicLongArray.AtomicLongArrayJNIClass, methodSig: "([J)V", methodCache: &AtomicLongArray.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: [Int64]? ) {
        self.init( arg0: _arg0 )
    }

    /// public final long java.util.concurrent.atomic.AtomicLongArray.get(int)

    private static var get_MethodID_3: jmethodID?

    open func get( arg0: Int ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "get", methodSig: "(I)J", methodCache: &AtomicLongArray.get_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open func get( _ _arg0: Int ) -> Int64 {
        return get( arg0: _arg0 )
    }

    /// public java.lang.String java.util.concurrent.atomic.AtomicLongArray.toString()

    /// public final int java.util.concurrent.atomic.AtomicLongArray.length()

    private static var length_MethodID_4: jmethodID?

    open func length() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "length", methodSig: "()I", methodCache: &AtomicLongArray.length_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public final void java.util.concurrent.atomic.AtomicLongArray.set(int,long)

    private static var set_MethodID_5: jmethodID?

    open func set( arg0: Int, arg1: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "set", methodSig: "(IJ)V", methodCache: &AtomicLongArray.set_MethodID_5, args: &__args, locals: &__locals )
    }

    open func set( _ _arg0: Int, _ _arg1: Int64 ) {
        set( arg0: _arg0, arg1: _arg1 )
    }

    /// public final long java.util.concurrent.atomic.AtomicLongArray.getAndAdd(int,long)

    private static var getAndAdd_MethodID_6: jmethodID?

    open func getAndAdd( arg0: Int, arg1: Int64 ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getAndAdd", methodSig: "(IJ)J", methodCache: &AtomicLongArray.getAndAdd_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open func getAndAdd( _ _arg0: Int, _ _arg1: Int64 ) -> Int64 {
        return getAndAdd( arg0: _arg0, arg1: _arg1 )
    }

    /// public final void java.util.concurrent.atomic.AtomicLongArray.lazySet(int,long)

    private static var lazySet_MethodID_7: jmethodID?

    open func lazySet( arg0: Int, arg1: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "lazySet", methodSig: "(IJ)V", methodCache: &AtomicLongArray.lazySet_MethodID_7, args: &__args, locals: &__locals )
    }

    open func lazySet( _ _arg0: Int, _ _arg1: Int64 ) {
        lazySet( arg0: _arg0, arg1: _arg1 )
    }

    /// public final long java.util.concurrent.atomic.AtomicLongArray.getAndSet(int,long)

    private static var getAndSet_MethodID_8: jmethodID?

    open func getAndSet( arg0: Int, arg1: Int64 ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getAndSet", methodSig: "(IJ)J", methodCache: &AtomicLongArray.getAndSet_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open func getAndSet( _ _arg0: Int, _ _arg1: Int64 ) -> Int64 {
        return getAndSet( arg0: _arg0, arg1: _arg1 )
    }

    /// public final boolean java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int,long,long)

    private static var compareAndSet_MethodID_9: jmethodID?

    open func compareAndSet( arg0: Int, arg1: Int64, arg2: Int64 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "compareAndSet", methodSig: "(IJJ)Z", methodCache: &AtomicLongArray.compareAndSet_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func compareAndSet( _ _arg0: Int, _ _arg1: Int64, _ _arg2: Int64 ) -> Bool {
        return compareAndSet( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public final boolean java.util.concurrent.atomic.AtomicLongArray.weakCompareAndSet(int,long,long)

    private static var weakCompareAndSet_MethodID_10: jmethodID?

    open func weakCompareAndSet( arg0: Int, arg1: Int64, arg2: Int64 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "weakCompareAndSet", methodSig: "(IJJ)Z", methodCache: &AtomicLongArray.weakCompareAndSet_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func weakCompareAndSet( _ _arg0: Int, _ _arg1: Int64, _ _arg2: Int64 ) -> Bool {
        return weakCompareAndSet( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public final long java.util.concurrent.atomic.AtomicLongArray.getAndIncrement(int)

    private static var getAndIncrement_MethodID_11: jmethodID?

    open func getAndIncrement( arg0: Int ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getAndIncrement", methodSig: "(I)J", methodCache: &AtomicLongArray.getAndIncrement_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open func getAndIncrement( _ _arg0: Int ) -> Int64 {
        return getAndIncrement( arg0: _arg0 )
    }

    /// public final long java.util.concurrent.atomic.AtomicLongArray.getAndDecrement(int)

    private static var getAndDecrement_MethodID_12: jmethodID?

    open func getAndDecrement( arg0: Int ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getAndDecrement", methodSig: "(I)J", methodCache: &AtomicLongArray.getAndDecrement_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open func getAndDecrement( _ _arg0: Int ) -> Int64 {
        return getAndDecrement( arg0: _arg0 )
    }

    /// public final long java.util.concurrent.atomic.AtomicLongArray.incrementAndGet(int)

    private static var incrementAndGet_MethodID_13: jmethodID?

    open func incrementAndGet( arg0: Int ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "incrementAndGet", methodSig: "(I)J", methodCache: &AtomicLongArray.incrementAndGet_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open func incrementAndGet( _ _arg0: Int ) -> Int64 {
        return incrementAndGet( arg0: _arg0 )
    }

    /// public final long java.util.concurrent.atomic.AtomicLongArray.decrementAndGet(int)

    private static var decrementAndGet_MethodID_14: jmethodID?

    open func decrementAndGet( arg0: Int ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "decrementAndGet", methodSig: "(I)J", methodCache: &AtomicLongArray.decrementAndGet_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open func decrementAndGet( _ _arg0: Int ) -> Int64 {
        return decrementAndGet( arg0: _arg0 )
    }

    /// public long java.util.concurrent.atomic.AtomicLongArray.addAndGet(int,long)

    private static var addAndGet_MethodID_15: jmethodID?

    open func addAndGet( arg0: Int, arg1: Int64 ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "addAndGet", methodSig: "(IJ)J", methodCache: &AtomicLongArray.addAndGet_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open func addAndGet( _ _arg0: Int, _ _arg1: Int64 ) -> Int64 {
        return addAndGet( arg0: _arg0, arg1: _arg1 )
    }

    /// private long java.util.concurrent.atomic.AtomicLongArray.rawIndex(int)

}
