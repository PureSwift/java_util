
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:53 GMT 2016 ///

/// class java.util.logging.LogRecord ///

open class LogRecord: java_lang.JavaObject, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.logging.LogRecord", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var LogRecordJNIClass: jclass?

    /// private static long java.util.logging.LogRecord.globalSequenceNumber

    /// private static int java.util.logging.LogRecord.nextThreadId

    /// private static java.lang.ThreadLocal java.util.logging.LogRecord.threadIds

    /// private java.util.logging.Level java.util.logging.LogRecord.level

    /// private long java.util.logging.LogRecord.sequenceNumber

    /// private java.lang.String java.util.logging.LogRecord.sourceClassName

    /// private java.lang.String java.util.logging.LogRecord.sourceMethodName

    /// private java.lang.String java.util.logging.LogRecord.message

    /// private int java.util.logging.LogRecord.threadID

    /// private long java.util.logging.LogRecord.millis

    /// private java.lang.Throwable java.util.logging.LogRecord.thrown

    /// private java.lang.String java.util.logging.LogRecord.loggerName

    /// private java.lang.String java.util.logging.LogRecord.resourceBundleName

    /// private transient boolean java.util.logging.LogRecord.needToInferCaller

    /// private transient java.lang.Object[] java.util.logging.LogRecord.parameters

    /// private transient java.util.ResourceBundle java.util.logging.LogRecord.resourceBundle

    /// private static final long java.util.logging.LogRecord.serialVersionUID

    /// public java.util.logging.LogRecord(java.util.logging.Level,java.lang.String)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Level?, arg1: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/logging/LogRecord", classCache: &LogRecord.LogRecordJNIClass, methodSig: "(Ljava/util/logging/Level;Ljava/lang/String;)V", methodCache: &LogRecord.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Level?, _ _arg1: String? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.lang.String java.util.logging.LogRecord.getMessage()

    private static var getMessage_MethodID_2: jmethodID?

    open func getMessage() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMessage", methodSig: "()Ljava/lang/String;", methodCache: &LogRecord.getMessage_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// private void java.util.logging.LogRecord.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// private void java.util.logging.LogRecord.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// public java.lang.Object[] java.util.logging.LogRecord.getParameters()

    private static var getParameters_MethodID_3: jmethodID?

    open func getParameters() -> [JavaObject]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getParameters", methodSig: "()[Ljava/lang/Object;", methodCache: &LogRecord.getParameters_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: [JavaObject](), from: __return )
    }


    /// public long java.util.logging.LogRecord.getMillis()

    private static var getMillis_MethodID_4: jmethodID?

    open func getMillis() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getMillis", methodSig: "()J", methodCache: &LogRecord.getMillis_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }


    /// public void java.util.logging.LogRecord.setMillis(long)

    private static var setMillis_MethodID_5: jmethodID?

    open func setMillis( arg0: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMillis", methodSig: "(J)V", methodCache: &LogRecord.setMillis_MethodID_5, args: &__args, locals: &__locals )
    }

    open func setMillis( _ _arg0: Int64 ) {
        setMillis( arg0: _arg0 )
    }

    /// public void java.util.logging.LogRecord.setLevel(java.util.logging.Level)

    private static var setLevel_MethodID_6: jmethodID?

    open func setLevel( arg0: Level? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLevel", methodSig: "(Ljava/util/logging/Level;)V", methodCache: &LogRecord.setLevel_MethodID_6, args: &__args, locals: &__locals )
    }

    open func setLevel( _ _arg0: Level? ) {
        setLevel( arg0: _arg0 )
    }

    /// public java.util.logging.Level java.util.logging.LogRecord.getLevel()

    private static var getLevel_MethodID_7: jmethodID?

    open func getLevel() -> Level! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLevel", methodSig: "()Ljava/util/logging/Level;", methodCache: &LogRecord.getLevel_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Level( javaObject: __return ) : nil
    }


    /// public java.lang.String java.util.logging.LogRecord.getResourceBundleName()

    private static var getResourceBundleName_MethodID_8: jmethodID?

    open func getResourceBundleName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getResourceBundleName", methodSig: "()Ljava/lang/String;", methodCache: &LogRecord.getResourceBundleName_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public java.util.ResourceBundle java.util.logging.LogRecord.getResourceBundle()

    private static var getResourceBundle_MethodID_9: jmethodID?

    open func getResourceBundle() -> ResourceBundle! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getResourceBundle", methodSig: "()Ljava/util/ResourceBundle;", methodCache: &LogRecord.getResourceBundle_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ResourceBundle( javaObject: __return ) : nil
    }


    /// public java.lang.String java.util.logging.LogRecord.getLoggerName()

    private static var getLoggerName_MethodID_10: jmethodID?

    open func getLoggerName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLoggerName", methodSig: "()Ljava/lang/String;", methodCache: &LogRecord.getLoggerName_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public void java.util.logging.LogRecord.setLoggerName(java.lang.String)

    private static var setLoggerName_MethodID_11: jmethodID?

    open func setLoggerName( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLoggerName", methodSig: "(Ljava/lang/String;)V", methodCache: &LogRecord.setLoggerName_MethodID_11, args: &__args, locals: &__locals )
    }

    open func setLoggerName( _ _arg0: String? ) {
        setLoggerName( arg0: _arg0 )
    }

    /// public void java.util.logging.LogRecord.setResourceBundle(java.util.ResourceBundle)

    private static var setResourceBundle_MethodID_12: jmethodID?

    open func setResourceBundle( arg0: ResourceBundle? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setResourceBundle", methodSig: "(Ljava/util/ResourceBundle;)V", methodCache: &LogRecord.setResourceBundle_MethodID_12, args: &__args, locals: &__locals )
    }

    open func setResourceBundle( _ _arg0: ResourceBundle? ) {
        setResourceBundle( arg0: _arg0 )
    }

    /// public void java.util.logging.LogRecord.setResourceBundleName(java.lang.String)

    private static var setResourceBundleName_MethodID_13: jmethodID?

    open func setResourceBundleName( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setResourceBundleName", methodSig: "(Ljava/lang/String;)V", methodCache: &LogRecord.setResourceBundleName_MethodID_13, args: &__args, locals: &__locals )
    }

    open func setResourceBundleName( _ _arg0: String? ) {
        setResourceBundleName( arg0: _arg0 )
    }

    /// public long java.util.logging.LogRecord.getSequenceNumber()

    private static var getSequenceNumber_MethodID_14: jmethodID?

    open func getSequenceNumber() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getSequenceNumber", methodSig: "()J", methodCache: &LogRecord.getSequenceNumber_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }


    /// public void java.util.logging.LogRecord.setSequenceNumber(long)

    private static var setSequenceNumber_MethodID_15: jmethodID?

    open func setSequenceNumber( arg0: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSequenceNumber", methodSig: "(J)V", methodCache: &LogRecord.setSequenceNumber_MethodID_15, args: &__args, locals: &__locals )
    }

    open func setSequenceNumber( _ _arg0: Int64 ) {
        setSequenceNumber( arg0: _arg0 )
    }

    /// public java.lang.String java.util.logging.LogRecord.getSourceClassName()

    private static var getSourceClassName_MethodID_16: jmethodID?

    open func getSourceClassName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSourceClassName", methodSig: "()Ljava/lang/String;", methodCache: &LogRecord.getSourceClassName_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public void java.util.logging.LogRecord.setSourceClassName(java.lang.String)

    private static var setSourceClassName_MethodID_17: jmethodID?

    open func setSourceClassName( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSourceClassName", methodSig: "(Ljava/lang/String;)V", methodCache: &LogRecord.setSourceClassName_MethodID_17, args: &__args, locals: &__locals )
    }

    open func setSourceClassName( _ _arg0: String? ) {
        setSourceClassName( arg0: _arg0 )
    }

    /// public java.lang.String java.util.logging.LogRecord.getSourceMethodName()

    private static var getSourceMethodName_MethodID_18: jmethodID?

    open func getSourceMethodName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSourceMethodName", methodSig: "()Ljava/lang/String;", methodCache: &LogRecord.getSourceMethodName_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public void java.util.logging.LogRecord.setSourceMethodName(java.lang.String)

    private static var setSourceMethodName_MethodID_19: jmethodID?

    open func setSourceMethodName( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSourceMethodName", methodSig: "(Ljava/lang/String;)V", methodCache: &LogRecord.setSourceMethodName_MethodID_19, args: &__args, locals: &__locals )
    }

    open func setSourceMethodName( _ _arg0: String? ) {
        setSourceMethodName( arg0: _arg0 )
    }

    /// public void java.util.logging.LogRecord.setMessage(java.lang.String)

    private static var setMessage_MethodID_20: jmethodID?

    open func setMessage( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMessage", methodSig: "(Ljava/lang/String;)V", methodCache: &LogRecord.setMessage_MethodID_20, args: &__args, locals: &__locals )
    }

    open func setMessage( _ _arg0: String? ) {
        setMessage( arg0: _arg0 )
    }

    /// public void java.util.logging.LogRecord.setParameters(java.lang.Object[])

    private static var setParameters_MethodID_21: jmethodID?

    open func setParameters( arg0: [JavaObject]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setParameters", methodSig: "([Ljava/lang/Object;)V", methodCache: &LogRecord.setParameters_MethodID_21, args: &__args, locals: &__locals )
    }

    open func setParameters( _ _arg0: [JavaObject]? ) {
        setParameters( arg0: _arg0 )
    }

    /// public int java.util.logging.LogRecord.getThreadID()

    private static var getThreadID_MethodID_22: jmethodID?

    open func getThreadID() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getThreadID", methodSig: "()I", methodCache: &LogRecord.getThreadID_MethodID_22, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public void java.util.logging.LogRecord.setThreadID(int)

    private static var setThreadID_MethodID_23: jmethodID?

    open func setThreadID( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setThreadID", methodSig: "(I)V", methodCache: &LogRecord.setThreadID_MethodID_23, args: &__args, locals: &__locals )
    }

    open func setThreadID( _ _arg0: Int ) {
        setThreadID( arg0: _arg0 )
    }

    /// public java.lang.Throwable java.util.logging.LogRecord.getThrown()

    private static var getThrown_MethodID_24: jmethodID?

    open func getThrown() -> java_lang.Throwable! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getThrown", methodSig: "()Ljava/lang/Throwable;", methodCache: &LogRecord.getThrown_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.Throwable( javaObject: __return ) : nil
    }


    /// public void java.util.logging.LogRecord.setThrown(java.lang.Throwable)

    private static var setThrown_MethodID_25: jmethodID?

    open func setThrown( arg0: java_lang.Throwable? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setThrown", methodSig: "(Ljava/lang/Throwable;)V", methodCache: &LogRecord.setThrown_MethodID_25, args: &__args, locals: &__locals )
    }

    open func setThrown( _ _arg0: java_lang.Throwable? ) {
        setThrown( arg0: _arg0 )
    }

    /// private void java.util.logging.LogRecord.inferCaller()

}
