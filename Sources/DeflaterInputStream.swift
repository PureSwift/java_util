
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:56 GMT 2016 ///

/// class java.util.zip.DeflaterInputStream ///

open class DeflaterInputStream: /* java.io.FilterInputStream */ UnclassedObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.zip.DeflaterInputStream", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DeflaterInputStreamJNIClass: jclass?

    /// protected final java.util.zip.Deflater java.util.zip.DeflaterInputStream.def

    private static var def_FieldID: jfieldID?

    open var def: Deflater! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "def", fieldType: "Ljava/util/zip/Deflater;", fieldCache: &DeflaterInputStream.def_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? Deflater( javaObject: __value ) : nil
        }
    }

    /// protected final byte[] java.util.zip.DeflaterInputStream.buf

    private static var buf_FieldID: jfieldID?

    open var buf: [Int8]! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "buf", fieldType: "[B", fieldCache: &DeflaterInputStream.buf_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: [Int8](), from: __value )
        }
    }

    /// private byte[] java.util.zip.DeflaterInputStream.rbuf

    /// private boolean java.util.zip.DeflaterInputStream.usesDefaultDeflater

    /// private boolean java.util.zip.DeflaterInputStream.reachEOF

    /// protected volatile java.io.InputStream java.io.FilterInputStream.in

    private static var _in_FieldID: jfieldID?

    open var _in: /* java.io.InputStream */ UnclassedObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "in", fieldType: "Ljava/io/InputStream;", fieldCache: &DeflaterInputStream._in_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? /* java.io.InputStream */ UnclassedObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "in", fieldType: "Ljava/io/InputStream;", fieldCache: &DeflaterInputStream._in_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private static final int java.io.InputStream.MAX_SKIP_BUFFER_SIZE

    /// public java.util.zip.DeflaterInputStream(java.io.InputStream,java.util.zip.Deflater)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: /* java.io.InputStream */ UnclassedObject?, arg1: Deflater? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/DeflaterInputStream", classCache: &DeflaterInputStream.DeflaterInputStreamJNIClass, methodSig: "(Ljava/io/InputStream;Ljava/util/zip/Deflater;)V", methodCache: &DeflaterInputStream.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* java.io.InputStream */ UnclassedObject?, _ _arg1: Deflater? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.zip.DeflaterInputStream(java.io.InputStream,java.util.zip.Deflater,int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: /* java.io.InputStream */ UnclassedObject?, arg1: Deflater?, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/DeflaterInputStream", classCache: &DeflaterInputStream.DeflaterInputStreamJNIClass, methodSig: "(Ljava/io/InputStream;Ljava/util/zip/Deflater;I)V", methodCache: &DeflaterInputStream.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* java.io.InputStream */ UnclassedObject?, _ _arg1: Deflater?, _ _arg2: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.util.zip.DeflaterInputStream(java.io.InputStream)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: /* java.io.InputStream */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/DeflaterInputStream", classCache: &DeflaterInputStream.DeflaterInputStreamJNIClass, methodSig: "(Ljava/io/InputStream;)V", methodCache: &DeflaterInputStream.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* java.io.InputStream */ UnclassedObject? ) {
        self.init( arg0: _arg0 )
    }

    /// public void java.util.zip.DeflaterInputStream.close() throws java.io.IOException

    /// public void java.util.zip.DeflaterInputStream.mark(int)

    /// public void java.util.zip.DeflaterInputStream.reset() throws java.io.IOException

    /// public int java.util.zip.DeflaterInputStream.read(byte[],int,int) throws java.io.IOException

    /// public int java.util.zip.DeflaterInputStream.read() throws java.io.IOException

    /// public long java.util.zip.DeflaterInputStream.skip(long) throws java.io.IOException

    /// public int java.util.zip.DeflaterInputStream.available() throws java.io.IOException

    /// public boolean java.util.zip.DeflaterInputStream.markSupported()

    /// private void java.util.zip.DeflaterInputStream.ensureOpen() throws java.io.IOException

}
