
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:55 GMT 2016 ///

/// class java.util.prefs.Preferences ///

open class Preferences: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.prefs.Preferences", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var PreferencesJNIClass: jclass?

    /// private static final java.util.prefs.PreferencesFactory java.util.prefs.Preferences.factory

    /// public static final int java.util.prefs.Preferences.MAX_KEY_LENGTH

    private static var MAX_KEY_LENGTH_FieldID: jfieldID?

    open static var MAX_KEY_LENGTH: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MAX_KEY_LENGTH", fieldType: "I", fieldCache: &MAX_KEY_LENGTH_FieldID, className: "java/util/prefs/Preferences", classCache: &PreferencesJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.prefs.Preferences.MAX_VALUE_LENGTH

    private static var MAX_VALUE_LENGTH_FieldID: jfieldID?

    open static var MAX_VALUE_LENGTH: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MAX_VALUE_LENGTH", fieldType: "I", fieldCache: &MAX_VALUE_LENGTH_FieldID, className: "java/util/prefs/Preferences", classCache: &PreferencesJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.prefs.Preferences.MAX_NAME_LENGTH

    private static var MAX_NAME_LENGTH_FieldID: jfieldID?

    open static var MAX_NAME_LENGTH: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MAX_NAME_LENGTH", fieldType: "I", fieldCache: &MAX_NAME_LENGTH_FieldID, className: "java/util/prefs/Preferences", classCache: &PreferencesJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// private static java.security.Permission java.util.prefs.Preferences.prefsPerm

    /// protected java.util.prefs.Preferences()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/prefs/Preferences", classCache: &Preferences.PreferencesJNIClass, methodSig: "()V", methodCache: &Preferences.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public abstract java.lang.String java.util.prefs.Preferences.name()

    private static var name_MethodID_2: jmethodID?

    open func name() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "name", methodSig: "()Ljava/lang/String;", methodCache: &Preferences.name_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public abstract java.util.prefs.Preferences java.util.prefs.Preferences.parent()

    private static var parent_MethodID_3: jmethodID?

    open func parent() -> Preferences! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "parent", methodSig: "()Ljava/util/prefs/Preferences;", methodCache: &Preferences.parent_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Preferences( javaObject: __return ) : nil
    }


    /// public abstract java.lang.String java.util.prefs.Preferences.get(java.lang.String,java.lang.String)

    private static var get_MethodID_4: jmethodID?

    open func get( arg0: String?, arg1: String? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", methodCache: &Preferences.get_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func get( _ _arg0: String?, _ _arg1: String? ) -> String! {
        return get( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.util.prefs.Preferences.put(java.lang.String,java.lang.String)

    private static var put_MethodID_5: jmethodID?

    open func put( arg0: String?, arg1: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "put", methodSig: "(Ljava/lang/String;Ljava/lang/String;)V", methodCache: &Preferences.put_MethodID_5, args: &__args, locals: &__locals )
    }

    open func put( _ _arg0: String?, _ _arg1: String? ) {
        put( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.lang.String java.util.prefs.Preferences.toString()

    /// public abstract boolean java.util.prefs.Preferences.getBoolean(java.lang.String,boolean)

    private static var getBoolean_MethodID_6: jmethodID?

    open func getBoolean( arg0: String?, arg1: Bool ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getBoolean", methodSig: "(Ljava/lang/String;Z)Z", methodCache: &Preferences.getBoolean_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func getBoolean( _ _arg0: String?, _ _arg1: Bool ) -> Bool {
        return getBoolean( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.util.prefs.Preferences.putBoolean(java.lang.String,boolean)

    private static var putBoolean_MethodID_7: jmethodID?

    open func putBoolean( arg0: String?, arg1: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putBoolean", methodSig: "(Ljava/lang/String;Z)V", methodCache: &Preferences.putBoolean_MethodID_7, args: &__args, locals: &__locals )
    }

    open func putBoolean( _ _arg0: String?, _ _arg1: Bool ) {
        putBoolean( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract int java.util.prefs.Preferences.getInt(java.lang.String,int)

    private static var getInt_MethodID_8: jmethodID?

    open func getInt( arg0: String?, arg1: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getInt", methodSig: "(Ljava/lang/String;I)I", methodCache: &Preferences.getInt_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getInt( _ _arg0: String?, _ _arg1: Int ) -> Int {
        return getInt( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.util.prefs.Preferences.putInt(java.lang.String,int)

    private static var putInt_MethodID_9: jmethodID?

    open func putInt( arg0: String?, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putInt", methodSig: "(Ljava/lang/String;I)V", methodCache: &Preferences.putInt_MethodID_9, args: &__args, locals: &__locals )
    }

    open func putInt( _ _arg0: String?, _ _arg1: Int ) {
        putInt( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract long java.util.prefs.Preferences.getLong(java.lang.String,long)

    private static var getLong_MethodID_10: jmethodID?

    open func getLong( arg0: String?, arg1: Int64 ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getLong", methodSig: "(Ljava/lang/String;J)J", methodCache: &Preferences.getLong_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open func getLong( _ _arg0: String?, _ _arg1: Int64 ) -> Int64 {
        return getLong( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.util.prefs.Preferences.putLong(java.lang.String,long)

    private static var putLong_MethodID_11: jmethodID?

    open func putLong( arg0: String?, arg1: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putLong", methodSig: "(Ljava/lang/String;J)V", methodCache: &Preferences.putLong_MethodID_11, args: &__args, locals: &__locals )
    }

    open func putLong( _ _arg0: String?, _ _arg1: Int64 ) {
        putLong( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract float java.util.prefs.Preferences.getFloat(java.lang.String,float)

    private static var getFloat_MethodID_12: jmethodID?

    open func getFloat( arg0: String?, arg1: Float ) -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getFloat", methodSig: "(Ljava/lang/String;F)F", methodCache: &Preferences.getFloat_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }

    open func getFloat( _ _arg0: String?, _ _arg1: Float ) -> Float {
        return getFloat( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.util.prefs.Preferences.putFloat(java.lang.String,float)

    private static var putFloat_MethodID_13: jmethodID?

    open func putFloat( arg0: String?, arg1: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putFloat", methodSig: "(Ljava/lang/String;F)V", methodCache: &Preferences.putFloat_MethodID_13, args: &__args, locals: &__locals )
    }

    open func putFloat( _ _arg0: String?, _ _arg1: Float ) {
        putFloat( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract double java.util.prefs.Preferences.getDouble(java.lang.String,double)

    private static var getDouble_MethodID_14: jmethodID?

    open func getDouble( arg0: String?, arg1: Double ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getDouble", methodSig: "(Ljava/lang/String;D)D", methodCache: &Preferences.getDouble_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }

    open func getDouble( _ _arg0: String?, _ _arg1: Double ) -> Double {
        return getDouble( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.util.prefs.Preferences.putDouble(java.lang.String,double)

    private static var putDouble_MethodID_15: jmethodID?

    open func putDouble( arg0: String?, arg1: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putDouble", methodSig: "(Ljava/lang/String;D)V", methodCache: &Preferences.putDouble_MethodID_15, args: &__args, locals: &__locals )
    }

    open func putDouble( _ _arg0: String?, _ _arg1: Double ) {
        putDouble( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.util.prefs.Preferences.clear() throws java.util.prefs.BackingStoreException

    private static var clear_MethodID_16: jmethodID?

    open func clear() throws /* java.util.prefs.BackingStoreException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "()V", methodCache: &Preferences.clear_MethodID_16, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw BackingStoreException( javaObject: throwable )
        }
    }


    /// static java.util.prefs.PreferencesFactory java.util.prefs.Preferences.access$000()

    /// public abstract void java.util.prefs.Preferences.remove(java.lang.String)

    private static var remove_MethodID_17: jmethodID?

    open func remove( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/String;)V", methodCache: &Preferences.remove_MethodID_17, args: &__args, locals: &__locals )
    }

    open func remove( _ _arg0: String? ) {
        remove( arg0: _arg0 )
    }

    /// public abstract java.lang.String[] java.util.prefs.Preferences.keys() throws java.util.prefs.BackingStoreException

    private static var keys_MethodID_18: jmethodID?

    open func keys() throws /* java.util.prefs.BackingStoreException */ -> [String]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "keys", methodSig: "()[Ljava/lang/String;", methodCache: &Preferences.keys_MethodID_18, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw BackingStoreException( javaObject: throwable )
        }
        return JNIType.decode( type: [String](), from: __return )
    }


    /// public abstract void java.util.prefs.Preferences.flush() throws java.util.prefs.BackingStoreException

    private static var flush_MethodID_19: jmethodID?

    open func flush() throws /* java.util.prefs.BackingStoreException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "flush", methodSig: "()V", methodCache: &Preferences.flush_MethodID_19, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw BackingStoreException( javaObject: throwable )
        }
    }


    /// private static java.util.prefs.PreferencesFactory java.util.prefs.Preferences.factory()

    /// public abstract void java.util.prefs.Preferences.sync() throws java.util.prefs.BackingStoreException

    private static var sync_MethodID_20: jmethodID?

    open func sync() throws /* java.util.prefs.BackingStoreException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "sync", methodSig: "()V", methodCache: &Preferences.sync_MethodID_20, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw BackingStoreException( javaObject: throwable )
        }
    }


    /// public abstract byte[] java.util.prefs.Preferences.getByteArray(java.lang.String,byte[])

    private static var getByteArray_MethodID_21: jmethodID?

    open func getByteArray( arg0: String?, arg1: [Int8]? ) -> [Int8]! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getByteArray", methodSig: "(Ljava/lang/String;[B)[B", methodCache: &Preferences.getByteArray_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int8](), from: __return )
    }

    open func getByteArray( _ _arg0: String?, _ _arg1: [Int8]? ) -> [Int8]! {
        return getByteArray( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.util.prefs.Preferences java.util.prefs.Preferences.node(java.lang.String)

    private static var node_MethodID_22: jmethodID?

    open func node( arg0: String? ) -> Preferences! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "node", methodSig: "(Ljava/lang/String;)Ljava/util/prefs/Preferences;", methodCache: &Preferences.node_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Preferences( javaObject: __return ) : nil
    }

    open func node( _ _arg0: String? ) -> Preferences! {
        return node( arg0: _arg0 )
    }

    /// public abstract boolean java.util.prefs.Preferences.isUserNode()

    private static var isUserNode_MethodID_23: jmethodID?

    open func isUserNode() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isUserNode", methodSig: "()Z", methodCache: &Preferences.isUserNode_MethodID_23, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public static java.util.prefs.Preferences java.util.prefs.Preferences.userRoot()

    private static var userRoot_MethodID_24: jmethodID?

    open class func userRoot() -> Preferences! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/prefs/Preferences", classCache: &PreferencesJNIClass, methodName: "userRoot", methodSig: "()Ljava/util/prefs/Preferences;", methodCache: &userRoot_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Preferences( javaObject: __return ) : nil
    }


    /// public abstract java.lang.String java.util.prefs.Preferences.absolutePath()

    private static var absolutePath_MethodID_25: jmethodID?

    open func absolutePath() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "absolutePath", methodSig: "()Ljava/lang/String;", methodCache: &Preferences.absolutePath_MethodID_25, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public abstract void java.util.prefs.Preferences.putByteArray(java.lang.String,byte[])

    private static var putByteArray_MethodID_26: jmethodID?

    open func putByteArray( arg0: String?, arg1: [Int8]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putByteArray", methodSig: "(Ljava/lang/String;[B)V", methodCache: &Preferences.putByteArray_MethodID_26, args: &__args, locals: &__locals )
    }

    open func putByteArray( _ _arg0: String?, _ _arg1: [Int8]? ) {
        putByteArray( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.lang.String[] java.util.prefs.Preferences.childrenNames() throws java.util.prefs.BackingStoreException

    private static var childrenNames_MethodID_27: jmethodID?

    open func childrenNames() throws /* java.util.prefs.BackingStoreException */ -> [String]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "childrenNames", methodSig: "()[Ljava/lang/String;", methodCache: &Preferences.childrenNames_MethodID_27, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw BackingStoreException( javaObject: throwable )
        }
        return JNIType.decode( type: [String](), from: __return )
    }


    /// public abstract boolean java.util.prefs.Preferences.nodeExists(java.lang.String) throws java.util.prefs.BackingStoreException

    private static var nodeExists_MethodID_28: jmethodID?

    open func nodeExists( arg0: String? ) throws /* java.util.prefs.BackingStoreException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "nodeExists", methodSig: "(Ljava/lang/String;)Z", methodCache: &Preferences.nodeExists_MethodID_28, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw BackingStoreException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func nodeExists( _ _arg0: String? ) throws /* java.util.prefs.BackingStoreException */ -> Bool {
        return try nodeExists( arg0: _arg0 )
    }

    /// public abstract void java.util.prefs.Preferences.removeNode() throws java.util.prefs.BackingStoreException

    private static var removeNode_MethodID_29: jmethodID?

    open func removeNode() throws /* java.util.prefs.BackingStoreException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeNode", methodSig: "()V", methodCache: &Preferences.removeNode_MethodID_29, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw BackingStoreException( javaObject: throwable )
        }
    }


    /// public abstract void java.util.prefs.Preferences.addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener)

    private static var addPreferenceChangeListener_MethodID_30: jmethodID?

    open func addPreferenceChangeListener( arg0: PreferenceChangeListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addPreferenceChangeListener", methodSig: "(Ljava/util/prefs/PreferenceChangeListener;)V", methodCache: &Preferences.addPreferenceChangeListener_MethodID_30, args: &__args, locals: &__locals )
    }

    open func addPreferenceChangeListener( _ _arg0: PreferenceChangeListener? ) {
        addPreferenceChangeListener( arg0: _arg0 )
    }

    /// public abstract void java.util.prefs.Preferences.removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener)

    private static var removePreferenceChangeListener_MethodID_31: jmethodID?

    open func removePreferenceChangeListener( arg0: PreferenceChangeListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removePreferenceChangeListener", methodSig: "(Ljava/util/prefs/PreferenceChangeListener;)V", methodCache: &Preferences.removePreferenceChangeListener_MethodID_31, args: &__args, locals: &__locals )
    }

    open func removePreferenceChangeListener( _ _arg0: PreferenceChangeListener? ) {
        removePreferenceChangeListener( arg0: _arg0 )
    }

    /// public abstract void java.util.prefs.Preferences.addNodeChangeListener(java.util.prefs.NodeChangeListener)

    private static var addNodeChangeListener_MethodID_32: jmethodID?

    open func addNodeChangeListener( arg0: NodeChangeListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addNodeChangeListener", methodSig: "(Ljava/util/prefs/NodeChangeListener;)V", methodCache: &Preferences.addNodeChangeListener_MethodID_32, args: &__args, locals: &__locals )
    }

    open func addNodeChangeListener( _ _arg0: NodeChangeListener? ) {
        addNodeChangeListener( arg0: _arg0 )
    }

    /// public abstract void java.util.prefs.Preferences.removeNodeChangeListener(java.util.prefs.NodeChangeListener)

    private static var removeNodeChangeListener_MethodID_33: jmethodID?

    open func removeNodeChangeListener( arg0: NodeChangeListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeNodeChangeListener", methodSig: "(Ljava/util/prefs/NodeChangeListener;)V", methodCache: &Preferences.removeNodeChangeListener_MethodID_33, args: &__args, locals: &__locals )
    }

    open func removeNodeChangeListener( _ _arg0: NodeChangeListener? ) {
        removeNodeChangeListener( arg0: _arg0 )
    }

    /// public abstract void java.util.prefs.Preferences.exportNode(java.io.OutputStream) throws java.io.IOException,java.util.prefs.BackingStoreException

    private static var exportNode_MethodID_34: jmethodID?

    open func exportNode( arg0: /* java.io.OutputStream */ UnclassedObject? ) throws /* java.io.IOException, java.util.prefs.BackingStoreException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "exportNode", methodSig: "(Ljava/io/OutputStream;)V", methodCache: &Preferences.exportNode_MethodID_34, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.IOException */ UnclassedObject( javaObject: throwable )
        }
    }

    open func exportNode( _ _arg0: /* java.io.OutputStream */ UnclassedObject? ) throws /* java.io.IOException, java.util.prefs.BackingStoreException */ {
        try exportNode( arg0: _arg0 )
    }

    /// public abstract void java.util.prefs.Preferences.exportSubtree(java.io.OutputStream) throws java.io.IOException,java.util.prefs.BackingStoreException

    private static var exportSubtree_MethodID_35: jmethodID?

    open func exportSubtree( arg0: /* java.io.OutputStream */ UnclassedObject? ) throws /* java.io.IOException, java.util.prefs.BackingStoreException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "exportSubtree", methodSig: "(Ljava/io/OutputStream;)V", methodCache: &Preferences.exportSubtree_MethodID_35, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.IOException */ UnclassedObject( javaObject: throwable )
        }
    }

    open func exportSubtree( _ _arg0: /* java.io.OutputStream */ UnclassedObject? ) throws /* java.io.IOException, java.util.prefs.BackingStoreException */ {
        try exportSubtree( arg0: _arg0 )
    }

    /// private static java.util.prefs.PreferencesFactory java.util.prefs.Preferences.factory1()

    /// public static java.util.prefs.Preferences java.util.prefs.Preferences.userNodeForPackage(java.lang.Class)

    private static var userNodeForPackage_MethodID_36: jmethodID?

    open class func userNodeForPackage( arg0: java_lang.Class? ) -> Preferences! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/prefs/Preferences", classCache: &PreferencesJNIClass, methodName: "userNodeForPackage", methodSig: "(Ljava/lang/Class;)Ljava/util/prefs/Preferences;", methodCache: &userNodeForPackage_MethodID_36, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Preferences( javaObject: __return ) : nil
    }

    open class func userNodeForPackage( _ _arg0: java_lang.Class? ) -> Preferences! {
        return userNodeForPackage( arg0: _arg0 )
    }

    /// public static java.util.prefs.Preferences java.util.prefs.Preferences.systemNodeForPackage(java.lang.Class)

    private static var systemNodeForPackage_MethodID_37: jmethodID?

    open class func systemNodeForPackage( arg0: java_lang.Class? ) -> Preferences! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/prefs/Preferences", classCache: &PreferencesJNIClass, methodName: "systemNodeForPackage", methodSig: "(Ljava/lang/Class;)Ljava/util/prefs/Preferences;", methodCache: &systemNodeForPackage_MethodID_37, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Preferences( javaObject: __return ) : nil
    }

    open class func systemNodeForPackage( _ _arg0: java_lang.Class? ) -> Preferences! {
        return systemNodeForPackage( arg0: _arg0 )
    }

    /// private static java.lang.String java.util.prefs.Preferences.nodeName(java.lang.Class)

    /// public static java.util.prefs.Preferences java.util.prefs.Preferences.systemRoot()

    private static var systemRoot_MethodID_38: jmethodID?

    open class func systemRoot() -> Preferences! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/prefs/Preferences", classCache: &PreferencesJNIClass, methodName: "systemRoot", methodSig: "()Ljava/util/prefs/Preferences;", methodCache: &systemRoot_MethodID_38, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Preferences( javaObject: __return ) : nil
    }


    /// public static void java.util.prefs.Preferences.importPreferences(java.io.InputStream) throws java.io.IOException,java.util.prefs.InvalidPreferencesFormatException

    private static var importPreferences_MethodID_39: jmethodID?

    open class func importPreferences( arg0: /* java.io.InputStream */ UnclassedObject? ) throws /* java.io.IOException, java.util.prefs.InvalidPreferencesFormatException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/util/prefs/Preferences", classCache: &PreferencesJNIClass, methodName: "importPreferences", methodSig: "(Ljava/io/InputStream;)V", methodCache: &importPreferences_MethodID_39, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.IOException */ UnclassedObject( javaObject: throwable )
        }
    }

    open class func importPreferences( _ _arg0: /* java.io.InputStream */ UnclassedObject? ) throws /* java.io.IOException, java.util.prefs.InvalidPreferencesFormatException */ {
        try importPreferences( arg0: _arg0 )
    }

}
