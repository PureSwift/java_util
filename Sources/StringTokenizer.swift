
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:07 GMT 2016 ///

/// class java.util.StringTokenizer ///

open class StringTokenizer: java_lang.JavaObject, Enumeration {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.StringTokenizer", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var StringTokenizerJNIClass: jclass?

    /// private int java.util.StringTokenizer.currentPosition

    /// private int java.util.StringTokenizer.newPosition

    /// private int java.util.StringTokenizer.maxPosition

    /// private java.lang.String java.util.StringTokenizer.str

    /// private java.lang.String java.util.StringTokenizer.delimiters

    /// private boolean java.util.StringTokenizer.retDelims

    /// private boolean java.util.StringTokenizer.delimsChanged

    /// private int java.util.StringTokenizer.maxDelimCodePoint

    /// private boolean java.util.StringTokenizer.hasSurrogates

    /// private int[] java.util.StringTokenizer.delimiterCodePoints

    /// public java.util.StringTokenizer(java.lang.String)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/StringTokenizer", classCache: &StringTokenizer.StringTokenizerJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &StringTokenizer.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.StringTokenizer(java.lang.String,java.lang.String,boolean)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: String?, arg1: String?, arg2: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/StringTokenizer", classCache: &StringTokenizer.StringTokenizerJNIClass, methodSig: "(Ljava/lang/String;Ljava/lang/String;Z)V", methodCache: &StringTokenizer.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: String?, _ _arg2: Bool ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.util.StringTokenizer(java.lang.String,java.lang.String)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: String?, arg1: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/StringTokenizer", classCache: &StringTokenizer.StringTokenizerJNIClass, methodSig: "(Ljava/lang/String;Ljava/lang/String;)V", methodCache: &StringTokenizer.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: String? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.util.StringTokenizer.hasMoreElements()

    private static var hasMoreElements_MethodID_4: jmethodID?

    open func hasMoreElements() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasMoreElements", methodSig: "()Z", methodCache: &StringTokenizer.hasMoreElements_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public java.lang.Object java.util.StringTokenizer.nextElement()

    private static var nextElement_MethodID_5: jmethodID?

    open func nextElement() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "nextElement", methodSig: "()Ljava/lang/Object;", methodCache: &StringTokenizer.nextElement_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public int java.util.StringTokenizer.countTokens()

    private static var countTokens_MethodID_6: jmethodID?

    open func countTokens() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "countTokens", methodSig: "()I", methodCache: &StringTokenizer.countTokens_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public boolean java.util.StringTokenizer.hasMoreTokens()

    private static var hasMoreTokens_MethodID_7: jmethodID?

    open func hasMoreTokens() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasMoreTokens", methodSig: "()Z", methodCache: &StringTokenizer.hasMoreTokens_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public java.lang.String java.util.StringTokenizer.nextToken()

    private static var nextToken_MethodID_8: jmethodID?

    open func nextToken() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "nextToken", methodSig: "()Ljava/lang/String;", methodCache: &StringTokenizer.nextToken_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public java.lang.String java.util.StringTokenizer.nextToken(java.lang.String)

    private static var nextToken_MethodID_9: jmethodID?

    open func nextToken( arg0: String? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "nextToken", methodSig: "(Ljava/lang/String;)Ljava/lang/String;", methodCache: &StringTokenizer.nextToken_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func nextToken( _ _arg0: String? ) -> String! {
        return nextToken( arg0: _arg0 )
    }

    /// private void java.util.StringTokenizer.setMaxDelimCodePoint()

    /// private int java.util.StringTokenizer.skipDelimiters(int)

    /// private int java.util.StringTokenizer.scanToken(int)

    /// private boolean java.util.StringTokenizer.isDelimiter(int)

}
