
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:49 GMT 2016 ///

/// interface java.util.concurrent.ScheduledExecutorService ///

public protocol ScheduledExecutorService: ExecutorService {

    /// public abstract java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)

    func schedule( arg0: java_lang.Runnable?, arg1: Int64, arg2: TimeUnit? ) -> ScheduledFuture!
    func schedule( _ _arg0: java_lang.Runnable?, _ _arg1: Int64, _ _arg2: TimeUnit? ) -> ScheduledFuture!

    /// public abstract java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledExecutorService.schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)

    func schedule( arg0: Callable?, arg1: Int64, arg2: TimeUnit? ) -> ScheduledFuture!
    func schedule( _ _arg0: Callable?, _ _arg1: Int64, _ _arg2: TimeUnit? ) -> ScheduledFuture!

    /// public abstract java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)

    func scheduleAtFixedRate( arg0: java_lang.Runnable?, arg1: Int64, arg2: Int64, arg3: TimeUnit? ) -> ScheduledFuture!
    func scheduleAtFixedRate( _ _arg0: java_lang.Runnable?, _ _arg1: Int64, _ _arg2: Int64, _ _arg3: TimeUnit? ) -> ScheduledFuture!

    /// public abstract java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)

    func scheduleWithFixedDelay( arg0: java_lang.Runnable?, arg1: Int64, arg2: Int64, arg3: TimeUnit? ) -> ScheduledFuture!
    func scheduleWithFixedDelay( _ _arg0: java_lang.Runnable?, _ _arg1: Int64, _ _arg2: Int64, _ _arg3: TimeUnit? ) -> ScheduledFuture!

}

open class ScheduledExecutorServiceForward: ExecutorServiceForward, ScheduledExecutorService {

    private static var ScheduledExecutorServiceJNIClass: jclass?

    /// public abstract java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)

    private static var schedule_MethodID_5: jmethodID?

    open func schedule( arg0: java_lang.Runnable?, arg1: Int64, arg2: TimeUnit? ) -> ScheduledFuture! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "schedule", methodSig: "(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", methodCache: &ScheduledExecutorServiceForward.schedule_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ScheduledFutureForward( javaObject: __return ) : nil
    }

    open func schedule( _ _arg0: java_lang.Runnable?, _ _arg1: Int64, _ _arg2: TimeUnit? ) -> ScheduledFuture! {
        return schedule( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledExecutorService.schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)

    private static var schedule_MethodID_6: jmethodID?

    open func schedule( arg0: Callable?, arg1: Int64, arg2: TimeUnit? ) -> ScheduledFuture! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "schedule", methodSig: "(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", methodCache: &ScheduledExecutorServiceForward.schedule_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ScheduledFutureForward( javaObject: __return ) : nil
    }

    open func schedule( _ _arg0: Callable?, _ _arg1: Int64, _ _arg2: TimeUnit? ) -> ScheduledFuture! {
        return schedule( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)

    private static var scheduleAtFixedRate_MethodID_7: jmethodID?

    open func scheduleAtFixedRate( arg0: java_lang.Runnable?, arg1: Int64, arg2: Int64, arg3: TimeUnit? ) -> ScheduledFuture! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "scheduleAtFixedRate", methodSig: "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", methodCache: &ScheduledExecutorServiceForward.scheduleAtFixedRate_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ScheduledFutureForward( javaObject: __return ) : nil
    }

    open func scheduleAtFixedRate( _ _arg0: java_lang.Runnable?, _ _arg1: Int64, _ _arg2: Int64, _ _arg3: TimeUnit? ) -> ScheduledFuture! {
        return scheduleAtFixedRate( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)

    private static var scheduleWithFixedDelay_MethodID_8: jmethodID?

    open func scheduleWithFixedDelay( arg0: java_lang.Runnable?, arg1: Int64, arg2: Int64, arg3: TimeUnit? ) -> ScheduledFuture! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "scheduleWithFixedDelay", methodSig: "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", methodCache: &ScheduledExecutorServiceForward.scheduleWithFixedDelay_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ScheduledFutureForward( javaObject: __return ) : nil
    }

    open func scheduleWithFixedDelay( _ _arg0: java_lang.Runnable?, _ _arg1: Int64, _ _arg2: Int64, _ _arg3: TimeUnit? ) -> ScheduledFuture! {
        return scheduleWithFixedDelay( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract void java.util.concurrent.ExecutorService.shutdown()

    private static var shutdown_MethodID_9: jmethodID?

    override open func shutdown() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "shutdown", methodSig: "()V", methodCache: &ScheduledExecutorServiceForward.shutdown_MethodID_9, args: &__args, locals: &__locals )
    }


    /// public abstract boolean java.util.concurrent.ExecutorService.awaitTermination(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var awaitTermination_MethodID_10: jmethodID?

    override open func awaitTermination( arg0: Int64, arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "awaitTermination", methodSig: "(JLjava/util/concurrent/TimeUnit;)Z", methodCache: &ScheduledExecutorServiceForward.awaitTermination_MethodID_10, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func awaitTermination( _ _arg0: Int64, _ _arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        return try awaitTermination( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.util.concurrent.Future java.util.concurrent.ExecutorService.submit(java.lang.Runnable,java.lang.Object)

    private static var submit_MethodID_11: jmethodID?

    override open func submit( arg0: java_lang.Runnable?, arg1: java_lang.JavaObject? ) -> Future! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "submit", methodSig: "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;", methodCache: &ScheduledExecutorServiceForward.submit_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FutureForward( javaObject: __return ) : nil
    }

    override open func submit( _ _arg0: java_lang.Runnable?, _ _arg1: java_lang.JavaObject? ) -> Future! {
        return submit( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.util.concurrent.Future java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable)

    private static var submit_MethodID_12: jmethodID?

    override open func submit( arg0: Callable? ) -> Future! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "submit", methodSig: "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;", methodCache: &ScheduledExecutorServiceForward.submit_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FutureForward( javaObject: __return ) : nil
    }

    override open func submit( _ _arg0: Callable? ) -> Future! {
        return submit( arg0: _arg0 )
    }

    /// public abstract java.util.concurrent.Future java.util.concurrent.ExecutorService.submit(java.lang.Runnable)

    private static var submit_MethodID_13: jmethodID?

    override open func submit( arg0: java_lang.Runnable? ) -> Future! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "submit", methodSig: "(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;", methodCache: &ScheduledExecutorServiceForward.submit_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FutureForward( javaObject: __return ) : nil
    }

    override open func submit( _ _arg0: java_lang.Runnable? ) -> Future! {
        return submit( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.util.concurrent.ExecutorService.invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException,java.util.concurrent.ExecutionException,java.util.concurrent.TimeoutException

    private static var invokeAny_MethodID_14: jmethodID?

    override open func invokeAny( arg0: Collection?, arg1: Int64, arg2: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "invokeAny", methodSig: "(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", methodCache: &ScheduledExecutorServiceForward.invokeAny_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    override open func invokeAny( _ _arg0: Collection?, _ _arg1: Int64, _ _arg2: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_lang.JavaObject! {
        return try invokeAny( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract java.lang.Object java.util.concurrent.ExecutorService.invokeAny(java.util.Collection) throws java.lang.InterruptedException,java.util.concurrent.ExecutionException

    private static var invokeAny_MethodID_15: jmethodID?

    override open func invokeAny( arg0: Collection? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "invokeAny", methodSig: "(Ljava/util/Collection;)Ljava/lang/Object;", methodCache: &ScheduledExecutorServiceForward.invokeAny_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    override open func invokeAny( _ _arg0: Collection? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException */ -> java_lang.JavaObject! {
        return try invokeAny( arg0: _arg0 )
    }

    /// public abstract java.util.List java.util.concurrent.ExecutorService.invokeAll(java.util.Collection) throws java.lang.InterruptedException

    private static var invokeAll_MethodID_16: jmethodID?

    override open func invokeAll( arg0: Collection? ) throws /* java.lang.InterruptedException */ -> List! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "invokeAll", methodSig: "(Ljava/util/Collection;)Ljava/util/List;", methodCache: &ScheduledExecutorServiceForward.invokeAll_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? ListForward( javaObject: __return ) : nil
    }

    override open func invokeAll( _ _arg0: Collection? ) throws /* java.lang.InterruptedException */ -> List! {
        return try invokeAll( arg0: _arg0 )
    }

    /// public abstract java.util.List java.util.concurrent.ExecutorService.invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var invokeAll_MethodID_17: jmethodID?

    override open func invokeAll( arg0: Collection?, arg1: Int64, arg2: TimeUnit? ) throws /* java.lang.InterruptedException */ -> List! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "invokeAll", methodSig: "(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/util/List;", methodCache: &ScheduledExecutorServiceForward.invokeAll_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? ListForward( javaObject: __return ) : nil
    }

    override open func invokeAll( _ _arg0: Collection?, _ _arg1: Int64, _ _arg2: TimeUnit? ) throws /* java.lang.InterruptedException */ -> List! {
        return try invokeAll( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract java.util.List java.util.concurrent.ExecutorService.shutdownNow()

    private static var shutdownNow_MethodID_18: jmethodID?

    override open func shutdownNow() -> List! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "shutdownNow", methodSig: "()Ljava/util/List;", methodCache: &ScheduledExecutorServiceForward.shutdownNow_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ListForward( javaObject: __return ) : nil
    }


    /// public abstract boolean java.util.concurrent.ExecutorService.isShutdown()

    private static var isShutdown_MethodID_19: jmethodID?

    override open func isShutdown() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isShutdown", methodSig: "()Z", methodCache: &ScheduledExecutorServiceForward.isShutdown_MethodID_19, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract boolean java.util.concurrent.ExecutorService.isTerminated()

    private static var isTerminated_MethodID_20: jmethodID?

    override open func isTerminated() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isTerminated", methodSig: "()Z", methodCache: &ScheduledExecutorServiceForward.isTerminated_MethodID_20, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract void java.util.concurrent.Executor.execute(java.lang.Runnable)

    private static var execute_MethodID_21: jmethodID?

    override open func execute( arg0: java_lang.Runnable? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "execute", methodSig: "(Ljava/lang/Runnable;)V", methodCache: &ScheduledExecutorServiceForward.execute_MethodID_21, args: &__args, locals: &__locals )
    }

    override open func execute( _ _arg0: java_lang.Runnable? ) {
        execute( arg0: _arg0 )
    }

}


