
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:59 GMT 2016 ///

/// class java.util.ServiceLoader ///

open class ServiceLoader: java_lang.JavaObject, java_lang.Iterable {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.ServiceLoader", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ServiceLoaderJNIClass: jclass?

    /// private static final java.lang.String java.util.ServiceLoader.PREFIX

    /// private java.lang.Class java.util.ServiceLoader.service

    /// private java.lang.ClassLoader java.util.ServiceLoader.loader

    /// private java.util.LinkedHashMap java.util.ServiceLoader.providers

    /// private java.util.ServiceLoader$LazyIterator java.util.ServiceLoader.lookupIterator

    /// private java.util.ServiceLoader(java.lang.Class,java.lang.ClassLoader)

    /// public java.lang.String java.util.ServiceLoader.toString()

    /// static void java.util.ServiceLoader.access$100(java.lang.Class,java.lang.String,java.lang.Throwable) throws java.util.ServiceConfigurationError

    /// public java.util.Iterator java.util.ServiceLoader.iterator()

    private static var iterator_MethodID_1: jmethodID?

    open func iterator() -> Iterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "iterator", methodSig: "()Ljava/util/Iterator;", methodCache: &ServiceLoader.iterator_MethodID_1, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IteratorForward( javaObject: __return ) : nil
    }


    /// static java.util.Iterator java.util.ServiceLoader.access$200(java.util.ServiceLoader,java.lang.Class,java.net.URL) throws java.util.ServiceConfigurationError

    /// public static java.util.ServiceLoader java.util.ServiceLoader.load(java.lang.Class,java.lang.ClassLoader)

    private static var load_MethodID_2: jmethodID?

    open class func load( arg0: java_lang.Class?, arg1: java_lang.ClassLoader? ) -> ServiceLoader! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/ServiceLoader", classCache: &ServiceLoaderJNIClass, methodName: "load", methodSig: "(Ljava/lang/Class;Ljava/lang/ClassLoader;)Ljava/util/ServiceLoader;", methodCache: &load_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ServiceLoader( javaObject: __return ) : nil
    }

    open class func load( _ _arg0: java_lang.Class?, _ _arg1: java_lang.ClassLoader? ) -> ServiceLoader! {
        return load( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.util.ServiceLoader java.util.ServiceLoader.load(java.lang.Class)

    private static var load_MethodID_3: jmethodID?

    open class func load( arg0: java_lang.Class? ) -> ServiceLoader! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/ServiceLoader", classCache: &ServiceLoaderJNIClass, methodName: "load", methodSig: "(Ljava/lang/Class;)Ljava/util/ServiceLoader;", methodCache: &load_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ServiceLoader( javaObject: __return ) : nil
    }

    open class func load( _ _arg0: java_lang.Class? ) -> ServiceLoader! {
        return load( arg0: _arg0 )
    }

    /// static void java.util.ServiceLoader.access$300(java.lang.Class,java.lang.String) throws java.util.ServiceConfigurationError

    /// static java.util.LinkedHashMap java.util.ServiceLoader.access$400(java.util.ServiceLoader)

    /// static java.util.ServiceLoader$LazyIterator java.util.ServiceLoader.access$500(java.util.ServiceLoader)

    /// private java.util.Iterator java.util.ServiceLoader.parse(java.lang.Class,java.net.URL) throws java.util.ServiceConfigurationError

    /// public static java.util.ServiceLoader java.util.ServiceLoader.loadInstalled(java.lang.Class)

    private static var loadInstalled_MethodID_4: jmethodID?

    open class func loadInstalled( arg0: java_lang.Class? ) -> ServiceLoader! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/ServiceLoader", classCache: &ServiceLoaderJNIClass, methodName: "loadInstalled", methodSig: "(Ljava/lang/Class;)Ljava/util/ServiceLoader;", methodCache: &loadInstalled_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ServiceLoader( javaObject: __return ) : nil
    }

    open class func loadInstalled( _ _arg0: java_lang.Class? ) -> ServiceLoader! {
        return loadInstalled( arg0: _arg0 )
    }

    /// public void java.util.ServiceLoader.reload()

    private static var reload_MethodID_5: jmethodID?

    open func reload() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reload", methodSig: "()V", methodCache: &ServiceLoader.reload_MethodID_5, args: &__args, locals: &__locals )
    }


    /// private static void java.util.ServiceLoader.fail(java.lang.Class,java.net.URL,int,java.lang.String) throws java.util.ServiceConfigurationError

    /// private static void java.util.ServiceLoader.fail(java.lang.Class,java.lang.String) throws java.util.ServiceConfigurationError

    /// private static void java.util.ServiceLoader.fail(java.lang.Class,java.lang.String,java.lang.Throwable) throws java.util.ServiceConfigurationError

    /// private int java.util.ServiceLoader.parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List) throws java.io.IOException,java.util.ServiceConfigurationError

}
