
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:52 GMT 2016 ///

/// class java.util.concurrent.locks.LockSupport ///

open class LockSupport: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.locks.LockSupport", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var LockSupportJNIClass: jclass?

    /// private static final sun.misc.Unsafe java.util.concurrent.locks.LockSupport.unsafe

    /// private static final long java.util.concurrent.locks.LockSupport.parkBlockerOffset

    /// private java.util.concurrent.locks.LockSupport()

    /// public static void java.util.concurrent.locks.LockSupport.park()

    private static var park_MethodID_1: jmethodID?

    open class func park() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallStaticVoidMethod( className: "java/util/concurrent/locks/LockSupport", classCache: &LockSupportJNIClass, methodName: "park", methodSig: "()V", methodCache: &park_MethodID_1, args: &__args, locals: &__locals )
    }


    /// public static void java.util.concurrent.locks.LockSupport.park(java.lang.Object)

    private static var park_MethodID_2: jmethodID?

    open class func park( arg0: java_lang.JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/util/concurrent/locks/LockSupport", classCache: &LockSupportJNIClass, methodName: "park", methodSig: "(Ljava/lang/Object;)V", methodCache: &park_MethodID_2, args: &__args, locals: &__locals )
    }

    open class func park( _ _arg0: java_lang.JavaObject? ) {
        park( arg0: _arg0 )
    }

    /// public static void java.util.concurrent.locks.LockSupport.unpark(java.lang.Thread)

    private static var unpark_MethodID_3: jmethodID?

    open class func unpark( arg0: java_lang.Thread? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/util/concurrent/locks/LockSupport", classCache: &LockSupportJNIClass, methodName: "unpark", methodSig: "(Ljava/lang/Thread;)V", methodCache: &unpark_MethodID_3, args: &__args, locals: &__locals )
    }

    open class func unpark( _ _arg0: java_lang.Thread? ) {
        unpark( arg0: _arg0 )
    }

    /// public static void java.util.concurrent.locks.LockSupport.parkNanos(long)

    private static var parkNanos_MethodID_4: jmethodID?

    open class func parkNanos( arg0: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/util/concurrent/locks/LockSupport", classCache: &LockSupportJNIClass, methodName: "parkNanos", methodSig: "(J)V", methodCache: &parkNanos_MethodID_4, args: &__args, locals: &__locals )
    }

    open class func parkNanos( _ _arg0: Int64 ) {
        parkNanos( arg0: _arg0 )
    }

    /// public static void java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object,long)

    private static var parkNanos_MethodID_5: jmethodID?

    open class func parkNanos( arg0: java_lang.JavaObject?, arg1: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/util/concurrent/locks/LockSupport", classCache: &LockSupportJNIClass, methodName: "parkNanos", methodSig: "(Ljava/lang/Object;J)V", methodCache: &parkNanos_MethodID_5, args: &__args, locals: &__locals )
    }

    open class func parkNanos( _ _arg0: java_lang.JavaObject?, _ _arg1: Int64 ) {
        parkNanos( arg0: _arg0, arg1: _arg1 )
    }

    /// public static void java.util.concurrent.locks.LockSupport.parkUntil(java.lang.Object,long)

    private static var parkUntil_MethodID_6: jmethodID?

    open class func parkUntil( arg0: java_lang.JavaObject?, arg1: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/util/concurrent/locks/LockSupport", classCache: &LockSupportJNIClass, methodName: "parkUntil", methodSig: "(Ljava/lang/Object;J)V", methodCache: &parkUntil_MethodID_6, args: &__args, locals: &__locals )
    }

    open class func parkUntil( _ _arg0: java_lang.JavaObject?, _ _arg1: Int64 ) {
        parkUntil( arg0: _arg0, arg1: _arg1 )
    }

    /// public static void java.util.concurrent.locks.LockSupport.parkUntil(long)

    private static var parkUntil_MethodID_7: jmethodID?

    open class func parkUntil( arg0: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/util/concurrent/locks/LockSupport", classCache: &LockSupportJNIClass, methodName: "parkUntil", methodSig: "(J)V", methodCache: &parkUntil_MethodID_7, args: &__args, locals: &__locals )
    }

    open class func parkUntil( _ _arg0: Int64 ) {
        parkUntil( arg0: _arg0 )
    }

    /// private static void java.util.concurrent.locks.LockSupport.setBlocker(java.lang.Thread,java.lang.Object)

    /// public static java.lang.Object java.util.concurrent.locks.LockSupport.getBlocker(java.lang.Thread)

    private static var getBlocker_MethodID_8: jmethodID?

    open class func getBlocker( arg0: java_lang.Thread? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/locks/LockSupport", classCache: &LockSupportJNIClass, methodName: "getBlocker", methodSig: "(Ljava/lang/Thread;)Ljava/lang/Object;", methodCache: &getBlocker_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open class func getBlocker( _ _arg0: java_lang.Thread? ) -> java_lang.JavaObject! {
        return getBlocker( arg0: _arg0 )
    }

}
