
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:47 GMT 2016 ///

/// class java.util.concurrent.ConcurrentSkipListSet ///

open class ConcurrentSkipListSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.ConcurrentSkipListSet", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ConcurrentSkipListSetJNIClass: jclass?

    /// private static final long java.util.concurrent.ConcurrentSkipListSet.serialVersionUID

    /// private final java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentSkipListSet.m

    /// private static final sun.misc.Unsafe java.util.concurrent.ConcurrentSkipListSet.unsafe

    /// private static final long java.util.concurrent.ConcurrentSkipListSet.mapOffset

    /// public java.util.concurrent.ConcurrentSkipListSet()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/ConcurrentSkipListSet", classCache: &ConcurrentSkipListSet.ConcurrentSkipListSetJNIClass, methodSig: "()V", methodCache: &ConcurrentSkipListSet.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.concurrent.ConcurrentSkipListSet(java.util.Comparator)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: JavaComparator? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/ConcurrentSkipListSet", classCache: &ConcurrentSkipListSet.ConcurrentSkipListSetJNIClass, methodSig: "(Ljava/util/Comparator;)V", methodCache: &ConcurrentSkipListSet.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: JavaComparator? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.concurrent.ConcurrentSkipListSet(java.util.Collection)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: Collection? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/ConcurrentSkipListSet", classCache: &ConcurrentSkipListSet.ConcurrentSkipListSetJNIClass, methodSig: "(Ljava/util/Collection;)V", methodCache: &ConcurrentSkipListSet.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Collection? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.concurrent.ConcurrentSkipListSet(java.util.SortedSet)

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: SortedSet? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/ConcurrentSkipListSet", classCache: &ConcurrentSkipListSet.ConcurrentSkipListSetJNIClass, methodSig: "(Ljava/util/SortedSet;)V", methodCache: &ConcurrentSkipListSet.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: SortedSet? ) {
        self.init( arg0: _arg0 )
    }

    /// java.util.concurrent.ConcurrentSkipListSet(java.util.concurrent.ConcurrentNavigableMap)

    /// public boolean java.util.concurrent.ConcurrentSkipListSet.add(java.lang.Object)

    /// public boolean java.util.concurrent.ConcurrentSkipListSet.equals(java.lang.Object)

    /// public java.util.concurrent.ConcurrentSkipListSet java.util.concurrent.ConcurrentSkipListSet.clone()

    private static var clone_MethodID_5: jmethodID?

    override open func clone() -> ConcurrentSkipListSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/util/concurrent/ConcurrentSkipListSet;", methodCache: &ConcurrentSkipListSet.clone_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ConcurrentSkipListSet( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListSet.clone() throws java.lang.CloneNotSupportedException

    private static var clone_MethodID_6: jmethodID?

    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &ConcurrentSkipListSet.clone_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.CloneNotSupportedException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public void java.util.concurrent.ConcurrentSkipListSet.clear()

    /// public boolean java.util.concurrent.ConcurrentSkipListSet.isEmpty()

    /// public boolean java.util.concurrent.ConcurrentSkipListSet.contains(java.lang.Object)

    /// public int java.util.concurrent.ConcurrentSkipListSet.size()

    /// public java.util.Iterator java.util.concurrent.ConcurrentSkipListSet.iterator()

    /// public boolean java.util.concurrent.ConcurrentSkipListSet.remove(java.lang.Object)

    /// public boolean java.util.concurrent.ConcurrentSkipListSet.removeAll(java.util.Collection)

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListSet.floor(java.lang.Object)

    private static var floor_MethodID_7: jmethodID?

    open func floor( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "floor", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListSet.floor_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func floor( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return floor( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListSet.pollFirst()

    private static var pollFirst_MethodID_8: jmethodID?

    open func pollFirst() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "pollFirst", methodSig: "()Ljava/lang/Object;", methodCache: &ConcurrentSkipListSet.pollFirst_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListSet.pollLast()

    private static var pollLast_MethodID_9: jmethodID?

    open func pollLast() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "pollLast", methodSig: "()Ljava/lang/Object;", methodCache: &ConcurrentSkipListSet.pollLast_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public java.util.Iterator java.util.concurrent.ConcurrentSkipListSet.descendingIterator()

    private static var descendingIterator_MethodID_10: jmethodID?

    open func descendingIterator() -> Iterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "descendingIterator", methodSig: "()Ljava/util/Iterator;", methodCache: &ConcurrentSkipListSet.descendingIterator_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IteratorForward( javaObject: __return ) : nil
    }


    /// public java.util.Comparator java.util.concurrent.ConcurrentSkipListSet.comparator()

    private static var comparator_MethodID_11: jmethodID?

    open func comparator() -> JavaComparator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "comparator", methodSig: "()Ljava/util/Comparator;", methodCache: &ConcurrentSkipListSet.comparator_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListSet.last()

    private static var last_MethodID_12: jmethodID?

    open func last() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "last", methodSig: "()Ljava/lang/Object;", methodCache: &ConcurrentSkipListSet.last_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListSet.first()

    private static var first_MethodID_13: jmethodID?

    open func first() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "first", methodSig: "()Ljava/lang/Object;", methodCache: &ConcurrentSkipListSet.first_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public java.util.NavigableSet java.util.concurrent.ConcurrentSkipListSet.subSet(java.lang.Object,boolean,java.lang.Object,boolean)

    private static var subSet_MethodID_14: jmethodID?

    open func subSet( arg0: java_lang.JavaObject?, arg1: Bool, arg2: java_lang.JavaObject?, arg3: Bool ) -> NavigableSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subSet", methodSig: "(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;", methodCache: &ConcurrentSkipListSet.subSet_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }

    open func subSet( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool, _ _arg2: java_lang.JavaObject?, _ _arg3: Bool ) -> NavigableSet! {
        return subSet( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.util.SortedSet java.util.concurrent.ConcurrentSkipListSet.subSet(java.lang.Object,java.lang.Object)

    private static var subSet_MethodID_15: jmethodID?

    open func subSet( arg0: java_lang.JavaObject?, arg1: java_lang.JavaObject? ) -> SortedSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subSet", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;", methodCache: &ConcurrentSkipListSet.subSet_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SortedSetForward( javaObject: __return ) : nil
    }

    open func subSet( _ _arg0: java_lang.JavaObject?, _ _arg1: java_lang.JavaObject? ) -> SortedSet! {
        return subSet( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.NavigableSet java.util.concurrent.ConcurrentSkipListSet.subSet(java.lang.Object,java.lang.Object)

    /// public java.util.SortedSet java.util.concurrent.ConcurrentSkipListSet.headSet(java.lang.Object)

    private static var headSet_MethodID_16: jmethodID?

    open func headSet( arg0: java_lang.JavaObject? ) -> SortedSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "headSet", methodSig: "(Ljava/lang/Object;)Ljava/util/SortedSet;", methodCache: &ConcurrentSkipListSet.headSet_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SortedSetForward( javaObject: __return ) : nil
    }

    open func headSet( _ _arg0: java_lang.JavaObject? ) -> SortedSet! {
        return headSet( arg0: _arg0 )
    }

    /// public java.util.NavigableSet java.util.concurrent.ConcurrentSkipListSet.headSet(java.lang.Object)

    /// public java.util.NavigableSet java.util.concurrent.ConcurrentSkipListSet.headSet(java.lang.Object,boolean)

    private static var headSet_MethodID_17: jmethodID?

    open func headSet( arg0: java_lang.JavaObject?, arg1: Bool ) -> NavigableSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "headSet", methodSig: "(Ljava/lang/Object;Z)Ljava/util/NavigableSet;", methodCache: &ConcurrentSkipListSet.headSet_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }

    open func headSet( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool ) -> NavigableSet! {
        return headSet( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.NavigableSet java.util.concurrent.ConcurrentSkipListSet.tailSet(java.lang.Object,boolean)

    private static var tailSet_MethodID_18: jmethodID?

    open func tailSet( arg0: java_lang.JavaObject?, arg1: Bool ) -> NavigableSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "tailSet", methodSig: "(Ljava/lang/Object;Z)Ljava/util/NavigableSet;", methodCache: &ConcurrentSkipListSet.tailSet_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }

    open func tailSet( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool ) -> NavigableSet! {
        return tailSet( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.SortedSet java.util.concurrent.ConcurrentSkipListSet.tailSet(java.lang.Object)

    private static var tailSet_MethodID_19: jmethodID?

    open func tailSet( arg0: java_lang.JavaObject? ) -> SortedSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "tailSet", methodSig: "(Ljava/lang/Object;)Ljava/util/SortedSet;", methodCache: &ConcurrentSkipListSet.tailSet_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SortedSetForward( javaObject: __return ) : nil
    }

    open func tailSet( _ _arg0: java_lang.JavaObject? ) -> SortedSet! {
        return tailSet( arg0: _arg0 )
    }

    /// public java.util.NavigableSet java.util.concurrent.ConcurrentSkipListSet.tailSet(java.lang.Object)

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListSet.lower(java.lang.Object)

    private static var lower_MethodID_20: jmethodID?

    open func lower( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "lower", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListSet.lower_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func lower( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return lower( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListSet.ceiling(java.lang.Object)

    private static var ceiling_MethodID_21: jmethodID?

    open func ceiling( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "ceiling", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListSet.ceiling_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func ceiling( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return ceiling( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListSet.higher(java.lang.Object)

    private static var higher_MethodID_22: jmethodID?

    open func higher( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "higher", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListSet.higher_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func higher( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return higher( arg0: _arg0 )
    }

    /// public java.util.NavigableSet java.util.concurrent.ConcurrentSkipListSet.descendingSet()

    private static var descendingSet_MethodID_23: jmethodID?

    open func descendingSet() -> NavigableSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "descendingSet", methodSig: "()Ljava/util/NavigableSet;", methodCache: &ConcurrentSkipListSet.descendingSet_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }


    /// private void java.util.concurrent.ConcurrentSkipListSet.setMap(java.util.concurrent.ConcurrentNavigableMap)

    /// In declared protocol but not defined.. ///

    /// public abstract int java.util.Collection.size()

    /// public abstract java.util.Iterator java.lang.Iterable.iterator()

    /// public abstract boolean java.util.Collection.retainAll(java.util.Collection)

    /// public abstract void java.util.Collection.clear()

    /// public abstract boolean java.util.Collection.remove(java.lang.Object)

    /// public abstract java.lang.Object[] java.util.Collection.toArray(java.lang.Object[])

    /// public abstract boolean java.util.Collection.add(java.lang.Object)

    /// public abstract boolean java.util.Collection.addAll(java.util.Collection)

    /// public abstract boolean java.util.Collection.removeAll(java.util.Collection)

    /// public abstract boolean java.util.Collection.contains(java.lang.Object)

    /// public abstract boolean java.util.Collection.containsAll(java.util.Collection)

    /// public abstract java.lang.Object[] java.util.Collection.toArray()

    /// public abstract boolean java.util.Collection.equals(java.lang.Object)

    /// public abstract boolean java.util.Collection.isEmpty()

    /// public abstract int java.util.Collection.hashCode()

}
