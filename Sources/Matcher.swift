
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.regex.Matcher ///

open class Matcher: java_swift.JavaObject, MatchResult {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var MatcherJNIClass: jclass?

    /// java.util.regex.Pattern java.util.regex.Matcher.parentPattern

    /// int[] java.util.regex.Matcher.groups

    /// int java.util.regex.Matcher.from

    /// int java.util.regex.Matcher.to

    /// int java.util.regex.Matcher.lookbehindTo

    /// java.lang.CharSequence java.util.regex.Matcher.text

    /// static final int java.util.regex.Matcher.ENDANCHOR

    /// static final int java.util.regex.Matcher.NOANCHOR

    /// int java.util.regex.Matcher.acceptMode

    /// int java.util.regex.Matcher.first

    /// int java.util.regex.Matcher.last

    /// int java.util.regex.Matcher.oldLast

    /// int java.util.regex.Matcher.lastAppendPosition

    /// int[] java.util.regex.Matcher.locals

    /// boolean java.util.regex.Matcher.hitEnd

    /// boolean java.util.regex.Matcher.requireEnd

    /// boolean java.util.regex.Matcher.transparentBounds

    /// boolean java.util.regex.Matcher.anchoringBounds

    /// java.util.regex.Matcher()

    /// java.util.regex.Matcher(java.util.regex.Pattern,java.lang.CharSequence)

    /// public java.lang.String java.util.regex.Matcher.group(int)

    private static var group_MethodID_1: jmethodID?

    open func group( group: Int ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: group, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "group", methodSig: "(I)Ljava/lang/String;", methodCache: &Matcher.group_MethodID_1, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }

    open func group( _ _group: Int ) -> String! {
        return group( group: _group )
    }

    /// public java.lang.String java.util.regex.Matcher.group(java.lang.String)

    private static var group_MethodID_2: jmethodID?

    open func group( name: String? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "group", methodSig: "(Ljava/lang/String;)Ljava/lang/String;", methodCache: &Matcher.group_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }

    open func group( _ _name: String? ) -> String! {
        return group( name: _name )
    }

    /// public java.lang.String java.util.regex.Matcher.group()

    private static var group_MethodID_3: jmethodID?

    open func group() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "group", methodSig: "()Ljava/lang/String;", methodCache: &Matcher.group_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }


    /// public java.lang.String java.util.regex.Matcher.toString()

    /// public int java.util.regex.Matcher.end()

    private static var end_MethodID_4: jmethodID?

    open func end() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "end", methodSig: "()I", methodCache: &Matcher.end_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public int java.util.regex.Matcher.end(int)

    private static var end_MethodID_5: jmethodID?

    open func end( group: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: group, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "end", methodSig: "(I)I", methodCache: &Matcher.end_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    open func end( _ _group: Int ) -> Int {
        return end( group: _group )
    }

    /// public int java.util.regex.Matcher.end(java.lang.String)

    private static var end_MethodID_6: jmethodID?

    open func end( name: String? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "end", methodSig: "(Ljava/lang/String;)I", methodCache: &Matcher.end_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    open func end( _ _name: String? ) -> Int {
        return end( name: _name )
    }

    /// char java.util.regex.Matcher.charAt(int)

    /// public int java.util.regex.Matcher.start()

    private static var start_MethodID_7: jmethodID?

    open func start() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "start", methodSig: "()I", methodCache: &Matcher.start_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public int java.util.regex.Matcher.start(int)

    private static var start_MethodID_8: jmethodID?

    open func start( group: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: group, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "start", methodSig: "(I)I", methodCache: &Matcher.start_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    open func start( _ _group: Int ) -> Int {
        return start( group: _group )
    }

    /// public int java.util.regex.Matcher.start(java.lang.String)

    private static var start_MethodID_9: jmethodID?

    open func start( name: String? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "start", methodSig: "(Ljava/lang/String;)I", methodCache: &Matcher.start_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    open func start( _ _name: String? ) -> Int {
        return start( name: _name )
    }

    /// public boolean java.util.regex.Matcher.matches()

    private static var matches_MethodID_10: jmethodID?

    open func matches() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "matches", methodSig: "()Z", methodCache: &Matcher.matches_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public java.lang.String java.util.regex.Matcher.replaceFirst(java.lang.String)

    private static var replaceFirst_MethodID_11: jmethodID?

    open func replaceFirst( replacement: String? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: replacement, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "replaceFirst", methodSig: "(Ljava/lang/String;)Ljava/lang/String;", methodCache: &Matcher.replaceFirst_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }

    open func replaceFirst( _ _replacement: String? ) -> String! {
        return replaceFirst( replacement: _replacement )
    }

    /// public java.lang.String java.util.regex.Matcher.replaceAll(java.lang.String)

    private static var replaceAll_MethodID_12: jmethodID?

    open func replaceAll( replacement: String? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: replacement, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "replaceAll", methodSig: "(Ljava/lang/String;)Ljava/lang/String;", methodCache: &Matcher.replaceAll_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }

    open func replaceAll( _ _replacement: String? ) -> String! {
        return replaceAll( replacement: _replacement )
    }

    /// public static java.lang.String java.util.regex.Matcher.quoteReplacement(java.lang.String)

    private static var quoteReplacement_MethodID_13: jmethodID?

    open class func quoteReplacement( s: String? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/regex/Matcher", classCache: &MatcherJNIClass, methodName: "quoteReplacement", methodSig: "(Ljava/lang/String;)Ljava/lang/String;", methodCache: &quoteReplacement_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }

    open class func quoteReplacement( _ _s: String? ) -> String! {
        return quoteReplacement( s: _s )
    }

    /// public boolean java.util.regex.Matcher.find(int)

    private static var find_MethodID_14: jmethodID?

    open func find( start: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: start, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "find", methodSig: "(I)Z", methodCache: &Matcher.find_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    open func find( _ _start: Int ) -> Bool {
        return find( start: _start )
    }

    /// public boolean java.util.regex.Matcher.find()

    private static var find_MethodID_15: jmethodID?

    open func find() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "find", methodSig: "()Z", methodCache: &Matcher.find_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// boolean java.util.regex.Matcher.match(int,int)

    /// public java.util.regex.Matcher java.util.regex.Matcher.reset(java.lang.CharSequence)

    private static var reset_MethodID_16: jmethodID?

    open func reset( input: java_lang.CharSequence? ) -> Matcher! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: input, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "reset", methodSig: "(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;", methodCache: &Matcher.reset_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Matcher( javaObject: __return ) : nil
    }

    open func reset( _ _input: java_lang.CharSequence? ) -> Matcher! {
        return reset( input: _input )
    }

    /// public java.util.regex.Matcher java.util.regex.Matcher.reset()

    private static var reset_MethodID_17: jmethodID?

    open func reset() -> Matcher! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "reset", methodSig: "()Ljava/util/regex/Matcher;", methodCache: &Matcher.reset_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Matcher( javaObject: __return ) : nil
    }


    /// boolean java.util.regex.Matcher.search(int)

    /// public java.util.regex.Matcher java.util.regex.Matcher.appendReplacement(java.lang.StringBuffer,java.lang.String)

    private static var appendReplacement_MethodID_18: jmethodID?

    open func appendReplacement( sb: java_lang.StringBuffer?, replacement: String? ) -> Matcher! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: sb, locals: &__locals )
        __args[1] = JNIType.toJava( value: replacement, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "appendReplacement", methodSig: "(Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/util/regex/Matcher;", methodCache: &Matcher.appendReplacement_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Matcher( javaObject: __return ) : nil
    }

    open func appendReplacement( _ _sb: java_lang.StringBuffer?, _ _replacement: String? ) -> Matcher! {
        return appendReplacement( sb: _sb, replacement: _replacement )
    }

    /// public java.lang.StringBuffer java.util.regex.Matcher.appendTail(java.lang.StringBuffer)

    private static var appendTail_MethodID_19: jmethodID?

    open func appendTail( sb: java_lang.StringBuffer? ) -> java_lang.StringBuffer! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: sb, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "appendTail", methodSig: "(Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;", methodCache: &Matcher.appendTail_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.StringBuffer( javaObject: __return ) : nil
    }

    open func appendTail( _ _sb: java_lang.StringBuffer? ) -> java_lang.StringBuffer! {
        return appendTail( sb: _sb )
    }

    /// public java.util.regex.Pattern java.util.regex.Matcher.pattern()

    private static var pattern_MethodID_20: jmethodID?

    open func pattern() -> Pattern! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "pattern", methodSig: "()Ljava/util/regex/Pattern;", methodCache: &Matcher.pattern_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Pattern( javaObject: __return ) : nil
    }


    /// public boolean java.util.regex.Matcher.hitEnd()

    private static var hitEnd_MethodID_21: jmethodID?

    open func hitEnd() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hitEnd", methodSig: "()Z", methodCache: &Matcher.hitEnd_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public boolean java.util.regex.Matcher.requireEnd()

    private static var requireEnd_MethodID_22: jmethodID?

    open func requireEnd() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "requireEnd", methodSig: "()Z", methodCache: &Matcher.requireEnd_MethodID_22, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public java.util.regex.MatchResult java.util.regex.Matcher.toMatchResult()

    private static var toMatchResult_MethodID_23: jmethodID?

    open func toMatchResult() -> MatchResult! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toMatchResult", methodSig: "()Ljava/util/regex/MatchResult;", methodCache: &Matcher.toMatchResult_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? MatchResultForward( javaObject: __return ) : nil
    }


    /// public java.util.regex.Matcher java.util.regex.Matcher.usePattern(java.util.regex.Pattern)

    private static var usePattern_MethodID_24: jmethodID?

    open func usePattern( newPattern: Pattern? ) -> Matcher! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: newPattern, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "usePattern", methodSig: "(Ljava/util/regex/Pattern;)Ljava/util/regex/Matcher;", methodCache: &Matcher.usePattern_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Matcher( javaObject: __return ) : nil
    }

    open func usePattern( _ _newPattern: Pattern? ) -> Matcher! {
        return usePattern( newPattern: _newPattern )
    }

    /// public int java.util.regex.Matcher.groupCount()

    private static var groupCount_MethodID_25: jmethodID?

    open func groupCount() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "groupCount", methodSig: "()I", methodCache: &Matcher.groupCount_MethodID_25, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public boolean java.util.regex.Matcher.lookingAt()

    private static var lookingAt_MethodID_26: jmethodID?

    open func lookingAt() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "lookingAt", methodSig: "()Z", methodCache: &Matcher.lookingAt_MethodID_26, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public int java.util.regex.Matcher.regionStart()

    private static var regionStart_MethodID_27: jmethodID?

    open func regionStart() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "regionStart", methodSig: "()I", methodCache: &Matcher.regionStart_MethodID_27, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public int java.util.regex.Matcher.regionEnd()

    private static var regionEnd_MethodID_28: jmethodID?

    open func regionEnd() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "regionEnd", methodSig: "()I", methodCache: &Matcher.regionEnd_MethodID_28, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public boolean java.util.regex.Matcher.hasTransparentBounds()

    private static var hasTransparentBounds_MethodID_29: jmethodID?

    open func hasTransparentBounds() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasTransparentBounds", methodSig: "()Z", methodCache: &Matcher.hasTransparentBounds_MethodID_29, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public java.util.regex.Matcher java.util.regex.Matcher.useTransparentBounds(boolean)

    private static var useTransparentBounds_MethodID_30: jmethodID?

    open func useTransparentBounds( b: Bool ) -> Matcher! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "useTransparentBounds", methodSig: "(Z)Ljava/util/regex/Matcher;", methodCache: &Matcher.useTransparentBounds_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Matcher( javaObject: __return ) : nil
    }

    open func useTransparentBounds( _ _b: Bool ) -> Matcher! {
        return useTransparentBounds( b: _b )
    }

    /// public boolean java.util.regex.Matcher.hasAnchoringBounds()

    private static var hasAnchoringBounds_MethodID_31: jmethodID?

    open func hasAnchoringBounds() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasAnchoringBounds", methodSig: "()Z", methodCache: &Matcher.hasAnchoringBounds_MethodID_31, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public java.util.regex.Matcher java.util.regex.Matcher.useAnchoringBounds(boolean)

    private static var useAnchoringBounds_MethodID_32: jmethodID?

    open func useAnchoringBounds( b: Bool ) -> Matcher! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "useAnchoringBounds", methodSig: "(Z)Ljava/util/regex/Matcher;", methodCache: &Matcher.useAnchoringBounds_MethodID_32, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Matcher( javaObject: __return ) : nil
    }

    open func useAnchoringBounds( _ _b: Bool ) -> Matcher! {
        return useAnchoringBounds( b: _b )
    }

    /// int java.util.regex.Matcher.getTextLength()

    /// java.lang.CharSequence java.util.regex.Matcher.getSubSequence(int,int)

    /// int java.util.regex.Matcher.getMatchedGroupIndex(java.lang.String)

    /// public java.util.regex.Matcher java.util.regex.Matcher.region(int,int)

    private static var region_MethodID_33: jmethodID?

    open func region( start: Int, end: Int ) -> Matcher! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: start, locals: &__locals )
        __args[1] = JNIType.toJava( value: end, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "region", methodSig: "(II)Ljava/util/regex/Matcher;", methodCache: &Matcher.region_MethodID_33, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Matcher( javaObject: __return ) : nil
    }

    open func region( _ _start: Int, _ _end: Int ) -> Matcher! {
        return region( start: _start, end: _end )
    }

}

