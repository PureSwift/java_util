
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:46 GMT 2016 ///

/// class java.util.concurrent.ConcurrentLinkedQueue ///

open class ConcurrentLinkedQueue: AbstractQueue, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.ConcurrentLinkedQueue", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ConcurrentLinkedQueueJNIClass: jclass?

    /// private static final long java.util.concurrent.ConcurrentLinkedQueue.serialVersionUID

    /// private transient volatile java.util.concurrent.ConcurrentLinkedQueue$Node java.util.concurrent.ConcurrentLinkedQueue.head

    /// private transient volatile java.util.concurrent.ConcurrentLinkedQueue$Node java.util.concurrent.ConcurrentLinkedQueue.tail

    /// private static final int java.util.concurrent.ConcurrentLinkedQueue.HOPS

    /// private static final sun.misc.Unsafe java.util.concurrent.ConcurrentLinkedQueue.UNSAFE

    /// private static final long java.util.concurrent.ConcurrentLinkedQueue.headOffset

    /// private static final long java.util.concurrent.ConcurrentLinkedQueue.tailOffset

    /// public java.util.concurrent.ConcurrentLinkedQueue()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/ConcurrentLinkedQueue", classCache: &ConcurrentLinkedQueue.ConcurrentLinkedQueueJNIClass, methodSig: "()V", methodCache: &ConcurrentLinkedQueue.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.concurrent.ConcurrentLinkedQueue(java.util.Collection)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Collection? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/ConcurrentLinkedQueue", classCache: &ConcurrentLinkedQueue.ConcurrentLinkedQueueJNIClass, methodSig: "(Ljava/util/Collection;)V", methodCache: &ConcurrentLinkedQueue.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Collection? ) {
        self.init( arg0: _arg0 )
    }

    /// public boolean java.util.concurrent.ConcurrentLinkedQueue.add(java.lang.Object)

    /// public boolean java.util.concurrent.ConcurrentLinkedQueue.isEmpty()

    /// public boolean java.util.concurrent.ConcurrentLinkedQueue.contains(java.lang.Object)

    /// public int java.util.concurrent.ConcurrentLinkedQueue.size()

    /// public java.lang.Object[] java.util.concurrent.ConcurrentLinkedQueue.toArray()

    /// public java.lang.Object[] java.util.concurrent.ConcurrentLinkedQueue.toArray(java.lang.Object[])

    /// public java.util.Iterator java.util.concurrent.ConcurrentLinkedQueue.iterator()

    /// public boolean java.util.concurrent.ConcurrentLinkedQueue.remove(java.lang.Object)

    /// private void java.util.concurrent.ConcurrentLinkedQueue.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// private void java.util.concurrent.ConcurrentLinkedQueue.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// public java.lang.Object java.util.concurrent.ConcurrentLinkedQueue.poll()

    /// static long java.util.concurrent.ConcurrentLinkedQueue.objectFieldOffset(sun.misc.Unsafe,java.lang.String,java.lang.Class)

    /// public java.lang.Object java.util.concurrent.ConcurrentLinkedQueue.peek()

    /// public boolean java.util.concurrent.ConcurrentLinkedQueue.offer(java.lang.Object)

    /// java.util.concurrent.ConcurrentLinkedQueue$Node java.util.concurrent.ConcurrentLinkedQueue.first()

    /// final java.util.concurrent.ConcurrentLinkedQueue$Node java.util.concurrent.ConcurrentLinkedQueue.succ(java.util.concurrent.ConcurrentLinkedQueue$Node)

    /// final void java.util.concurrent.ConcurrentLinkedQueue.updateHead(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)

    /// private boolean java.util.concurrent.ConcurrentLinkedQueue.casTail(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)

    /// private boolean java.util.concurrent.ConcurrentLinkedQueue.casHead(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)

    /// private void java.util.concurrent.ConcurrentLinkedQueue.lazySetHead(java.util.concurrent.ConcurrentLinkedQueue$Node)

    /// In declared protocol but not defined.. ///

    /// public abstract boolean java.util.Collection.removeAll(java.util.Collection)

    /// public abstract boolean java.util.Collection.contains(java.lang.Object)

    /// public abstract boolean java.util.Collection.containsAll(java.util.Collection)

    /// public abstract int java.util.Collection.size()

    /// public abstract java.util.Iterator java.lang.Iterable.iterator()

    /// public abstract java.lang.Object java.util.Queue.element()

    /// public abstract boolean java.util.Queue.offer(java.lang.Object)

    /// public abstract boolean java.util.Collection.retainAll(java.util.Collection)

    /// public abstract java.lang.Object[] java.util.Collection.toArray()

    /// public abstract boolean java.util.Collection.equals(java.lang.Object)

    /// public abstract java.lang.Object java.util.Queue.remove()

    /// public abstract java.lang.Object java.util.Queue.poll()

    /// public abstract void java.util.Collection.clear()

    /// public abstract boolean java.util.Collection.remove(java.lang.Object)

    /// public abstract java.lang.Object[] java.util.Collection.toArray(java.lang.Object[])

    /// public abstract boolean java.util.Collection.isEmpty()

    /// public abstract boolean java.util.Collection.add(java.lang.Object)

    /// public abstract int java.util.Collection.hashCode()

    /// public abstract java.lang.Object java.util.Queue.peek()

    /// public abstract boolean java.util.Collection.addAll(java.util.Collection)

}
