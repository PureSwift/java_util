
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:48 GMT 2016 ///

/// class java.util.concurrent.Executors ///

open class Executors: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.Executors", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ExecutorsJNIClass: jclass?

    /// private java.util.concurrent.Executors()

    /// public static java.util.concurrent.Callable java.util.concurrent.Executors.callable(java.lang.Runnable)

    private static var callable_MethodID_1: jmethodID?

    open class func callable( arg0: java_lang.Runnable? ) -> Callable! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "callable", methodSig: "(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;", methodCache: &callable_MethodID_1, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CallableForward( javaObject: __return ) : nil
    }

    open class func callable( _ _arg0: java_lang.Runnable? ) -> Callable! {
        return callable( arg0: _arg0 )
    }

    /// public static java.util.concurrent.Callable java.util.concurrent.Executors.callable(java.lang.Runnable,java.lang.Object)

    private static var callable_MethodID_2: jmethodID?

    open class func callable( arg0: java_lang.Runnable?, arg1: java_lang.JavaObject? ) -> Callable! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "callable", methodSig: "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;", methodCache: &callable_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CallableForward( javaObject: __return ) : nil
    }

    open class func callable( _ _arg0: java_lang.Runnable?, _ _arg1: java_lang.JavaObject? ) -> Callable! {
        return callable( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.util.concurrent.Callable java.util.concurrent.Executors.callable(java.security.PrivilegedExceptionAction)

    private static var callable_MethodID_3: jmethodID?

    open class func callable( arg0: /* java.security.PrivilegedExceptionAction */ UnclassedProtocol? ) -> Callable! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "callable", methodSig: "(Ljava/security/PrivilegedExceptionAction;)Ljava/util/concurrent/Callable;", methodCache: &callable_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CallableForward( javaObject: __return ) : nil
    }

    open class func callable( _ _arg0: /* java.security.PrivilegedExceptionAction */ UnclassedProtocol? ) -> Callable! {
        return callable( arg0: _arg0 )
    }

    /// public static java.util.concurrent.Callable java.util.concurrent.Executors.callable(java.security.PrivilegedAction)

    /// public static java.util.concurrent.ExecutorService java.util.concurrent.Executors.newFixedThreadPool(int)

    private static var newFixedThreadPool_MethodID_4: jmethodID?

    open class func newFixedThreadPool( arg0: Int ) -> ExecutorService! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "newFixedThreadPool", methodSig: "(I)Ljava/util/concurrent/ExecutorService;", methodCache: &newFixedThreadPool_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ExecutorServiceForward( javaObject: __return ) : nil
    }

    open class func newFixedThreadPool( _ _arg0: Int ) -> ExecutorService! {
        return newFixedThreadPool( arg0: _arg0 )
    }

    /// public static java.util.concurrent.ExecutorService java.util.concurrent.Executors.newFixedThreadPool(int,java.util.concurrent.ThreadFactory)

    private static var newFixedThreadPool_MethodID_5: jmethodID?

    open class func newFixedThreadPool( arg0: Int, arg1: ThreadFactory? ) -> ExecutorService! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "newFixedThreadPool", methodSig: "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;", methodCache: &newFixedThreadPool_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ExecutorServiceForward( javaObject: __return ) : nil
    }

    open class func newFixedThreadPool( _ _arg0: Int, _ _arg1: ThreadFactory? ) -> ExecutorService! {
        return newFixedThreadPool( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.util.concurrent.ExecutorService java.util.concurrent.Executors.newSingleThreadExecutor()

    private static var newSingleThreadExecutor_MethodID_6: jmethodID?

    open class func newSingleThreadExecutor() -> ExecutorService! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "newSingleThreadExecutor", methodSig: "()Ljava/util/concurrent/ExecutorService;", methodCache: &newSingleThreadExecutor_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ExecutorServiceForward( javaObject: __return ) : nil
    }


    /// public static java.util.concurrent.ExecutorService java.util.concurrent.Executors.newSingleThreadExecutor(java.util.concurrent.ThreadFactory)

    private static var newSingleThreadExecutor_MethodID_7: jmethodID?

    open class func newSingleThreadExecutor( arg0: ThreadFactory? ) -> ExecutorService! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "newSingleThreadExecutor", methodSig: "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;", methodCache: &newSingleThreadExecutor_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ExecutorServiceForward( javaObject: __return ) : nil
    }

    open class func newSingleThreadExecutor( _ _arg0: ThreadFactory? ) -> ExecutorService! {
        return newSingleThreadExecutor( arg0: _arg0 )
    }

    /// public static java.util.concurrent.ExecutorService java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)

    private static var newCachedThreadPool_MethodID_8: jmethodID?

    open class func newCachedThreadPool( arg0: ThreadFactory? ) -> ExecutorService! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "newCachedThreadPool", methodSig: "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;", methodCache: &newCachedThreadPool_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ExecutorServiceForward( javaObject: __return ) : nil
    }

    open class func newCachedThreadPool( _ _arg0: ThreadFactory? ) -> ExecutorService! {
        return newCachedThreadPool( arg0: _arg0 )
    }

    /// public static java.util.concurrent.ExecutorService java.util.concurrent.Executors.newCachedThreadPool()

    private static var newCachedThreadPool_MethodID_9: jmethodID?

    open class func newCachedThreadPool() -> ExecutorService! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "newCachedThreadPool", methodSig: "()Ljava/util/concurrent/ExecutorService;", methodCache: &newCachedThreadPool_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ExecutorServiceForward( javaObject: __return ) : nil
    }


    /// public static java.util.concurrent.ScheduledExecutorService java.util.concurrent.Executors.newSingleThreadScheduledExecutor()

    private static var newSingleThreadScheduledExecutor_MethodID_10: jmethodID?

    open class func newSingleThreadScheduledExecutor() -> ScheduledExecutorService! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "newSingleThreadScheduledExecutor", methodSig: "()Ljava/util/concurrent/ScheduledExecutorService;", methodCache: &newSingleThreadScheduledExecutor_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ScheduledExecutorServiceForward( javaObject: __return ) : nil
    }


    /// public static java.util.concurrent.ScheduledExecutorService java.util.concurrent.Executors.newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)

    private static var newSingleThreadScheduledExecutor_MethodID_11: jmethodID?

    open class func newSingleThreadScheduledExecutor( arg0: ThreadFactory? ) -> ScheduledExecutorService! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "newSingleThreadScheduledExecutor", methodSig: "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;", methodCache: &newSingleThreadScheduledExecutor_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ScheduledExecutorServiceForward( javaObject: __return ) : nil
    }

    open class func newSingleThreadScheduledExecutor( _ _arg0: ThreadFactory? ) -> ScheduledExecutorService! {
        return newSingleThreadScheduledExecutor( arg0: _arg0 )
    }

    /// public static java.util.concurrent.ScheduledExecutorService java.util.concurrent.Executors.newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)

    private static var newScheduledThreadPool_MethodID_12: jmethodID?

    open class func newScheduledThreadPool( arg0: Int, arg1: ThreadFactory? ) -> ScheduledExecutorService! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "newScheduledThreadPool", methodSig: "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;", methodCache: &newScheduledThreadPool_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ScheduledExecutorServiceForward( javaObject: __return ) : nil
    }

    open class func newScheduledThreadPool( _ _arg0: Int, _ _arg1: ThreadFactory? ) -> ScheduledExecutorService! {
        return newScheduledThreadPool( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.util.concurrent.ScheduledExecutorService java.util.concurrent.Executors.newScheduledThreadPool(int)

    private static var newScheduledThreadPool_MethodID_13: jmethodID?

    open class func newScheduledThreadPool( arg0: Int ) -> ScheduledExecutorService! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "newScheduledThreadPool", methodSig: "(I)Ljava/util/concurrent/ScheduledExecutorService;", methodCache: &newScheduledThreadPool_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ScheduledExecutorServiceForward( javaObject: __return ) : nil
    }

    open class func newScheduledThreadPool( _ _arg0: Int ) -> ScheduledExecutorService! {
        return newScheduledThreadPool( arg0: _arg0 )
    }

    /// public static java.util.concurrent.ExecutorService java.util.concurrent.Executors.unconfigurableExecutorService(java.util.concurrent.ExecutorService)

    private static var unconfigurableExecutorService_MethodID_14: jmethodID?

    open class func unconfigurableExecutorService( arg0: ExecutorService? ) -> ExecutorService! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "unconfigurableExecutorService", methodSig: "(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;", methodCache: &unconfigurableExecutorService_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ExecutorServiceForward( javaObject: __return ) : nil
    }

    open class func unconfigurableExecutorService( _ _arg0: ExecutorService? ) -> ExecutorService! {
        return unconfigurableExecutorService( arg0: _arg0 )
    }

    /// public static java.util.concurrent.ScheduledExecutorService java.util.concurrent.Executors.unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)

    private static var unconfigurableScheduledExecutorService_MethodID_15: jmethodID?

    open class func unconfigurableScheduledExecutorService( arg0: ScheduledExecutorService? ) -> ScheduledExecutorService! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "unconfigurableScheduledExecutorService", methodSig: "(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;", methodCache: &unconfigurableScheduledExecutorService_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ScheduledExecutorServiceForward( javaObject: __return ) : nil
    }

    open class func unconfigurableScheduledExecutorService( _ _arg0: ScheduledExecutorService? ) -> ScheduledExecutorService! {
        return unconfigurableScheduledExecutorService( arg0: _arg0 )
    }

    /// public static java.util.concurrent.ThreadFactory java.util.concurrent.Executors.defaultThreadFactory()

    private static var defaultThreadFactory_MethodID_16: jmethodID?

    open class func defaultThreadFactory() -> ThreadFactory! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "defaultThreadFactory", methodSig: "()Ljava/util/concurrent/ThreadFactory;", methodCache: &defaultThreadFactory_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ThreadFactoryForward( javaObject: __return ) : nil
    }


    /// public static java.util.concurrent.ThreadFactory java.util.concurrent.Executors.privilegedThreadFactory()

    private static var privilegedThreadFactory_MethodID_17: jmethodID?

    open class func privilegedThreadFactory() -> ThreadFactory! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "privilegedThreadFactory", methodSig: "()Ljava/util/concurrent/ThreadFactory;", methodCache: &privilegedThreadFactory_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ThreadFactoryForward( javaObject: __return ) : nil
    }


    /// public static java.util.concurrent.Callable java.util.concurrent.Executors.privilegedCallable(java.util.concurrent.Callable)

    private static var privilegedCallable_MethodID_18: jmethodID?

    open class func privilegedCallable( arg0: Callable? ) -> Callable! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "privilegedCallable", methodSig: "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;", methodCache: &privilegedCallable_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CallableForward( javaObject: __return ) : nil
    }

    open class func privilegedCallable( _ _arg0: Callable? ) -> Callable! {
        return privilegedCallable( arg0: _arg0 )
    }

    /// public static java.util.concurrent.Callable java.util.concurrent.Executors.privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable)

    private static var privilegedCallableUsingCurrentClassLoader_MethodID_19: jmethodID?

    open class func privilegedCallableUsingCurrentClassLoader( arg0: Callable? ) -> Callable! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/Executors", classCache: &ExecutorsJNIClass, methodName: "privilegedCallableUsingCurrentClassLoader", methodSig: "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;", methodCache: &privilegedCallableUsingCurrentClassLoader_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CallableForward( javaObject: __return ) : nil
    }

    open class func privilegedCallableUsingCurrentClassLoader( _ _arg0: Callable? ) -> Callable! {
        return privilegedCallableUsingCurrentClassLoader( arg0: _arg0 )
    }

}
