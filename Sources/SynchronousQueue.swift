
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:50 GMT 2016 ///

/// class java.util.concurrent.SynchronousQueue ///

open class SynchronousQueue: AbstractQueue, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.SynchronousQueue", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var SynchronousQueueJNIClass: jclass?

    /// private static final long java.util.concurrent.SynchronousQueue.serialVersionUID

    /// static final int java.util.concurrent.SynchronousQueue.NCPUS

    /// static final int java.util.concurrent.SynchronousQueue.maxTimedSpins

    /// static final int java.util.concurrent.SynchronousQueue.maxUntimedSpins

    /// static final long java.util.concurrent.SynchronousQueue.spinForTimeoutThreshold

    /// private transient volatile java.util.concurrent.SynchronousQueue$Transferer java.util.concurrent.SynchronousQueue.transferer

    /// private java.util.concurrent.locks.ReentrantLock java.util.concurrent.SynchronousQueue.qlock

    /// private java.util.concurrent.SynchronousQueue$WaitQueue java.util.concurrent.SynchronousQueue.waitingProducers

    /// private java.util.concurrent.SynchronousQueue$WaitQueue java.util.concurrent.SynchronousQueue.waitingConsumers

    /// public java.util.concurrent.SynchronousQueue()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/SynchronousQueue", classCache: &SynchronousQueue.SynchronousQueueJNIClass, methodSig: "()V", methodCache: &SynchronousQueue.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.concurrent.SynchronousQueue(boolean)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/SynchronousQueue", classCache: &SynchronousQueue.SynchronousQueueJNIClass, methodSig: "(Z)V", methodCache: &SynchronousQueue.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Bool ) {
        self.init( arg0: _arg0 )
    }

    /// public void java.util.concurrent.SynchronousQueue.put(java.lang.Object) throws java.lang.InterruptedException

    private static var put_MethodID_3: jmethodID?

    open func put( arg0: java_lang.JavaObject? ) throws /* java.lang.InterruptedException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "put", methodSig: "(Ljava/lang/Object;)V", methodCache: &SynchronousQueue.put_MethodID_3, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
    }

    open func put( _ _arg0: java_lang.JavaObject? ) throws /* java.lang.InterruptedException */ {
        try put( arg0: _arg0 )
    }

    /// public void java.util.concurrent.SynchronousQueue.clear()

    /// public boolean java.util.concurrent.SynchronousQueue.isEmpty()

    /// public boolean java.util.concurrent.SynchronousQueue.contains(java.lang.Object)

    /// public int java.util.concurrent.SynchronousQueue.size()

    /// public java.lang.Object[] java.util.concurrent.SynchronousQueue.toArray(java.lang.Object[])

    /// public java.lang.Object[] java.util.concurrent.SynchronousQueue.toArray()

    /// public java.util.Iterator java.util.concurrent.SynchronousQueue.iterator()

    /// public boolean java.util.concurrent.SynchronousQueue.remove(java.lang.Object)

    /// private void java.util.concurrent.SynchronousQueue.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// private void java.util.concurrent.SynchronousQueue.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// public java.lang.Object java.util.concurrent.SynchronousQueue.poll()

    /// public java.lang.Object java.util.concurrent.SynchronousQueue.poll(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var poll_MethodID_4: jmethodID?

    open func poll( arg0: Int64, arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "poll", methodSig: "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", methodCache: &SynchronousQueue.poll_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func poll( _ _arg0: Int64, _ _arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_lang.JavaObject! {
        return try poll( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.util.concurrent.SynchronousQueue.removeAll(java.util.Collection)

    /// public boolean java.util.concurrent.SynchronousQueue.containsAll(java.util.Collection)

    /// public boolean java.util.concurrent.SynchronousQueue.retainAll(java.util.Collection)

    /// public java.lang.Object java.util.concurrent.SynchronousQueue.peek()

    /// public boolean java.util.concurrent.SynchronousQueue.offer(java.lang.Object)

    /// public boolean java.util.concurrent.SynchronousQueue.offer(java.lang.Object,long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var offer_MethodID_5: jmethodID?

    open func offer( arg0: java_lang.JavaObject?, arg1: Int64, arg2: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "offer", methodSig: "(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", methodCache: &SynchronousQueue.offer_MethodID_5, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func offer( _ _arg0: java_lang.JavaObject?, _ _arg1: Int64, _ _arg2: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        return try offer( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.lang.Object java.util.concurrent.SynchronousQueue.take() throws java.lang.InterruptedException

    private static var take_MethodID_6: jmethodID?

    open func take() throws /* java.lang.InterruptedException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "take", methodSig: "()Ljava/lang/Object;", methodCache: &SynchronousQueue.take_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public int java.util.concurrent.SynchronousQueue.remainingCapacity()

    private static var remainingCapacity_MethodID_7: jmethodID?

    open func remainingCapacity() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "remainingCapacity", methodSig: "()I", methodCache: &SynchronousQueue.remainingCapacity_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.util.concurrent.SynchronousQueue.drainTo(java.util.Collection,int)

    private static var drainTo_MethodID_8: jmethodID?

    open func drainTo( arg0: Collection?, arg1: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "drainTo", methodSig: "(Ljava/util/Collection;I)I", methodCache: &SynchronousQueue.drainTo_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func drainTo( _ _arg0: Collection?, _ _arg1: Int ) -> Int {
        return drainTo( arg0: _arg0, arg1: _arg1 )
    }

    /// public int java.util.concurrent.SynchronousQueue.drainTo(java.util.Collection)

    private static var drainTo_MethodID_9: jmethodID?

    open func drainTo( arg0: Collection? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "drainTo", methodSig: "(Ljava/util/Collection;)I", methodCache: &SynchronousQueue.drainTo_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func drainTo( _ _arg0: Collection? ) -> Int {
        return drainTo( arg0: _arg0 )
    }

    /// In declared protocol but not defined.. ///

    /// public abstract int java.util.Collection.size()

    /// public abstract java.lang.Object java.util.Queue.element()

    /// public abstract java.util.Iterator java.lang.Iterable.iterator()

    /// public abstract boolean java.util.Queue.offer(java.lang.Object)

    /// public abstract boolean java.util.Collection.retainAll(java.util.Collection)

    /// public abstract java.lang.Object java.util.Queue.remove()

    /// public abstract java.lang.Object java.util.Queue.poll()

    /// public abstract void java.util.Collection.clear()

    /// public abstract boolean java.util.Collection.remove(java.lang.Object)

    /// public abstract java.lang.Object[] java.util.Collection.toArray(java.lang.Object[])

    /// public abstract boolean java.util.Collection.add(java.lang.Object)

    /// public abstract boolean java.util.Collection.addAll(java.util.Collection)

    /// public abstract boolean java.util.Collection.removeAll(java.util.Collection)

    /// public abstract boolean java.util.Collection.contains(java.lang.Object)

    /// public abstract boolean java.util.Collection.containsAll(java.util.Collection)

    /// public abstract boolean java.util.Collection.equals(java.lang.Object)

    /// public abstract java.lang.Object[] java.util.Collection.toArray()

    /// public abstract boolean java.util.Collection.isEmpty()

    /// public abstract int java.util.Collection.hashCode()

    /// public abstract java.lang.Object java.util.Queue.peek()

}
