
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:48 GMT 2016 ///

/// class java.util.concurrent.ExecutorCompletionService ///

open class ExecutorCompletionService: java_lang.JavaObject, CompletionService {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.ExecutorCompletionService", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ExecutorCompletionServiceJNIClass: jclass?

    /// private final java.util.concurrent.Executor java.util.concurrent.ExecutorCompletionService.executor

    /// private final java.util.concurrent.AbstractExecutorService java.util.concurrent.ExecutorCompletionService.aes

    /// private final java.util.concurrent.BlockingQueue java.util.concurrent.ExecutorCompletionService.completionQueue

    /// public java.util.concurrent.ExecutorCompletionService(java.util.concurrent.Executor)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Executor? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/ExecutorCompletionService", classCache: &ExecutorCompletionService.ExecutorCompletionServiceJNIClass, methodSig: "(Ljava/util/concurrent/Executor;)V", methodCache: &ExecutorCompletionService.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Executor? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.concurrent.ExecutorCompletionService(java.util.concurrent.Executor,java.util.concurrent.BlockingQueue)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Executor?, arg1: BlockingQueue? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/ExecutorCompletionService", classCache: &ExecutorCompletionService.ExecutorCompletionServiceJNIClass, methodSig: "(Ljava/util/concurrent/Executor;Ljava/util/concurrent/BlockingQueue;)V", methodCache: &ExecutorCompletionService.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Executor?, _ _arg1: BlockingQueue? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// static java.util.concurrent.BlockingQueue java.util.concurrent.ExecutorCompletionService.access$000(java.util.concurrent.ExecutorCompletionService)

    /// public java.util.concurrent.Future java.util.concurrent.ExecutorCompletionService.poll()

    private static var poll_MethodID_3: jmethodID?

    open func poll() -> Future! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "poll", methodSig: "()Ljava/util/concurrent/Future;", methodCache: &ExecutorCompletionService.poll_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FutureForward( javaObject: __return ) : nil
    }


    /// public java.util.concurrent.Future java.util.concurrent.ExecutorCompletionService.poll(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var poll_MethodID_4: jmethodID?

    open func poll( arg0: Int64, arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Future! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "poll", methodSig: "(JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/Future;", methodCache: &ExecutorCompletionService.poll_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? FutureForward( javaObject: __return ) : nil
    }

    open func poll( _ _arg0: Int64, _ _arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Future! {
        return try poll( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.concurrent.Future java.util.concurrent.ExecutorCompletionService.take() throws java.lang.InterruptedException

    private static var take_MethodID_5: jmethodID?

    open func take() throws /* java.lang.InterruptedException */ -> Future! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "take", methodSig: "()Ljava/util/concurrent/Future;", methodCache: &ExecutorCompletionService.take_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? FutureForward( javaObject: __return ) : nil
    }


    /// private java.util.concurrent.RunnableFuture java.util.concurrent.ExecutorCompletionService.newTaskFor(java.util.concurrent.Callable)

    /// private java.util.concurrent.RunnableFuture java.util.concurrent.ExecutorCompletionService.newTaskFor(java.lang.Runnable,java.lang.Object)

    /// public java.util.concurrent.Future java.util.concurrent.ExecutorCompletionService.submit(java.lang.Runnable,java.lang.Object)

    private static var submit_MethodID_6: jmethodID?

    open func submit( arg0: java_lang.Runnable?, arg1: java_lang.JavaObject? ) -> Future! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "submit", methodSig: "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;", methodCache: &ExecutorCompletionService.submit_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FutureForward( javaObject: __return ) : nil
    }

    open func submit( _ _arg0: java_lang.Runnable?, _ _arg1: java_lang.JavaObject? ) -> Future! {
        return submit( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.concurrent.Future java.util.concurrent.ExecutorCompletionService.submit(java.util.concurrent.Callable)

    private static var submit_MethodID_7: jmethodID?

    open func submit( arg0: Callable? ) -> Future! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "submit", methodSig: "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;", methodCache: &ExecutorCompletionService.submit_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FutureForward( javaObject: __return ) : nil
    }

    open func submit( _ _arg0: Callable? ) -> Future! {
        return submit( arg0: _arg0 )
    }

}
