
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:47 GMT 2016 ///

/// class java.util.concurrent.CopyOnWriteArrayList ///

open class CopyOnWriteArrayList: java_lang.JavaObject, List, RandomAccess, java_lang.Cloneable, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.CopyOnWriteArrayList", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CopyOnWriteArrayListJNIClass: jclass?

    /// private static final long java.util.concurrent.CopyOnWriteArrayList.serialVersionUID

    /// final transient java.util.concurrent.locks.ReentrantLock java.util.concurrent.CopyOnWriteArrayList.lock

    /// private transient volatile java.lang.Object[] java.util.concurrent.CopyOnWriteArrayList.array

    /// private static final sun.misc.Unsafe java.util.concurrent.CopyOnWriteArrayList.unsafe

    /// private static final long java.util.concurrent.CopyOnWriteArrayList.lockOffset

    /// public java.util.concurrent.CopyOnWriteArrayList(java.lang.Object[])

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: [JavaObject]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/CopyOnWriteArrayList", classCache: &CopyOnWriteArrayList.CopyOnWriteArrayListJNIClass, methodSig: "([Ljava/lang/Object;)V", methodCache: &CopyOnWriteArrayList.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: [JavaObject]? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.concurrent.CopyOnWriteArrayList()

    private static var new_MethodID_2: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/CopyOnWriteArrayList", classCache: &CopyOnWriteArrayList.CopyOnWriteArrayListJNIClass, methodSig: "()V", methodCache: &CopyOnWriteArrayList.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.concurrent.CopyOnWriteArrayList(java.util.Collection)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: Collection? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/CopyOnWriteArrayList", classCache: &CopyOnWriteArrayList.CopyOnWriteArrayListJNIClass, methodSig: "(Ljava/util/Collection;)V", methodCache: &CopyOnWriteArrayList.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Collection? ) {
        self.init( arg0: _arg0 )
    }

    /// public boolean java.util.concurrent.CopyOnWriteArrayList.add(java.lang.Object)

    private static var add_MethodID_4: jmethodID?

    open func add( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/lang/Object;)Z", methodCache: &CopyOnWriteArrayList.add_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func add( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return add( arg0: _arg0 )
    }

    /// public void java.util.concurrent.CopyOnWriteArrayList.add(int,java.lang.Object)

    private static var add_MethodID_5: jmethodID?

    open func add( arg0: Int, arg1: java_lang.JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "add", methodSig: "(ILjava/lang/Object;)V", methodCache: &CopyOnWriteArrayList.add_MethodID_5, args: &__args, locals: &__locals )
    }

    open func add( _ _arg0: Int, _ _arg1: java_lang.JavaObject? ) {
        add( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.lang.Object java.util.concurrent.CopyOnWriteArrayList.get(int)

    private static var get_MethodID_6: jmethodID?

    open func get( arg0: Int ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "(I)Ljava/lang/Object;", methodCache: &CopyOnWriteArrayList.get_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func get( _ _arg0: Int ) -> java_lang.JavaObject! {
        return get( arg0: _arg0 )
    }

    /// public boolean java.util.concurrent.CopyOnWriteArrayList.equals(java.lang.Object)

    /// public java.lang.String java.util.concurrent.CopyOnWriteArrayList.toString()

    /// public int java.util.concurrent.CopyOnWriteArrayList.hashCode()

    /// public java.lang.Object java.util.concurrent.CopyOnWriteArrayList.clone()

    private static var clone_MethodID_7: jmethodID?

    override open func clone() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &CopyOnWriteArrayList.clone_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// private static int java.util.concurrent.CopyOnWriteArrayList.indexOf(java.lang.Object,java.lang.Object[],int,int)

    /// public int java.util.concurrent.CopyOnWriteArrayList.indexOf(java.lang.Object)

    private static var indexOf_MethodID_8: jmethodID?

    open func indexOf( arg0: java_lang.JavaObject? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "indexOf", methodSig: "(Ljava/lang/Object;)I", methodCache: &CopyOnWriteArrayList.indexOf_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func indexOf( _ _arg0: java_lang.JavaObject? ) -> Int {
        return indexOf( arg0: _arg0 )
    }

    /// public int java.util.concurrent.CopyOnWriteArrayList.indexOf(java.lang.Object,int)

    private static var indexOf_MethodID_9: jmethodID?

    open func indexOf( arg0: java_lang.JavaObject?, arg1: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "indexOf", methodSig: "(Ljava/lang/Object;I)I", methodCache: &CopyOnWriteArrayList.indexOf_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func indexOf( _ _arg0: java_lang.JavaObject?, _ _arg1: Int ) -> Int {
        return indexOf( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.util.concurrent.CopyOnWriteArrayList.clear()

    private static var clear_MethodID_10: jmethodID?

    open func clear() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "()V", methodCache: &CopyOnWriteArrayList.clear_MethodID_10, args: &__args, locals: &__locals )
    }


    /// public boolean java.util.concurrent.CopyOnWriteArrayList.isEmpty()

    private static var isEmpty_MethodID_11: jmethodID?

    open func isEmpty() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isEmpty", methodSig: "()Z", methodCache: &CopyOnWriteArrayList.isEmpty_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public int java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(java.lang.Object,int)

    private static var lastIndexOf_MethodID_12: jmethodID?

    open func lastIndexOf( arg0: java_lang.JavaObject?, arg1: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "lastIndexOf", methodSig: "(Ljava/lang/Object;I)I", methodCache: &CopyOnWriteArrayList.lastIndexOf_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func lastIndexOf( _ _arg0: java_lang.JavaObject?, _ _arg1: Int ) -> Int {
        return lastIndexOf( arg0: _arg0, arg1: _arg1 )
    }

    /// public int java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(java.lang.Object)

    private static var lastIndexOf_MethodID_13: jmethodID?

    open func lastIndexOf( arg0: java_lang.JavaObject? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "lastIndexOf", methodSig: "(Ljava/lang/Object;)I", methodCache: &CopyOnWriteArrayList.lastIndexOf_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func lastIndexOf( _ _arg0: java_lang.JavaObject? ) -> Int {
        return lastIndexOf( arg0: _arg0 )
    }

    /// private static int java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(java.lang.Object,java.lang.Object[],int)

    /// public boolean java.util.concurrent.CopyOnWriteArrayList.contains(java.lang.Object)

    private static var contains_MethodID_14: jmethodID?

    open func contains( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(Ljava/lang/Object;)Z", methodCache: &CopyOnWriteArrayList.contains_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func contains( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return contains( arg0: _arg0 )
    }

    /// public boolean java.util.concurrent.CopyOnWriteArrayList.addAll(int,java.util.Collection)

    private static var addAll_MethodID_15: jmethodID?

    open func addAll( arg0: Int, arg1: Collection? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "addAll", methodSig: "(ILjava/util/Collection;)Z", methodCache: &CopyOnWriteArrayList.addAll_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func addAll( _ _arg0: Int, _ _arg1: Collection? ) -> Bool {
        return addAll( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.util.concurrent.CopyOnWriteArrayList.addAll(java.util.Collection)

    private static var addAll_MethodID_16: jmethodID?

    open func addAll( arg0: Collection? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "addAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &CopyOnWriteArrayList.addAll_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func addAll( _ _arg0: Collection? ) -> Bool {
        return addAll( arg0: _arg0 )
    }

    /// public int java.util.concurrent.CopyOnWriteArrayList.size()

    private static var size_MethodID_17: jmethodID?

    open func size() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "size", methodSig: "()I", methodCache: &CopyOnWriteArrayList.size_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public java.lang.Object[] java.util.concurrent.CopyOnWriteArrayList.toArray(java.lang.Object[])

    private static var toArray_MethodID_18: jmethodID?

    open func toArray( arg0: [JavaObject]? ) -> [JavaObject]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toArray", methodSig: "([Ljava/lang/Object;)[Ljava/lang/Object;", methodCache: &CopyOnWriteArrayList.toArray_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.decode( type: [JavaObject](), from: __return )
    }

    open func toArray( _ _arg0: [JavaObject]? ) -> [JavaObject]! {
        return toArray( arg0: _arg0 )
    }

    /// public java.lang.Object[] java.util.concurrent.CopyOnWriteArrayList.toArray()

    private static var toArray_MethodID_19: jmethodID?

    open func toArray() -> [JavaObject]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toArray", methodSig: "()[Ljava/lang/Object;", methodCache: &CopyOnWriteArrayList.toArray_MethodID_19, args: &__args, locals: &__locals )
        return JNIType.decode( type: [JavaObject](), from: __return )
    }


    /// final java.lang.Object[] java.util.concurrent.CopyOnWriteArrayList.getArray()

    /// public java.util.Iterator java.util.concurrent.CopyOnWriteArrayList.iterator()

    private static var iterator_MethodID_20: jmethodID?

    open func iterator() -> Iterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "iterator", methodSig: "()Ljava/util/Iterator;", methodCache: &CopyOnWriteArrayList.iterator_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IteratorForward( javaObject: __return ) : nil
    }


    /// static void java.util.concurrent.CopyOnWriteArrayList.access$200(java.util.concurrent.CopyOnWriteArrayList,int,int)

    /// public java.lang.Object java.util.concurrent.CopyOnWriteArrayList.remove(int)

    private static var remove_MethodID_21: jmethodID?

    open func remove( arg0: Int ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "remove", methodSig: "(I)Ljava/lang/Object;", methodCache: &CopyOnWriteArrayList.remove_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func remove( _ _arg0: Int ) -> java_lang.JavaObject! {
        return remove( arg0: _arg0 )
    }

    /// public boolean java.util.concurrent.CopyOnWriteArrayList.remove(java.lang.Object)

    private static var remove_MethodID_22: jmethodID?

    open func remove( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/Object;)Z", methodCache: &CopyOnWriteArrayList.remove_MethodID_22, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func remove( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return remove( arg0: _arg0 )
    }

    /// private void java.util.concurrent.CopyOnWriteArrayList.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// private void java.util.concurrent.CopyOnWriteArrayList.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// public java.lang.Object java.util.concurrent.CopyOnWriteArrayList.set(int,java.lang.Object)

    private static var set_MethodID_23: jmethodID?

    open func set( arg0: Int, arg1: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "set", methodSig: "(ILjava/lang/Object;)Ljava/lang/Object;", methodCache: &CopyOnWriteArrayList.set_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func set( _ _arg0: Int, _ _arg1: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return set( arg0: _arg0, arg1: _arg1 )
    }

    /// private static boolean java.util.concurrent.CopyOnWriteArrayList.eq(java.lang.Object,java.lang.Object)

    /// public java.util.ListIterator java.util.concurrent.CopyOnWriteArrayList.listIterator(int)

    private static var listIterator_MethodID_24: jmethodID?

    open func listIterator( arg0: Int ) -> ListIterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "listIterator", methodSig: "(I)Ljava/util/ListIterator;", methodCache: &CopyOnWriteArrayList.listIterator_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ListIteratorForward( javaObject: __return ) : nil
    }

    open func listIterator( _ _arg0: Int ) -> ListIterator! {
        return listIterator( arg0: _arg0 )
    }

    /// public java.util.ListIterator java.util.concurrent.CopyOnWriteArrayList.listIterator()

    private static var listIterator_MethodID_25: jmethodID?

    open func listIterator() -> ListIterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "listIterator", methodSig: "()Ljava/util/ListIterator;", methodCache: &CopyOnWriteArrayList.listIterator_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ListIteratorForward( javaObject: __return ) : nil
    }


    /// public java.util.List java.util.concurrent.CopyOnWriteArrayList.subList(int,int)

    private static var subList_MethodID_26: jmethodID?

    open func subList( arg0: Int, arg1: Int ) -> List! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subList", methodSig: "(II)Ljava/util/List;", methodCache: &CopyOnWriteArrayList.subList_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ListForward( javaObject: __return ) : nil
    }

    open func subList( _ _arg0: Int, _ _arg1: Int ) -> List! {
        return subList( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.util.concurrent.CopyOnWriteArrayList.removeAll(java.util.Collection)

    private static var removeAll_MethodID_27: jmethodID?

    open func removeAll( arg0: Collection? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "removeAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &CopyOnWriteArrayList.removeAll_MethodID_27, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func removeAll( _ _arg0: Collection? ) -> Bool {
        return removeAll( arg0: _arg0 )
    }

    /// public boolean java.util.concurrent.CopyOnWriteArrayList.containsAll(java.util.Collection)

    private static var containsAll_MethodID_28: jmethodID?

    open func containsAll( arg0: Collection? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &CopyOnWriteArrayList.containsAll_MethodID_28, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func containsAll( _ _arg0: Collection? ) -> Bool {
        return containsAll( arg0: _arg0 )
    }

    /// public boolean java.util.concurrent.CopyOnWriteArrayList.retainAll(java.util.Collection)

    private static var retainAll_MethodID_29: jmethodID?

    open func retainAll( arg0: Collection? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "retainAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &CopyOnWriteArrayList.retainAll_MethodID_29, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func retainAll( _ _arg0: Collection? ) -> Bool {
        return retainAll( arg0: _arg0 )
    }

    /// private void java.util.concurrent.CopyOnWriteArrayList.removeRange(int,int)

    /// final void java.util.concurrent.CopyOnWriteArrayList.setArray(java.lang.Object[])

    /// public boolean java.util.concurrent.CopyOnWriteArrayList.addIfAbsent(java.lang.Object)

    private static var addIfAbsent_MethodID_30: jmethodID?

    open func addIfAbsent( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "addIfAbsent", methodSig: "(Ljava/lang/Object;)Z", methodCache: &CopyOnWriteArrayList.addIfAbsent_MethodID_30, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func addIfAbsent( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return addIfAbsent( arg0: _arg0 )
    }

    /// public int java.util.concurrent.CopyOnWriteArrayList.addAllAbsent(java.util.Collection)

    private static var addAllAbsent_MethodID_31: jmethodID?

    open func addAllAbsent( arg0: Collection? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "addAllAbsent", methodSig: "(Ljava/util/Collection;)I", methodCache: &CopyOnWriteArrayList.addAllAbsent_MethodID_31, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func addAllAbsent( _ _arg0: Collection? ) -> Int {
        return addAllAbsent( arg0: _arg0 )
    }

    /// private void java.util.concurrent.CopyOnWriteArrayList.resetLock()

    /// In declared protocol but not defined.. ///

    /// public abstract boolean java.util.Collection.equals(java.lang.Object)

    /// public abstract int java.util.Collection.hashCode()

}
