
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:00 GMT 2016 ///

/// interface java.util.NavigableSet ///

public protocol NavigableSet: JavaProtocol {

    /// public abstract java.util.Iterator java.util.NavigableSet.iterator()

    func iterator() -> Iterator!

    /// public abstract java.lang.Object java.util.NavigableSet.floor(java.lang.Object)

    func floor( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject!
    func floor( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject!

    /// public abstract java.lang.Object java.util.NavigableSet.pollFirst()

    func pollFirst() -> java_lang.JavaObject!

    /// public abstract java.lang.Object java.util.NavigableSet.pollLast()

    func pollLast() -> java_lang.JavaObject!

    /// public abstract java.util.Iterator java.util.NavigableSet.descendingIterator()

    func descendingIterator() -> Iterator!

    /// public abstract java.util.NavigableSet java.util.NavigableSet.subSet(java.lang.Object,boolean,java.lang.Object,boolean)

    func subSet( arg0: java_lang.JavaObject?, arg1: Bool, arg2: java_lang.JavaObject?, arg3: Bool ) -> NavigableSet!
    func subSet( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool, _ _arg2: java_lang.JavaObject?, _ _arg3: Bool ) -> NavigableSet!

    /// public abstract java.util.SortedSet java.util.NavigableSet.subSet(java.lang.Object,java.lang.Object)

    func subSet( arg0: java_lang.JavaObject?, arg1: java_lang.JavaObject? ) -> SortedSet!
    func subSet( _ _arg0: java_lang.JavaObject?, _ _arg1: java_lang.JavaObject? ) -> SortedSet!

    /// public abstract java.util.NavigableSet java.util.NavigableSet.headSet(java.lang.Object,boolean)

    func headSet( arg0: java_lang.JavaObject?, arg1: Bool ) -> NavigableSet!
    func headSet( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool ) -> NavigableSet!

    /// public abstract java.util.SortedSet java.util.NavigableSet.headSet(java.lang.Object)

    func headSet( arg0: java_lang.JavaObject? ) -> SortedSet!
    func headSet( _ _arg0: java_lang.JavaObject? ) -> SortedSet!

    /// public abstract java.util.SortedSet java.util.NavigableSet.tailSet(java.lang.Object)

    func tailSet( arg0: java_lang.JavaObject? ) -> SortedSet!
    func tailSet( _ _arg0: java_lang.JavaObject? ) -> SortedSet!

    /// public abstract java.util.NavigableSet java.util.NavigableSet.tailSet(java.lang.Object,boolean)

    func tailSet( arg0: java_lang.JavaObject?, arg1: Bool ) -> NavigableSet!
    func tailSet( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool ) -> NavigableSet!

    /// public abstract java.lang.Object java.util.NavigableSet.lower(java.lang.Object)

    func lower( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject!
    func lower( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject!

    /// public abstract java.lang.Object java.util.NavigableSet.ceiling(java.lang.Object)

    func ceiling( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject!
    func ceiling( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject!

    /// public abstract java.lang.Object java.util.NavigableSet.higher(java.lang.Object)

    func higher( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject!
    func higher( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject!

    /// public abstract java.util.NavigableSet java.util.NavigableSet.descendingSet()

    func descendingSet() -> NavigableSet!

}

open class NavigableSetForward: SortedSetForward, NavigableSet {

    private static var NavigableSetJNIClass: jclass?

    /// public abstract java.util.Iterator java.util.NavigableSet.iterator()

    private static var iterator_MethodID_16: jmethodID?

    override open func iterator() -> Iterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "iterator", methodSig: "()Ljava/util/Iterator;", methodCache: &NavigableSetForward.iterator_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IteratorForward( javaObject: __return ) : nil
    }


    /// public abstract java.lang.Object java.util.NavigableSet.floor(java.lang.Object)

    private static var floor_MethodID_17: jmethodID?

    open func floor( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "floor", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &NavigableSetForward.floor_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func floor( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return floor( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.util.NavigableSet.pollFirst()

    private static var pollFirst_MethodID_18: jmethodID?

    open func pollFirst() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "pollFirst", methodSig: "()Ljava/lang/Object;", methodCache: &NavigableSetForward.pollFirst_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public abstract java.lang.Object java.util.NavigableSet.pollLast()

    private static var pollLast_MethodID_19: jmethodID?

    open func pollLast() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "pollLast", methodSig: "()Ljava/lang/Object;", methodCache: &NavigableSetForward.pollLast_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public abstract java.util.Iterator java.util.NavigableSet.descendingIterator()

    private static var descendingIterator_MethodID_20: jmethodID?

    open func descendingIterator() -> Iterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "descendingIterator", methodSig: "()Ljava/util/Iterator;", methodCache: &NavigableSetForward.descendingIterator_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IteratorForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.NavigableSet java.util.NavigableSet.subSet(java.lang.Object,boolean,java.lang.Object,boolean)

    private static var subSet_MethodID_21: jmethodID?

    open func subSet( arg0: java_lang.JavaObject?, arg1: Bool, arg2: java_lang.JavaObject?, arg3: Bool ) -> NavigableSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subSet", methodSig: "(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;", methodCache: &NavigableSetForward.subSet_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }

    open func subSet( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool, _ _arg2: java_lang.JavaObject?, _ _arg3: Bool ) -> NavigableSet! {
        return subSet( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract java.util.SortedSet java.util.NavigableSet.subSet(java.lang.Object,java.lang.Object)

    private static var subSet_MethodID_22: jmethodID?

    override open func subSet( arg0: java_lang.JavaObject?, arg1: java_lang.JavaObject? ) -> SortedSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subSet", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;", methodCache: &NavigableSetForward.subSet_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SortedSetForward( javaObject: __return ) : nil
    }

    override open func subSet( _ _arg0: java_lang.JavaObject?, _ _arg1: java_lang.JavaObject? ) -> SortedSet! {
        return subSet( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.util.NavigableSet java.util.NavigableSet.headSet(java.lang.Object,boolean)

    private static var headSet_MethodID_23: jmethodID?

    open func headSet( arg0: java_lang.JavaObject?, arg1: Bool ) -> NavigableSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "headSet", methodSig: "(Ljava/lang/Object;Z)Ljava/util/NavigableSet;", methodCache: &NavigableSetForward.headSet_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }

    open func headSet( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool ) -> NavigableSet! {
        return headSet( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.util.SortedSet java.util.NavigableSet.headSet(java.lang.Object)

    private static var headSet_MethodID_24: jmethodID?

    override open func headSet( arg0: java_lang.JavaObject? ) -> SortedSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "headSet", methodSig: "(Ljava/lang/Object;)Ljava/util/SortedSet;", methodCache: &NavigableSetForward.headSet_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SortedSetForward( javaObject: __return ) : nil
    }

    override open func headSet( _ _arg0: java_lang.JavaObject? ) -> SortedSet! {
        return headSet( arg0: _arg0 )
    }

    /// public abstract java.util.SortedSet java.util.NavigableSet.tailSet(java.lang.Object)

    private static var tailSet_MethodID_25: jmethodID?

    override open func tailSet( arg0: java_lang.JavaObject? ) -> SortedSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "tailSet", methodSig: "(Ljava/lang/Object;)Ljava/util/SortedSet;", methodCache: &NavigableSetForward.tailSet_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SortedSetForward( javaObject: __return ) : nil
    }

    override open func tailSet( _ _arg0: java_lang.JavaObject? ) -> SortedSet! {
        return tailSet( arg0: _arg0 )
    }

    /// public abstract java.util.NavigableSet java.util.NavigableSet.tailSet(java.lang.Object,boolean)

    private static var tailSet_MethodID_26: jmethodID?

    open func tailSet( arg0: java_lang.JavaObject?, arg1: Bool ) -> NavigableSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "tailSet", methodSig: "(Ljava/lang/Object;Z)Ljava/util/NavigableSet;", methodCache: &NavigableSetForward.tailSet_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }

    open func tailSet( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool ) -> NavigableSet! {
        return tailSet( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.lang.Object java.util.NavigableSet.lower(java.lang.Object)

    private static var lower_MethodID_27: jmethodID?

    open func lower( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "lower", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &NavigableSetForward.lower_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func lower( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return lower( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.util.NavigableSet.ceiling(java.lang.Object)

    private static var ceiling_MethodID_28: jmethodID?

    open func ceiling( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "ceiling", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &NavigableSetForward.ceiling_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func ceiling( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return ceiling( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.util.NavigableSet.higher(java.lang.Object)

    private static var higher_MethodID_29: jmethodID?

    open func higher( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "higher", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &NavigableSetForward.higher_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func higher( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return higher( arg0: _arg0 )
    }

    /// public abstract java.util.NavigableSet java.util.NavigableSet.descendingSet()

    private static var descendingSet_MethodID_30: jmethodID?

    open func descendingSet() -> NavigableSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "descendingSet", methodSig: "()Ljava/util/NavigableSet;", methodCache: &NavigableSetForward.descendingSet_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.Comparator java.util.SortedSet.comparator()

    private static var comparator_MethodID_31: jmethodID?

    override open func comparator() -> JavaComparator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "comparator", methodSig: "()Ljava/util/Comparator;", methodCache: &NavigableSetForward.comparator_MethodID_31, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }


    /// public abstract java.lang.Object java.util.SortedSet.last()

    private static var last_MethodID_32: jmethodID?

    override open func last() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "last", methodSig: "()Ljava/lang/Object;", methodCache: &NavigableSetForward.last_MethodID_32, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public abstract java.lang.Object java.util.SortedSet.first()

    private static var first_MethodID_33: jmethodID?

    override open func first() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "first", methodSig: "()Ljava/lang/Object;", methodCache: &NavigableSetForward.first_MethodID_33, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public abstract boolean java.util.Set.add(java.lang.Object)

    private static var add_MethodID_34: jmethodID?

    override open func add( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/lang/Object;)Z", methodCache: &NavigableSetForward.add_MethodID_34, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func add( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return add( arg0: _arg0 )
    }

    /// public abstract boolean java.util.Set.equals(java.lang.Object)

    private static var equals_MethodID_35: jmethodID?

    override open func equals( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &NavigableSetForward.equals_MethodID_35, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func equals( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return equals( arg0: _arg0 )
    }

    /// public abstract int java.util.Set.hashCode()

    private static var hashCode_MethodID_36: jmethodID?

    override open func hashCode() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "hashCode", methodSig: "()I", methodCache: &NavigableSetForward.hashCode_MethodID_36, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.util.Set.clear()

    private static var clear_MethodID_37: jmethodID?

    override open func clear() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "()V", methodCache: &NavigableSetForward.clear_MethodID_37, args: &__args, locals: &__locals )
    }


    /// public abstract boolean java.util.Set.isEmpty()

    private static var isEmpty_MethodID_38: jmethodID?

    override open func isEmpty() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isEmpty", methodSig: "()Z", methodCache: &NavigableSetForward.isEmpty_MethodID_38, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract boolean java.util.Set.contains(java.lang.Object)

    private static var contains_MethodID_39: jmethodID?

    override open func contains( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(Ljava/lang/Object;)Z", methodCache: &NavigableSetForward.contains_MethodID_39, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func contains( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return contains( arg0: _arg0 )
    }

    /// public abstract boolean java.util.Set.addAll(java.util.Collection)

    private static var addAll_MethodID_40: jmethodID?

    override open func addAll( arg0: Collection? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "addAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &NavigableSetForward.addAll_MethodID_40, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func addAll( _ _arg0: Collection? ) -> Bool {
        return addAll( arg0: _arg0 )
    }

    /// public abstract int java.util.Set.size()

    private static var size_MethodID_41: jmethodID?

    override open func size() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "size", methodSig: "()I", methodCache: &NavigableSetForward.size_MethodID_41, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract java.lang.Object[] java.util.Set.toArray(java.lang.Object[])

    private static var toArray_MethodID_42: jmethodID?

    override open func toArray( arg0: [JavaObject]? ) -> [JavaObject]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toArray", methodSig: "([Ljava/lang/Object;)[Ljava/lang/Object;", methodCache: &NavigableSetForward.toArray_MethodID_42, args: &__args, locals: &__locals )
        return JNIType.decode( type: [JavaObject](), from: __return )
    }

    override open func toArray( _ _arg0: [JavaObject]? ) -> [JavaObject]! {
        return toArray( arg0: _arg0 )
    }

    /// public abstract java.lang.Object[] java.util.Set.toArray()

    private static var toArray_MethodID_43: jmethodID?

    override open func toArray() -> [JavaObject]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toArray", methodSig: "()[Ljava/lang/Object;", methodCache: &NavigableSetForward.toArray_MethodID_43, args: &__args, locals: &__locals )
        return JNIType.decode( type: [JavaObject](), from: __return )
    }


    /// public abstract boolean java.util.Set.remove(java.lang.Object)

    private static var remove_MethodID_44: jmethodID?

    override open func remove( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/Object;)Z", methodCache: &NavigableSetForward.remove_MethodID_44, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func remove( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return remove( arg0: _arg0 )
    }

    /// public abstract boolean java.util.Set.removeAll(java.util.Collection)

    private static var removeAll_MethodID_45: jmethodID?

    override open func removeAll( arg0: Collection? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "removeAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &NavigableSetForward.removeAll_MethodID_45, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func removeAll( _ _arg0: Collection? ) -> Bool {
        return removeAll( arg0: _arg0 )
    }

    /// public abstract boolean java.util.Set.containsAll(java.util.Collection)

    private static var containsAll_MethodID_46: jmethodID?

    override open func containsAll( arg0: Collection? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &NavigableSetForward.containsAll_MethodID_46, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func containsAll( _ _arg0: Collection? ) -> Bool {
        return containsAll( arg0: _arg0 )
    }

    /// public abstract boolean java.util.Set.retainAll(java.util.Collection)

    private static var retainAll_MethodID_47: jmethodID?

    override open func retainAll( arg0: Collection? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "retainAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &NavigableSetForward.retainAll_MethodID_47, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func retainAll( _ _arg0: Collection? ) -> Bool {
        return retainAll( arg0: _arg0 )
    }

}


