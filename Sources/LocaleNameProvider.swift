
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:55 GMT 2016 ///

/// class java.util.spi.LocaleNameProvider ///

open class LocaleNameProvider: LocaleServiceProvider {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.spi.LocaleNameProvider", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var LocaleNameProviderJNIClass: jclass?

    /// protected java.util.spi.LocaleNameProvider()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/spi/LocaleNameProvider", classCache: &LocaleNameProvider.LocaleNameProviderJNIClass, methodSig: "()V", methodCache: &LocaleNameProvider.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public abstract java.lang.String java.util.spi.LocaleNameProvider.getDisplayLanguage(java.lang.String,java.util.Locale)

    private static var getDisplayLanguage_MethodID_2: jmethodID?

    open func getDisplayLanguage( arg0: String?, arg1: JavaLocale? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDisplayLanguage", methodSig: "(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;", methodCache: &LocaleNameProvider.getDisplayLanguage_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func getDisplayLanguage( _ _arg0: String?, _ _arg1: JavaLocale? ) -> String! {
        return getDisplayLanguage( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.lang.String java.util.spi.LocaleNameProvider.getDisplayCountry(java.lang.String,java.util.Locale)

    private static var getDisplayCountry_MethodID_3: jmethodID?

    open func getDisplayCountry( arg0: String?, arg1: JavaLocale? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDisplayCountry", methodSig: "(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;", methodCache: &LocaleNameProvider.getDisplayCountry_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func getDisplayCountry( _ _arg0: String?, _ _arg1: JavaLocale? ) -> String! {
        return getDisplayCountry( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.lang.String java.util.spi.LocaleNameProvider.getDisplayVariant(java.lang.String,java.util.Locale)

    private static var getDisplayVariant_MethodID_4: jmethodID?

    open func getDisplayVariant( arg0: String?, arg1: JavaLocale? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDisplayVariant", methodSig: "(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;", methodCache: &LocaleNameProvider.getDisplayVariant_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func getDisplayVariant( _ _arg0: String?, _ _arg1: JavaLocale? ) -> String! {
        return getDisplayVariant( arg0: _arg0, arg1: _arg1 )
    }

}
