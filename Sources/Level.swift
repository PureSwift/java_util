
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:04 GMT 2016 ///

/// class java.util.logging.Level ///

open class Level: java_lang.JavaObject, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.logging.Level", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var LevelJNIClass: jclass?

    /// private static java.lang.String java.util.logging.Level.defaultBundle

    /// private final java.lang.String java.util.logging.Level.name

    /// private final int java.util.logging.Level.value

    /// private final java.lang.String java.util.logging.Level.resourceBundleName

    /// private java.lang.String java.util.logging.Level.localizedLevelName

    /// public static final java.util.logging.Level java.util.logging.Level.OFF

    private static var OFF_FieldID: jfieldID?

    open static var OFF: Level! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "OFF", fieldType: "Ljava/util/logging/Level;", fieldCache: &OFF_FieldID, className: "java/util/logging/Level", classCache: &LevelJNIClass )
            return __value != nil ? Level( javaObject: __value ) : nil
        }
    }

    /// public static final java.util.logging.Level java.util.logging.Level.SEVERE

    private static var SEVERE_FieldID: jfieldID?

    open static var SEVERE: Level! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "SEVERE", fieldType: "Ljava/util/logging/Level;", fieldCache: &SEVERE_FieldID, className: "java/util/logging/Level", classCache: &LevelJNIClass )
            return __value != nil ? Level( javaObject: __value ) : nil
        }
    }

    /// public static final java.util.logging.Level java.util.logging.Level.WARNING

    private static var WARNING_FieldID: jfieldID?

    open static var WARNING: Level! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "WARNING", fieldType: "Ljava/util/logging/Level;", fieldCache: &WARNING_FieldID, className: "java/util/logging/Level", classCache: &LevelJNIClass )
            return __value != nil ? Level( javaObject: __value ) : nil
        }
    }

    /// public static final java.util.logging.Level java.util.logging.Level.INFO

    private static var INFO_FieldID: jfieldID?

    open static var INFO: Level! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "INFO", fieldType: "Ljava/util/logging/Level;", fieldCache: &INFO_FieldID, className: "java/util/logging/Level", classCache: &LevelJNIClass )
            return __value != nil ? Level( javaObject: __value ) : nil
        }
    }

    /// public static final java.util.logging.Level java.util.logging.Level.CONFIG

    private static var CONFIG_FieldID: jfieldID?

    open static var CONFIG: Level! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "CONFIG", fieldType: "Ljava/util/logging/Level;", fieldCache: &CONFIG_FieldID, className: "java/util/logging/Level", classCache: &LevelJNIClass )
            return __value != nil ? Level( javaObject: __value ) : nil
        }
    }

    /// public static final java.util.logging.Level java.util.logging.Level.FINE

    private static var FINE_FieldID: jfieldID?

    open static var FINE: Level! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "FINE", fieldType: "Ljava/util/logging/Level;", fieldCache: &FINE_FieldID, className: "java/util/logging/Level", classCache: &LevelJNIClass )
            return __value != nil ? Level( javaObject: __value ) : nil
        }
    }

    /// public static final java.util.logging.Level java.util.logging.Level.FINER

    private static var FINER_FieldID: jfieldID?

    open static var FINER: Level! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "FINER", fieldType: "Ljava/util/logging/Level;", fieldCache: &FINER_FieldID, className: "java/util/logging/Level", classCache: &LevelJNIClass )
            return __value != nil ? Level( javaObject: __value ) : nil
        }
    }

    /// public static final java.util.logging.Level java.util.logging.Level.FINEST

    private static var FINEST_FieldID: jfieldID?

    open static var FINEST: Level! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "FINEST", fieldType: "Ljava/util/logging/Level;", fieldCache: &FINEST_FieldID, className: "java/util/logging/Level", classCache: &LevelJNIClass )
            return __value != nil ? Level( javaObject: __value ) : nil
        }
    }

    /// public static final java.util.logging.Level java.util.logging.Level.ALL

    private static var ALL_FieldID: jfieldID?

    open static var ALL: Level! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "ALL", fieldType: "Ljava/util/logging/Level;", fieldCache: &ALL_FieldID, className: "java/util/logging/Level", classCache: &LevelJNIClass )
            return __value != nil ? Level( javaObject: __value ) : nil
        }
    }

    /// private static final long java.util.logging.Level.serialVersionUID

    /// protected java.util.logging.Level(java.lang.String,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: String?, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/logging/Level", classCache: &Level.LevelJNIClass, methodSig: "(Ljava/lang/String;I)V", methodCache: &Level.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: Int ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// protected java.util.logging.Level(java.lang.String,int,java.lang.String)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: String?, arg1: Int, arg2: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/logging/Level", classCache: &Level.LevelJNIClass, methodSig: "(Ljava/lang/String;ILjava/lang/String;)V", methodCache: &Level.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: Int, _ _arg2: String? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public boolean java.util.logging.Level.equals(java.lang.Object)

    /// public final java.lang.String java.util.logging.Level.toString()

    /// public int java.util.logging.Level.hashCode()

    /// public final int java.util.logging.Level.intValue()

    private static var intValue_MethodID_3: jmethodID?

    open func intValue() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "intValue", methodSig: "()I", methodCache: &Level.intValue_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public java.lang.String java.util.logging.Level.getName()

    private static var getName_MethodID_4: jmethodID?

    open func getName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getName", methodSig: "()Ljava/lang/String;", methodCache: &Level.getName_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// static int java.util.logging.Level.access$100(java.util.logging.Level)

    /// static java.lang.String java.util.logging.Level.access$000(java.util.logging.Level)

    /// static java.lang.String java.util.logging.Level.access$200(java.util.logging.Level)

    /// private java.lang.Object java.util.logging.Level.readResolve()

    /// public static synchronized java.util.logging.Level java.util.logging.Level.parse(java.lang.String) throws java.lang.IllegalArgumentException

    private static var parse_MethodID_5: jmethodID?

    open class func parse( arg0: String? ) throws /* java.lang.IllegalArgumentException */ -> Level! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/logging/Level", classCache: &LevelJNIClass, methodName: "parse", methodSig: "(Ljava/lang/String;)Ljava/util/logging/Level;", methodCache: &parse_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.IllegalArgumentException( javaObject: throwable )
        }
        return __return != nil ? Level( javaObject: __return ) : nil
    }

    open class func parse( _ _arg0: String? ) throws /* java.lang.IllegalArgumentException */ -> Level! {
        return try parse( arg0: _arg0 )
    }

    /// public java.lang.String java.util.logging.Level.getResourceBundleName()

    private static var getResourceBundleName_MethodID_6: jmethodID?

    open func getResourceBundleName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getResourceBundleName", methodSig: "()Ljava/lang/String;", methodCache: &Level.getResourceBundleName_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public java.lang.String java.util.logging.Level.getLocalizedName()

    private static var getLocalizedName_MethodID_7: jmethodID?

    open func getLocalizedName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLocalizedName", methodSig: "()Ljava/lang/String;", methodCache: &Level.getLocalizedName_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// final java.lang.String java.util.logging.Level.getLevelName()

    /// final synchronized java.lang.String java.util.logging.Level.getLocalizedLevelName()

    /// static java.util.logging.Level java.util.logging.Level.findLevel(java.lang.String)

}
