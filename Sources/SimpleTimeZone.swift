
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:44 GMT 2016 ///

/// class java.util.SimpleTimeZone ///

open class SimpleTimeZone: TimeZone {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.SimpleTimeZone", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var SimpleTimeZoneJNIClass: jclass?

    /// private int java.util.SimpleTimeZone.startMonth

    /// private int java.util.SimpleTimeZone.startDay

    /// private int java.util.SimpleTimeZone.startDayOfWeek

    /// private int java.util.SimpleTimeZone.startTime

    /// private int java.util.SimpleTimeZone.startTimeMode

    /// private int java.util.SimpleTimeZone.endMonth

    /// private int java.util.SimpleTimeZone.endDay

    /// private int java.util.SimpleTimeZone.endDayOfWeek

    /// private int java.util.SimpleTimeZone.endTime

    /// private int java.util.SimpleTimeZone.endTimeMode

    /// private int java.util.SimpleTimeZone.startYear

    /// private int java.util.SimpleTimeZone.rawOffset

    /// private boolean java.util.SimpleTimeZone.useDaylight

    /// private static final int java.util.SimpleTimeZone.millisPerHour

    /// private static final int java.util.SimpleTimeZone.millisPerDay

    /// private final byte[] java.util.SimpleTimeZone.monthLength

    /// private static final byte[] java.util.SimpleTimeZone.staticMonthLength

    /// private static final byte[] java.util.SimpleTimeZone.staticLeapMonthLength

    /// private int java.util.SimpleTimeZone.startMode

    /// private int java.util.SimpleTimeZone.endMode

    /// private int java.util.SimpleTimeZone.dstSavings

    /// private static final sun.util.calendar.Gregorian java.util.SimpleTimeZone.gcal

    /// private transient long java.util.SimpleTimeZone.cacheYear

    /// private transient long java.util.SimpleTimeZone.cacheStart

    /// private transient long java.util.SimpleTimeZone.cacheEnd

    /// private static final int java.util.SimpleTimeZone.DOM_MODE

    /// private static final int java.util.SimpleTimeZone.DOW_IN_MONTH_MODE

    /// private static final int java.util.SimpleTimeZone.DOW_GE_DOM_MODE

    /// private static final int java.util.SimpleTimeZone.DOW_LE_DOM_MODE

    /// public static final int java.util.SimpleTimeZone.WALL_TIME

    private static var WALL_TIME_FieldID: jfieldID?

    open static var WALL_TIME: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WALL_TIME", fieldType: "I", fieldCache: &WALL_TIME_FieldID, className: "java/util/SimpleTimeZone", classCache: &SimpleTimeZoneJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.SimpleTimeZone.STANDARD_TIME

    private static var STANDARD_TIME_FieldID: jfieldID?

    open static var STANDARD_TIME: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "STANDARD_TIME", fieldType: "I", fieldCache: &STANDARD_TIME_FieldID, className: "java/util/SimpleTimeZone", classCache: &SimpleTimeZoneJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.SimpleTimeZone.UTC_TIME

    private static var UTC_TIME_FieldID: jfieldID?

    open static var UTC_TIME: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "UTC_TIME", fieldType: "I", fieldCache: &UTC_TIME_FieldID, className: "java/util/SimpleTimeZone", classCache: &SimpleTimeZoneJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// static final long java.util.SimpleTimeZone.serialVersionUID

    /// static final int java.util.SimpleTimeZone.currentSerialVersion

    /// private int java.util.SimpleTimeZone.serialVersionOnStream

    /// public static final int java.util.TimeZone.SHORT

    /// public static final int java.util.TimeZone.LONG

    /// private static final int java.util.TimeZone.ONE_MINUTE

    /// private static final int java.util.TimeZone.ONE_HOUR

    /// private static final int java.util.TimeZone.ONE_DAY

    /// static final long java.util.TimeZone.serialVersionUID

    /// private static final boolean java.util.TimeZone.allowSetDefault

    /// static final java.util.TimeZone java.util.TimeZone.NO_TIMEZONE

    /// private java.lang.String java.util.TimeZone.ID

    /// private static volatile java.util.TimeZone java.util.TimeZone.defaultTimeZone

    /// static final java.lang.String java.util.TimeZone.GMT_ID

    /// private static final int java.util.TimeZone.GMT_ID_LENGTH

    /// private static sun.misc.JavaAWTAccess java.util.TimeZone.javaAWTAccess

    /// private static java.util.TimeZone java.util.TimeZone.mainAppContextDefault

    /// static final boolean java.util.TimeZone.$assertionsDisabled

    /// public java.util.SimpleTimeZone(int,java.lang.String,int,int,int,int,int,int,int,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int, arg1: String?, arg2: Int, arg3: Int, arg4: Int, arg5: Int, arg6: Int, arg7: Int, arg8: Int, arg9: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 10 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        __args[7] = JNIType.encode( value: arg7, locals: &__locals )
        __args[8] = JNIType.encode( value: arg8, locals: &__locals )
        __args[9] = JNIType.encode( value: arg9, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/SimpleTimeZone", classCache: &SimpleTimeZone.SimpleTimeZoneJNIClass, methodSig: "(ILjava/lang/String;IIIIIIII)V", methodCache: &SimpleTimeZone.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: String?, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int, _ _arg6: Int, _ _arg7: Int, _ _arg8: Int, _ _arg9: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7, arg8: _arg8, arg9: _arg9 )
    }

    /// public java.util.SimpleTimeZone(int,java.lang.String,int,int,int,int,int,int,int,int,int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Int, arg1: String?, arg2: Int, arg3: Int, arg4: Int, arg5: Int, arg6: Int, arg7: Int, arg8: Int, arg9: Int, arg10: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 11 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        __args[7] = JNIType.encode( value: arg7, locals: &__locals )
        __args[8] = JNIType.encode( value: arg8, locals: &__locals )
        __args[9] = JNIType.encode( value: arg9, locals: &__locals )
        __args[10] = JNIType.encode( value: arg10, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/SimpleTimeZone", classCache: &SimpleTimeZone.SimpleTimeZoneJNIClass, methodSig: "(ILjava/lang/String;IIIIIIIII)V", methodCache: &SimpleTimeZone.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: String?, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int, _ _arg6: Int, _ _arg7: Int, _ _arg8: Int, _ _arg9: Int, _ _arg10: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7, arg8: _arg8, arg9: _arg9, arg10: _arg10 )
    }

    /// public java.util.SimpleTimeZone(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: Int, arg1: String?, arg2: Int, arg3: Int, arg4: Int, arg5: Int, arg6: Int, arg7: Int, arg8: Int, arg9: Int, arg10: Int, arg11: Int, arg12: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 13 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        __args[7] = JNIType.encode( value: arg7, locals: &__locals )
        __args[8] = JNIType.encode( value: arg8, locals: &__locals )
        __args[9] = JNIType.encode( value: arg9, locals: &__locals )
        __args[10] = JNIType.encode( value: arg10, locals: &__locals )
        __args[11] = JNIType.encode( value: arg11, locals: &__locals )
        __args[12] = JNIType.encode( value: arg12, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/SimpleTimeZone", classCache: &SimpleTimeZone.SimpleTimeZoneJNIClass, methodSig: "(ILjava/lang/String;IIIIIIIIIII)V", methodCache: &SimpleTimeZone.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: String?, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int, _ _arg6: Int, _ _arg7: Int, _ _arg8: Int, _ _arg9: Int, _ _arg10: Int, _ _arg11: Int, _ _arg12: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7, arg8: _arg8, arg9: _arg9, arg10: _arg10, arg11: _arg11, arg12: _arg12 )
    }

    /// public java.util.SimpleTimeZone(int,java.lang.String)

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: Int, arg1: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/SimpleTimeZone", classCache: &SimpleTimeZone.SimpleTimeZoneJNIClass, methodSig: "(ILjava/lang/String;)V", methodCache: &SimpleTimeZone.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: String? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.util.SimpleTimeZone.equals(java.lang.Object)

    /// public java.lang.String java.util.SimpleTimeZone.toString()

    /// public synchronized int java.util.SimpleTimeZone.hashCode()

    /// public java.lang.Object java.util.SimpleTimeZone.clone()

    /// private void java.util.SimpleTimeZone.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// private void java.util.SimpleTimeZone.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// private int java.util.SimpleTimeZone.getOffset(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int,long)

    /// public int java.util.SimpleTimeZone.getOffset(long)

    /// public int java.util.SimpleTimeZone.getOffset(int,int,int,int,int,int)

    /// int java.util.SimpleTimeZone.getOffsets(long,int[])

    /// public int java.util.SimpleTimeZone.getRawOffset()

    /// public void java.util.SimpleTimeZone.setRawOffset(int)

    /// public int java.util.SimpleTimeZone.getDSTSavings()

    /// public boolean java.util.SimpleTimeZone.useDaylightTime()

    /// public boolean java.util.SimpleTimeZone.inDaylightTime(java.util.Date)

    /// public boolean java.util.SimpleTimeZone.hasSameRules(java.util.TimeZone)

    /// public void java.util.SimpleTimeZone.setStartYear(int)

    private static var setStartYear_MethodID_5: jmethodID?

    open func setStartYear( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setStartYear", methodSig: "(I)V", methodCache: &SimpleTimeZone.setStartYear_MethodID_5, args: &__args, locals: &__locals )
    }

    open func setStartYear( _ _arg0: Int ) {
        setStartYear( arg0: _arg0 )
    }

    /// public void java.util.SimpleTimeZone.setStartRule(int,int,int,int,boolean)

    private static var setStartRule_MethodID_6: jmethodID?

    open func setStartRule( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setStartRule", methodSig: "(IIIIZ)V", methodCache: &SimpleTimeZone.setStartRule_MethodID_6, args: &__args, locals: &__locals )
    }

    open func setStartRule( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Bool ) {
        setStartRule( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public void java.util.SimpleTimeZone.setStartRule(int,int,int)

    private static var setStartRule_MethodID_7: jmethodID?

    open func setStartRule( arg0: Int, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setStartRule", methodSig: "(III)V", methodCache: &SimpleTimeZone.setStartRule_MethodID_7, args: &__args, locals: &__locals )
    }

    open func setStartRule( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) {
        setStartRule( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.util.SimpleTimeZone.setStartRule(int,int,int,int)

    private static var setStartRule_MethodID_8: jmethodID?

    open func setStartRule( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setStartRule", methodSig: "(IIII)V", methodCache: &SimpleTimeZone.setStartRule_MethodID_8, args: &__args, locals: &__locals )
    }

    open func setStartRule( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        setStartRule( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public void java.util.SimpleTimeZone.setEndRule(int,int,int,int)

    private static var setEndRule_MethodID_9: jmethodID?

    open func setEndRule( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setEndRule", methodSig: "(IIII)V", methodCache: &SimpleTimeZone.setEndRule_MethodID_9, args: &__args, locals: &__locals )
    }

    open func setEndRule( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        setEndRule( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public void java.util.SimpleTimeZone.setEndRule(int,int,int)

    private static var setEndRule_MethodID_10: jmethodID?

    open func setEndRule( arg0: Int, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setEndRule", methodSig: "(III)V", methodCache: &SimpleTimeZone.setEndRule_MethodID_10, args: &__args, locals: &__locals )
    }

    open func setEndRule( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) {
        setEndRule( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.util.SimpleTimeZone.setEndRule(int,int,int,int,boolean)

    private static var setEndRule_MethodID_11: jmethodID?

    open func setEndRule( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setEndRule", methodSig: "(IIIIZ)V", methodCache: &SimpleTimeZone.setEndRule_MethodID_11, args: &__args, locals: &__locals )
    }

    open func setEndRule( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Bool ) {
        setEndRule( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// private long java.util.SimpleTimeZone.getStart(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int)

    /// private long java.util.SimpleTimeZone.getEnd(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int)

    /// private long java.util.SimpleTimeZone.getTransition(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int,int,int,int,int,int)

    /// public void java.util.SimpleTimeZone.setDSTSavings(int)

    private static var setDSTSavings_MethodID_12: jmethodID?

    open func setDSTSavings( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDSTSavings", methodSig: "(I)V", methodCache: &SimpleTimeZone.setDSTSavings_MethodID_12, args: &__args, locals: &__locals )
    }

    open func setDSTSavings( _ _arg0: Int ) {
        setDSTSavings( arg0: _arg0 )
    }

    /// private synchronized void java.util.SimpleTimeZone.invalidateCache()

    /// private void java.util.SimpleTimeZone.decodeRules()

    /// private void java.util.SimpleTimeZone.decodeStartRule()

    /// private void java.util.SimpleTimeZone.decodeEndRule()

    /// private void java.util.SimpleTimeZone.makeRulesCompatible()

    /// private byte[] java.util.SimpleTimeZone.packRules()

    /// private void java.util.SimpleTimeZone.unpackRules(byte[])

    /// private int[] java.util.SimpleTimeZone.packTimes()

    /// private void java.util.SimpleTimeZone.unpackTimes(int[])

}
