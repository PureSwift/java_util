
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:49 GMT 2016 ///

/// class java.util.concurrent.LinkedBlockingDeque ///

open class LinkedBlockingDeque: AbstractQueue, BlockingDeque, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.LinkedBlockingDeque", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var LinkedBlockingDequeJNIClass: jclass?

    /// private static final long java.util.concurrent.LinkedBlockingDeque.serialVersionUID

    /// transient java.util.concurrent.LinkedBlockingDeque$Node java.util.concurrent.LinkedBlockingDeque.first

    /// transient java.util.concurrent.LinkedBlockingDeque$Node java.util.concurrent.LinkedBlockingDeque.last

    /// private transient int java.util.concurrent.LinkedBlockingDeque.count

    /// private final int java.util.concurrent.LinkedBlockingDeque.capacity

    /// final java.util.concurrent.locks.ReentrantLock java.util.concurrent.LinkedBlockingDeque.lock

    /// private final java.util.concurrent.locks.Condition java.util.concurrent.LinkedBlockingDeque.notEmpty

    /// private final java.util.concurrent.locks.Condition java.util.concurrent.LinkedBlockingDeque.notFull

    /// public java.util.concurrent.LinkedBlockingDeque(int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/LinkedBlockingDeque", classCache: &LinkedBlockingDeque.LinkedBlockingDequeJNIClass, methodSig: "(I)V", methodCache: &LinkedBlockingDeque.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.concurrent.LinkedBlockingDeque(java.util.Collection)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Collection? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/LinkedBlockingDeque", classCache: &LinkedBlockingDeque.LinkedBlockingDequeJNIClass, methodSig: "(Ljava/util/Collection;)V", methodCache: &LinkedBlockingDeque.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Collection? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.concurrent.LinkedBlockingDeque()

    private static var new_MethodID_3: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/LinkedBlockingDeque", classCache: &LinkedBlockingDeque.LinkedBlockingDequeJNIClass, methodSig: "()V", methodCache: &LinkedBlockingDeque.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public boolean java.util.concurrent.LinkedBlockingDeque.add(java.lang.Object)

    /// public void java.util.concurrent.LinkedBlockingDeque.put(java.lang.Object) throws java.lang.InterruptedException

    private static var put_MethodID_4: jmethodID?

    open func put( arg0: java_lang.JavaObject? ) throws /* java.lang.InterruptedException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "put", methodSig: "(Ljava/lang/Object;)V", methodCache: &LinkedBlockingDeque.put_MethodID_4, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
    }

    open func put( _ _arg0: java_lang.JavaObject? ) throws /* java.lang.InterruptedException */ {
        try put( arg0: _arg0 )
    }

    /// public java.lang.String java.util.concurrent.LinkedBlockingDeque.toString()

    /// public void java.util.concurrent.LinkedBlockingDeque.clear()

    /// public boolean java.util.concurrent.LinkedBlockingDeque.contains(java.lang.Object)

    /// public int java.util.concurrent.LinkedBlockingDeque.size()

    /// public java.lang.Object[] java.util.concurrent.LinkedBlockingDeque.toArray(java.lang.Object[])

    /// public java.lang.Object[] java.util.concurrent.LinkedBlockingDeque.toArray()

    /// public java.util.Iterator java.util.concurrent.LinkedBlockingDeque.iterator()

    /// public void java.util.concurrent.LinkedBlockingDeque.push(java.lang.Object)

    private static var push_MethodID_5: jmethodID?

    open func push( arg0: java_lang.JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "push", methodSig: "(Ljava/lang/Object;)V", methodCache: &LinkedBlockingDeque.push_MethodID_5, args: &__args, locals: &__locals )
    }

    open func push( _ _arg0: java_lang.JavaObject? ) {
        push( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.pop()

    private static var pop_MethodID_6: jmethodID?

    open func pop() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "pop", methodSig: "()Ljava/lang/Object;", methodCache: &LinkedBlockingDeque.pop_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.remove()

    /// public boolean java.util.concurrent.LinkedBlockingDeque.remove(java.lang.Object)

    /// private void java.util.concurrent.LinkedBlockingDeque.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// private void java.util.concurrent.LinkedBlockingDeque.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.poll(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var poll_MethodID_7: jmethodID?

    open func poll( arg0: Int64, arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "poll", methodSig: "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", methodCache: &LinkedBlockingDeque.poll_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func poll( _ _arg0: Int64, _ _arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_lang.JavaObject! {
        return try poll( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.poll()

    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.peek()

    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.getFirst()

    private static var getFirst_MethodID_8: jmethodID?

    open func getFirst() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFirst", methodSig: "()Ljava/lang/Object;", methodCache: &LinkedBlockingDeque.getFirst_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.getLast()

    private static var getLast_MethodID_9: jmethodID?

    open func getLast() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLast", methodSig: "()Ljava/lang/Object;", methodCache: &LinkedBlockingDeque.getLast_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.removeFirst()

    private static var removeFirst_MethodID_10: jmethodID?

    open func removeFirst() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "removeFirst", methodSig: "()Ljava/lang/Object;", methodCache: &LinkedBlockingDeque.removeFirst_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.removeLast()

    private static var removeLast_MethodID_11: jmethodID?

    open func removeLast() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "removeLast", methodSig: "()Ljava/lang/Object;", methodCache: &LinkedBlockingDeque.removeLast_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public void java.util.concurrent.LinkedBlockingDeque.addFirst(java.lang.Object)

    private static var addFirst_MethodID_12: jmethodID?

    open func addFirst( arg0: java_lang.JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addFirst", methodSig: "(Ljava/lang/Object;)V", methodCache: &LinkedBlockingDeque.addFirst_MethodID_12, args: &__args, locals: &__locals )
    }

    open func addFirst( _ _arg0: java_lang.JavaObject? ) {
        addFirst( arg0: _arg0 )
    }

    /// public void java.util.concurrent.LinkedBlockingDeque.addLast(java.lang.Object)

    private static var addLast_MethodID_13: jmethodID?

    open func addLast( arg0: java_lang.JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addLast", methodSig: "(Ljava/lang/Object;)V", methodCache: &LinkedBlockingDeque.addLast_MethodID_13, args: &__args, locals: &__locals )
    }

    open func addLast( _ _arg0: java_lang.JavaObject? ) {
        addLast( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.element()

    /// public boolean java.util.concurrent.LinkedBlockingDeque.offer(java.lang.Object,long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var offer_MethodID_14: jmethodID?

    open func offer( arg0: java_lang.JavaObject?, arg1: Int64, arg2: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "offer", methodSig: "(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", methodCache: &LinkedBlockingDeque.offer_MethodID_14, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func offer( _ _arg0: java_lang.JavaObject?, _ _arg1: Int64, _ _arg2: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        return try offer( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public boolean java.util.concurrent.LinkedBlockingDeque.offer(java.lang.Object)

    /// public boolean java.util.concurrent.LinkedBlockingDeque.offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var offerFirst_MethodID_15: jmethodID?

    open func offerFirst( arg0: java_lang.JavaObject?, arg1: Int64, arg2: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "offerFirst", methodSig: "(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", methodCache: &LinkedBlockingDeque.offerFirst_MethodID_15, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func offerFirst( _ _arg0: java_lang.JavaObject?, _ _arg1: Int64, _ _arg2: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        return try offerFirst( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public boolean java.util.concurrent.LinkedBlockingDeque.offerFirst(java.lang.Object)

    private static var offerFirst_MethodID_16: jmethodID?

    open func offerFirst( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "offerFirst", methodSig: "(Ljava/lang/Object;)Z", methodCache: &LinkedBlockingDeque.offerFirst_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func offerFirst( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return offerFirst( arg0: _arg0 )
    }

    /// public boolean java.util.concurrent.LinkedBlockingDeque.offerLast(java.lang.Object)

    private static var offerLast_MethodID_17: jmethodID?

    open func offerLast( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "offerLast", methodSig: "(Ljava/lang/Object;)Z", methodCache: &LinkedBlockingDeque.offerLast_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func offerLast( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return offerLast( arg0: _arg0 )
    }

    /// public boolean java.util.concurrent.LinkedBlockingDeque.offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var offerLast_MethodID_18: jmethodID?

    open func offerLast( arg0: java_lang.JavaObject?, arg1: Int64, arg2: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "offerLast", methodSig: "(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", methodCache: &LinkedBlockingDeque.offerLast_MethodID_18, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func offerLast( _ _arg0: java_lang.JavaObject?, _ _arg1: Int64, _ _arg2: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        return try offerLast( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.peekFirst()

    private static var peekFirst_MethodID_19: jmethodID?

    open func peekFirst() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "peekFirst", methodSig: "()Ljava/lang/Object;", methodCache: &LinkedBlockingDeque.peekFirst_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.peekLast()

    private static var peekLast_MethodID_20: jmethodID?

    open func peekLast() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "peekLast", methodSig: "()Ljava/lang/Object;", methodCache: &LinkedBlockingDeque.peekLast_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.pollFirst()

    private static var pollFirst_MethodID_21: jmethodID?

    open func pollFirst() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "pollFirst", methodSig: "()Ljava/lang/Object;", methodCache: &LinkedBlockingDeque.pollFirst_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.pollFirst(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var pollFirst_MethodID_22: jmethodID?

    open func pollFirst( arg0: Int64, arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "pollFirst", methodSig: "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", methodCache: &LinkedBlockingDeque.pollFirst_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func pollFirst( _ _arg0: Int64, _ _arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_lang.JavaObject! {
        return try pollFirst( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.pollLast()

    private static var pollLast_MethodID_23: jmethodID?

    open func pollLast() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "pollLast", methodSig: "()Ljava/lang/Object;", methodCache: &LinkedBlockingDeque.pollLast_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.pollLast(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var pollLast_MethodID_24: jmethodID?

    open func pollLast( arg0: Int64, arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "pollLast", methodSig: "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", methodCache: &LinkedBlockingDeque.pollLast_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func pollLast( _ _arg0: Int64, _ _arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_lang.JavaObject! {
        return try pollLast( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.util.concurrent.LinkedBlockingDeque.removeFirstOccurrence(java.lang.Object)

    private static var removeFirstOccurrence_MethodID_25: jmethodID?

    open func removeFirstOccurrence( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "removeFirstOccurrence", methodSig: "(Ljava/lang/Object;)Z", methodCache: &LinkedBlockingDeque.removeFirstOccurrence_MethodID_25, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func removeFirstOccurrence( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return removeFirstOccurrence( arg0: _arg0 )
    }

    /// public boolean java.util.concurrent.LinkedBlockingDeque.removeLastOccurrence(java.lang.Object)

    private static var removeLastOccurrence_MethodID_26: jmethodID?

    open func removeLastOccurrence( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "removeLastOccurrence", methodSig: "(Ljava/lang/Object;)Z", methodCache: &LinkedBlockingDeque.removeLastOccurrence_MethodID_26, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func removeLastOccurrence( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return removeLastOccurrence( arg0: _arg0 )
    }

    /// public java.util.Iterator java.util.concurrent.LinkedBlockingDeque.descendingIterator()

    private static var descendingIterator_MethodID_27: jmethodID?

    open func descendingIterator() -> Iterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "descendingIterator", methodSig: "()Ljava/util/Iterator;", methodCache: &LinkedBlockingDeque.descendingIterator_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IteratorForward( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.take() throws java.lang.InterruptedException

    private static var take_MethodID_28: jmethodID?

    open func take() throws /* java.lang.InterruptedException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "take", methodSig: "()Ljava/lang/Object;", methodCache: &LinkedBlockingDeque.take_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public int java.util.concurrent.LinkedBlockingDeque.remainingCapacity()

    private static var remainingCapacity_MethodID_29: jmethodID?

    open func remainingCapacity() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "remainingCapacity", methodSig: "()I", methodCache: &LinkedBlockingDeque.remainingCapacity_MethodID_29, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.util.concurrent.LinkedBlockingDeque.drainTo(java.util.Collection,int)

    private static var drainTo_MethodID_30: jmethodID?

    open func drainTo( arg0: Collection?, arg1: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "drainTo", methodSig: "(Ljava/util/Collection;I)I", methodCache: &LinkedBlockingDeque.drainTo_MethodID_30, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func drainTo( _ _arg0: Collection?, _ _arg1: Int ) -> Int {
        return drainTo( arg0: _arg0, arg1: _arg1 )
    }

    /// public int java.util.concurrent.LinkedBlockingDeque.drainTo(java.util.Collection)

    private static var drainTo_MethodID_31: jmethodID?

    open func drainTo( arg0: Collection? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "drainTo", methodSig: "(Ljava/util/Collection;)I", methodCache: &LinkedBlockingDeque.drainTo_MethodID_31, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func drainTo( _ _arg0: Collection? ) -> Int {
        return drainTo( arg0: _arg0 )
    }

    /// public void java.util.concurrent.LinkedBlockingDeque.putFirst(java.lang.Object) throws java.lang.InterruptedException

    private static var putFirst_MethodID_32: jmethodID?

    open func putFirst( arg0: java_lang.JavaObject? ) throws /* java.lang.InterruptedException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putFirst", methodSig: "(Ljava/lang/Object;)V", methodCache: &LinkedBlockingDeque.putFirst_MethodID_32, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
    }

    open func putFirst( _ _arg0: java_lang.JavaObject? ) throws /* java.lang.InterruptedException */ {
        try putFirst( arg0: _arg0 )
    }

    /// public void java.util.concurrent.LinkedBlockingDeque.putLast(java.lang.Object) throws java.lang.InterruptedException

    private static var putLast_MethodID_33: jmethodID?

    open func putLast( arg0: java_lang.JavaObject? ) throws /* java.lang.InterruptedException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putLast", methodSig: "(Ljava/lang/Object;)V", methodCache: &LinkedBlockingDeque.putLast_MethodID_33, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
    }

    open func putLast( _ _arg0: java_lang.JavaObject? ) throws /* java.lang.InterruptedException */ {
        try putLast( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.takeFirst() throws java.lang.InterruptedException

    private static var takeFirst_MethodID_34: jmethodID?

    open func takeFirst() throws /* java.lang.InterruptedException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "takeFirst", methodSig: "()Ljava/lang/Object;", methodCache: &LinkedBlockingDeque.takeFirst_MethodID_34, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.LinkedBlockingDeque.takeLast() throws java.lang.InterruptedException

    private static var takeLast_MethodID_35: jmethodID?

    open func takeLast() throws /* java.lang.InterruptedException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "takeLast", methodSig: "()Ljava/lang/Object;", methodCache: &LinkedBlockingDeque.takeLast_MethodID_35, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// void java.util.concurrent.LinkedBlockingDeque.unlink(java.util.concurrent.LinkedBlockingDeque$Node)

    /// private boolean java.util.concurrent.LinkedBlockingDeque.linkFirst(java.lang.Object)

    /// private boolean java.util.concurrent.LinkedBlockingDeque.linkLast(java.lang.Object)

    /// private java.lang.Object java.util.concurrent.LinkedBlockingDeque.unlinkFirst()

    /// private java.lang.Object java.util.concurrent.LinkedBlockingDeque.unlinkLast()

    /// In declared protocol but not defined.. ///

    /// public abstract java.lang.Object java.util.Queue.element()

    /// public abstract java.util.Iterator java.lang.Iterable.iterator()

    /// public abstract void java.util.Collection.clear()

    /// public abstract boolean java.util.Collection.add(java.lang.Object)

    /// public abstract boolean java.util.Collection.removeAll(java.util.Collection)

    /// public abstract boolean java.util.Collection.contains(java.lang.Object)

    /// public abstract boolean java.util.Collection.equals(java.lang.Object)

    /// public abstract boolean java.util.Collection.isEmpty()

    /// public abstract java.lang.Object java.util.Queue.peek()

    /// public abstract int java.util.Collection.size()

    /// public abstract boolean java.util.Queue.offer(java.lang.Object)

    /// public abstract boolean java.util.Collection.retainAll(java.util.Collection)

    /// public abstract java.lang.Object java.util.Queue.remove()

    /// public abstract java.lang.Object java.util.Queue.poll()

    /// public abstract boolean java.util.Collection.remove(java.lang.Object)

    /// public abstract java.lang.Object[] java.util.Collection.toArray(java.lang.Object[])

    /// public abstract boolean java.util.Collection.addAll(java.util.Collection)

    /// public abstract boolean java.util.Collection.containsAll(java.util.Collection)

    /// public abstract java.lang.Object[] java.util.Collection.toArray()

    /// public abstract int java.util.Collection.hashCode()

}
