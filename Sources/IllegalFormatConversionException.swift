
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:43 GMT 2016 ///

/// class java.util.IllegalFormatConversionException ///

open class IllegalFormatConversionException: IllegalFormatException {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.IllegalFormatConversionException", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var IllegalFormatConversionExceptionJNIClass: jclass?

    /// private static final long java.util.IllegalFormatConversionException.serialVersionUID

    /// private char java.util.IllegalFormatConversionException.c

    /// private java.lang.Class java.util.IllegalFormatConversionException.arg

    /// private static final long java.util.IllegalFormatException.serialVersionUID

    /// private static final long java.lang.IllegalArgumentException.serialVersionUID

    /// static final long java.lang.RuntimeException.serialVersionUID

    /// static final long java.lang.Exception.serialVersionUID

    /// private static final long java.lang.Throwable.serialVersionUID

    /// private java.lang.String java.lang.Throwable.detailMessage

    /// private java.lang.Throwable java.lang.Throwable.cause

    /// private java.lang.StackTraceElement[] java.lang.Throwable.stackTrace

    /// public java.util.IllegalFormatConversionException(char,java.lang.Class)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: UInt16, arg1: java_lang.Class? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/IllegalFormatConversionException", classCache: &IllegalFormatConversionException.IllegalFormatConversionExceptionJNIClass, methodSig: "(CLjava/lang/Class;)V", methodCache: &IllegalFormatConversionException.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: UInt16, _ _arg1: java_lang.Class? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.lang.String java.util.IllegalFormatConversionException.getMessage()

    /// public char java.util.IllegalFormatConversionException.getConversion()

    private static var getConversion_MethodID_2: jmethodID?

    open func getConversion() -> UInt16 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallCharMethod( object: javaObject, methodName: "getConversion", methodSig: "()C", methodCache: &IllegalFormatConversionException.getConversion_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: UInt16(), from: __return )
    }


    /// public java.lang.Class java.util.IllegalFormatConversionException.getArgumentClass()

    private static var getArgumentClass_MethodID_3: jmethodID?

    open func getArgumentClass() -> java_lang.Class! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getArgumentClass", methodSig: "()Ljava/lang/Class;", methodCache: &IllegalFormatConversionException.getArgumentClass_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.Class( javaObject: __return ) : nil
    }


}
