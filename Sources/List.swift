
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:12 GMT 2016 ///

/// interface java.util.List ///

public protocol List: Collection {

    /// public abstract void java.util.List.add(int,java.lang.Object)

    func add( arg0: Int, arg1: java_lang.JavaObject? )
    func add( _ _arg0: Int, _ _arg1: java_lang.JavaObject? )

    /// public abstract boolean java.util.List.add(java.lang.Object)

    func add( arg0: java_lang.JavaObject? ) -> Bool
    func add( _ _arg0: java_lang.JavaObject? ) -> Bool

    /// public abstract java.lang.Object java.util.List.get(int)

    func get( arg0: Int ) -> java_lang.JavaObject!
    func get( _ _arg0: Int ) -> java_lang.JavaObject!

    /// public abstract boolean java.util.List.equals(java.lang.Object)

    func equals( arg0: java_lang.JavaObject? ) -> Bool
    func equals( _ _arg0: java_lang.JavaObject? ) -> Bool

    /// public abstract int java.util.List.hashCode()

    func hashCode() -> Int

    /// public abstract int java.util.List.indexOf(java.lang.Object)

    func indexOf( arg0: java_lang.JavaObject? ) -> Int
    func indexOf( _ _arg0: java_lang.JavaObject? ) -> Int

    /// public abstract void java.util.List.clear()

    func clear()

    /// public abstract boolean java.util.List.isEmpty()

    func isEmpty() -> Bool

    /// public abstract int java.util.List.lastIndexOf(java.lang.Object)

    func lastIndexOf( arg0: java_lang.JavaObject? ) -> Int
    func lastIndexOf( _ _arg0: java_lang.JavaObject? ) -> Int

    /// public abstract boolean java.util.List.contains(java.lang.Object)

    func contains( arg0: java_lang.JavaObject? ) -> Bool
    func contains( _ _arg0: java_lang.JavaObject? ) -> Bool

    /// public abstract boolean java.util.List.addAll(int,java.util.Collection)

    func addAll( arg0: Int, arg1: Collection? ) -> Bool
    func addAll( _ _arg0: Int, _ _arg1: Collection? ) -> Bool

    /// public abstract boolean java.util.List.addAll(java.util.Collection)

    func addAll( arg0: Collection? ) -> Bool
    func addAll( _ _arg0: Collection? ) -> Bool

    /// public abstract int java.util.List.size()

    func size() -> Int

    /// public abstract java.lang.Object[] java.util.List.toArray(java.lang.Object[])

    func toArray( arg0: [JavaObject]? ) -> [JavaObject]!
    func toArray( _ _arg0: [JavaObject]? ) -> [JavaObject]!

    /// public abstract java.lang.Object[] java.util.List.toArray()

    func toArray() -> [JavaObject]!

    /// public abstract java.util.Iterator java.util.List.iterator()

    func iterator() -> Iterator!

    /// public abstract java.lang.Object java.util.List.remove(int)

    func remove( arg0: Int ) -> java_lang.JavaObject!
    func remove( _ _arg0: Int ) -> java_lang.JavaObject!

    /// public abstract boolean java.util.List.remove(java.lang.Object)

    func remove( arg0: java_lang.JavaObject? ) -> Bool
    func remove( _ _arg0: java_lang.JavaObject? ) -> Bool

    /// public abstract java.lang.Object java.util.List.set(int,java.lang.Object)

    func set( arg0: Int, arg1: java_lang.JavaObject? ) -> java_lang.JavaObject!
    func set( _ _arg0: Int, _ _arg1: java_lang.JavaObject? ) -> java_lang.JavaObject!

    /// public abstract java.util.ListIterator java.util.List.listIterator(int)

    func listIterator( arg0: Int ) -> ListIterator!
    func listIterator( _ _arg0: Int ) -> ListIterator!

    /// public abstract java.util.ListIterator java.util.List.listIterator()

    func listIterator() -> ListIterator!

    /// public abstract java.util.List java.util.List.subList(int,int)

    func subList( arg0: Int, arg1: Int ) -> List!
    func subList( _ _arg0: Int, _ _arg1: Int ) -> List!

    /// public abstract boolean java.util.List.removeAll(java.util.Collection)

    func removeAll( arg0: Collection? ) -> Bool
    func removeAll( _ _arg0: Collection? ) -> Bool

    /// public abstract boolean java.util.List.containsAll(java.util.Collection)

    func containsAll( arg0: Collection? ) -> Bool
    func containsAll( _ _arg0: Collection? ) -> Bool

    /// public abstract boolean java.util.List.retainAll(java.util.Collection)

    func retainAll( arg0: Collection? ) -> Bool
    func retainAll( _ _arg0: Collection? ) -> Bool

}

open class ListForward: CollectionForward, List {

    private static var ListJNIClass: jclass?

    /// public abstract void java.util.List.add(int,java.lang.Object)

    private static var add_MethodID_26: jmethodID?

    open func add( arg0: Int, arg1: java_lang.JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "add", methodSig: "(ILjava/lang/Object;)V", methodCache: &ListForward.add_MethodID_26, args: &__args, locals: &__locals )
    }

    open func add( _ _arg0: Int, _ _arg1: java_lang.JavaObject? ) {
        add( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract boolean java.util.List.add(java.lang.Object)

    private static var add_MethodID_27: jmethodID?

    override open func add( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/lang/Object;)Z", methodCache: &ListForward.add_MethodID_27, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func add( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return add( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.util.List.get(int)

    private static var get_MethodID_28: jmethodID?

    open func get( arg0: Int ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "(I)Ljava/lang/Object;", methodCache: &ListForward.get_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func get( _ _arg0: Int ) -> java_lang.JavaObject! {
        return get( arg0: _arg0 )
    }

    /// public abstract boolean java.util.List.equals(java.lang.Object)

    private static var equals_MethodID_29: jmethodID?

    override open func equals( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &ListForward.equals_MethodID_29, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func equals( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return equals( arg0: _arg0 )
    }

    /// public abstract int java.util.List.hashCode()

    private static var hashCode_MethodID_30: jmethodID?

    override open func hashCode() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "hashCode", methodSig: "()I", methodCache: &ListForward.hashCode_MethodID_30, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract int java.util.List.indexOf(java.lang.Object)

    private static var indexOf_MethodID_31: jmethodID?

    open func indexOf( arg0: java_lang.JavaObject? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "indexOf", methodSig: "(Ljava/lang/Object;)I", methodCache: &ListForward.indexOf_MethodID_31, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func indexOf( _ _arg0: java_lang.JavaObject? ) -> Int {
        return indexOf( arg0: _arg0 )
    }

    /// public abstract void java.util.List.clear()

    private static var clear_MethodID_32: jmethodID?

    override open func clear() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "()V", methodCache: &ListForward.clear_MethodID_32, args: &__args, locals: &__locals )
    }


    /// public abstract boolean java.util.List.isEmpty()

    private static var isEmpty_MethodID_33: jmethodID?

    override open func isEmpty() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isEmpty", methodSig: "()Z", methodCache: &ListForward.isEmpty_MethodID_33, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract int java.util.List.lastIndexOf(java.lang.Object)

    private static var lastIndexOf_MethodID_34: jmethodID?

    open func lastIndexOf( arg0: java_lang.JavaObject? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "lastIndexOf", methodSig: "(Ljava/lang/Object;)I", methodCache: &ListForward.lastIndexOf_MethodID_34, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func lastIndexOf( _ _arg0: java_lang.JavaObject? ) -> Int {
        return lastIndexOf( arg0: _arg0 )
    }

    /// public abstract boolean java.util.List.contains(java.lang.Object)

    private static var contains_MethodID_35: jmethodID?

    override open func contains( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(Ljava/lang/Object;)Z", methodCache: &ListForward.contains_MethodID_35, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func contains( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return contains( arg0: _arg0 )
    }

    /// public abstract boolean java.util.List.addAll(int,java.util.Collection)

    private static var addAll_MethodID_36: jmethodID?

    open func addAll( arg0: Int, arg1: Collection? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "addAll", methodSig: "(ILjava/util/Collection;)Z", methodCache: &ListForward.addAll_MethodID_36, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func addAll( _ _arg0: Int, _ _arg1: Collection? ) -> Bool {
        return addAll( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract boolean java.util.List.addAll(java.util.Collection)

    private static var addAll_MethodID_37: jmethodID?

    override open func addAll( arg0: Collection? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "addAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &ListForward.addAll_MethodID_37, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func addAll( _ _arg0: Collection? ) -> Bool {
        return addAll( arg0: _arg0 )
    }

    /// public abstract int java.util.List.size()

    private static var size_MethodID_38: jmethodID?

    override open func size() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "size", methodSig: "()I", methodCache: &ListForward.size_MethodID_38, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract java.lang.Object[] java.util.List.toArray(java.lang.Object[])

    private static var toArray_MethodID_39: jmethodID?

    override open func toArray( arg0: [JavaObject]? ) -> [JavaObject]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toArray", methodSig: "([Ljava/lang/Object;)[Ljava/lang/Object;", methodCache: &ListForward.toArray_MethodID_39, args: &__args, locals: &__locals )
        return JNIType.decode( type: [JavaObject](), from: __return )
    }

    override open func toArray( _ _arg0: [JavaObject]? ) -> [JavaObject]! {
        return toArray( arg0: _arg0 )
    }

    /// public abstract java.lang.Object[] java.util.List.toArray()

    private static var toArray_MethodID_40: jmethodID?

    override open func toArray() -> [JavaObject]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toArray", methodSig: "()[Ljava/lang/Object;", methodCache: &ListForward.toArray_MethodID_40, args: &__args, locals: &__locals )
        return JNIType.decode( type: [JavaObject](), from: __return )
    }


    /// public abstract java.util.Iterator java.util.List.iterator()

    private static var iterator_MethodID_41: jmethodID?

    override open func iterator() -> Iterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "iterator", methodSig: "()Ljava/util/Iterator;", methodCache: &ListForward.iterator_MethodID_41, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IteratorForward( javaObject: __return ) : nil
    }


    /// public abstract java.lang.Object java.util.List.remove(int)

    private static var remove_MethodID_42: jmethodID?

    open func remove( arg0: Int ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "remove", methodSig: "(I)Ljava/lang/Object;", methodCache: &ListForward.remove_MethodID_42, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func remove( _ _arg0: Int ) -> java_lang.JavaObject! {
        return remove( arg0: _arg0 )
    }

    /// public abstract boolean java.util.List.remove(java.lang.Object)

    private static var remove_MethodID_43: jmethodID?

    override open func remove( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/Object;)Z", methodCache: &ListForward.remove_MethodID_43, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func remove( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return remove( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.util.List.set(int,java.lang.Object)

    private static var set_MethodID_44: jmethodID?

    open func set( arg0: Int, arg1: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "set", methodSig: "(ILjava/lang/Object;)Ljava/lang/Object;", methodCache: &ListForward.set_MethodID_44, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func set( _ _arg0: Int, _ _arg1: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return set( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.util.ListIterator java.util.List.listIterator(int)

    private static var listIterator_MethodID_45: jmethodID?

    open func listIterator( arg0: Int ) -> ListIterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "listIterator", methodSig: "(I)Ljava/util/ListIterator;", methodCache: &ListForward.listIterator_MethodID_45, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ListIteratorForward( javaObject: __return ) : nil
    }

    open func listIterator( _ _arg0: Int ) -> ListIterator! {
        return listIterator( arg0: _arg0 )
    }

    /// public abstract java.util.ListIterator java.util.List.listIterator()

    private static var listIterator_MethodID_46: jmethodID?

    open func listIterator() -> ListIterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "listIterator", methodSig: "()Ljava/util/ListIterator;", methodCache: &ListForward.listIterator_MethodID_46, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ListIteratorForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.List java.util.List.subList(int,int)

    private static var subList_MethodID_47: jmethodID?

    open func subList( arg0: Int, arg1: Int ) -> List! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subList", methodSig: "(II)Ljava/util/List;", methodCache: &ListForward.subList_MethodID_47, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ListForward( javaObject: __return ) : nil
    }

    open func subList( _ _arg0: Int, _ _arg1: Int ) -> List! {
        return subList( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract boolean java.util.List.removeAll(java.util.Collection)

    private static var removeAll_MethodID_48: jmethodID?

    override open func removeAll( arg0: Collection? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "removeAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &ListForward.removeAll_MethodID_48, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func removeAll( _ _arg0: Collection? ) -> Bool {
        return removeAll( arg0: _arg0 )
    }

    /// public abstract boolean java.util.List.containsAll(java.util.Collection)

    private static var containsAll_MethodID_49: jmethodID?

    override open func containsAll( arg0: Collection? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &ListForward.containsAll_MethodID_49, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func containsAll( _ _arg0: Collection? ) -> Bool {
        return containsAll( arg0: _arg0 )
    }

    /// public abstract boolean java.util.List.retainAll(java.util.Collection)

    private static var retainAll_MethodID_50: jmethodID?

    override open func retainAll( arg0: Collection? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "retainAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &ListForward.retainAll_MethodID_50, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func retainAll( _ _arg0: Collection? ) -> Bool {
        return retainAll( arg0: _arg0 )
    }

}


