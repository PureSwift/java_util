
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:47 GMT 2016 ///

/// class java.util.concurrent.CyclicBarrier ///

open class CyclicBarrier: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.CyclicBarrier", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CyclicBarrierJNIClass: jclass?

    /// private final java.util.concurrent.locks.ReentrantLock java.util.concurrent.CyclicBarrier.lock

    /// private final java.util.concurrent.locks.Condition java.util.concurrent.CyclicBarrier.trip

    /// private final int java.util.concurrent.CyclicBarrier.parties

    /// private final java.lang.Runnable java.util.concurrent.CyclicBarrier.barrierCommand

    /// private java.util.concurrent.CyclicBarrier$Generation java.util.concurrent.CyclicBarrier.generation

    /// private int java.util.concurrent.CyclicBarrier.count

    /// public java.util.concurrent.CyclicBarrier(int,java.lang.Runnable)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int, arg1: java_lang.Runnable? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/CyclicBarrier", classCache: &CyclicBarrier.CyclicBarrierJNIClass, methodSig: "(ILjava/lang/Runnable;)V", methodCache: &CyclicBarrier.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: java_lang.Runnable? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.concurrent.CyclicBarrier(int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/CyclicBarrier", classCache: &CyclicBarrier.CyclicBarrierJNIClass, methodSig: "(I)V", methodCache: &CyclicBarrier.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int ) {
        self.init( arg0: _arg0 )
    }

    /// public void java.util.concurrent.CyclicBarrier.reset()

    private static var reset_MethodID_3: jmethodID?

    open func reset() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reset", methodSig: "()V", methodCache: &CyclicBarrier.reset_MethodID_3, args: &__args, locals: &__locals )
    }


    /// public int java.util.concurrent.CyclicBarrier.await() throws java.lang.InterruptedException,java.util.concurrent.BrokenBarrierException

    private static var await_MethodID_4: jmethodID?

    open func await() throws /* java.lang.InterruptedException, java.util.concurrent.BrokenBarrierException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "await", methodSig: "()I", methodCache: &CyclicBarrier.await_MethodID_4, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.util.concurrent.CyclicBarrier.await(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException,java.util.concurrent.BrokenBarrierException,java.util.concurrent.TimeoutException

    private static var await_MethodID_5: jmethodID?

    open func await( arg0: Int64, arg1: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.BrokenBarrierException, java.util.concurrent.TimeoutException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "await", methodSig: "(JLjava/util/concurrent/TimeUnit;)I", methodCache: &CyclicBarrier.await_MethodID_5, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }

    open func await( _ _arg0: Int64, _ _arg1: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.BrokenBarrierException, java.util.concurrent.TimeoutException */ -> Int {
        return try await( arg0: _arg0, arg1: _arg1 )
    }

    /// private void java.util.concurrent.CyclicBarrier.nextGeneration()

    /// private void java.util.concurrent.CyclicBarrier.breakBarrier()

    /// private int java.util.concurrent.CyclicBarrier.dowait(boolean,long) throws java.lang.InterruptedException,java.util.concurrent.BrokenBarrierException,java.util.concurrent.TimeoutException

    /// public int java.util.concurrent.CyclicBarrier.getParties()

    private static var getParties_MethodID_6: jmethodID?

    open func getParties() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getParties", methodSig: "()I", methodCache: &CyclicBarrier.getParties_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public boolean java.util.concurrent.CyclicBarrier.isBroken()

    private static var isBroken_MethodID_7: jmethodID?

    open func isBroken() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isBroken", methodSig: "()Z", methodCache: &CyclicBarrier.isBroken_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public int java.util.concurrent.CyclicBarrier.getNumberWaiting()

    private static var getNumberWaiting_MethodID_8: jmethodID?

    open func getNumberWaiting() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getNumberWaiting", methodSig: "()I", methodCache: &CyclicBarrier.getNumberWaiting_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


}
