
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:54 GMT 2016 ///

/// class java.util.logging.SimpleFormatter ///

open class SimpleFormatter: logging_Formatter {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.logging.SimpleFormatter", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var SimpleFormatterJNIClass: jclass?

    /// java.util.Date java.util.logging.SimpleFormatter.dat

    /// private static final java.lang.String java.util.logging.SimpleFormatter.format

    /// private java.text.MessageFormat java.util.logging.SimpleFormatter.formatter

    /// private java.lang.Object[] java.util.logging.SimpleFormatter.args

    /// private java.lang.String java.util.logging.SimpleFormatter.lineSeparator

    /// public java.util.logging.SimpleFormatter()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/logging/SimpleFormatter", classCache: &SimpleFormatter.SimpleFormatterJNIClass, methodSig: "()V", methodCache: &SimpleFormatter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public synchronized java.lang.String java.util.logging.SimpleFormatter.format(java.util.logging.LogRecord)

}
