
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:44 GMT 2016 ///

/// class java.util.Scanner ///

open class Scanner: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.Scanner", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ScannerJNIClass: jclass?

    /// private java.nio.CharBuffer java.util.Scanner.buf

    /// private static final int java.util.Scanner.BUFFER_SIZE

    /// private int java.util.Scanner.position

    /// private java.util.regex.Matcher java.util.Scanner.matcher

    /// private java.util.regex.Pattern java.util.Scanner.delimPattern

    /// private java.util.regex.Pattern java.util.Scanner.hasNextPattern

    /// private int java.util.Scanner.hasNextPosition

    /// private java.lang.String java.util.Scanner.hasNextResult

    /// private java.lang.Readable java.util.Scanner.source

    /// private boolean java.util.Scanner.sourceClosed

    /// private boolean java.util.Scanner.needInput

    /// private boolean java.util.Scanner.skipped

    /// private int java.util.Scanner.savedScannerPosition

    /// private java.lang.Object java.util.Scanner.typeCache

    /// private boolean java.util.Scanner.matchValid

    /// private boolean java.util.Scanner.closed

    /// private int java.util.Scanner.radix

    /// private int java.util.Scanner.defaultRadix

    /// private java.util.Locale java.util.Scanner.locale

    /// private sun.misc.LRUCache java.util.Scanner.patternCache

    /// private java.io.IOException java.util.Scanner.lastException

    /// private static java.util.regex.Pattern java.util.Scanner.WHITESPACE_PATTERN

    /// private static java.util.regex.Pattern java.util.Scanner.FIND_ANY_PATTERN

    /// private static java.util.regex.Pattern java.util.Scanner.NON_ASCII_DIGIT

    /// private java.lang.String java.util.Scanner.groupSeparator

    /// private java.lang.String java.util.Scanner.decimalSeparator

    /// private java.lang.String java.util.Scanner.nanString

    /// private java.lang.String java.util.Scanner.infinityString

    /// private java.lang.String java.util.Scanner.positivePrefix

    /// private java.lang.String java.util.Scanner.negativePrefix

    /// private java.lang.String java.util.Scanner.positiveSuffix

    /// private java.lang.String java.util.Scanner.negativeSuffix

    /// private static volatile java.util.regex.Pattern java.util.Scanner.boolPattern

    /// private static final java.lang.String java.util.Scanner.BOOLEAN_PATTERN

    /// private java.util.regex.Pattern java.util.Scanner.integerPattern

    /// private java.lang.String java.util.Scanner.digits

    /// private java.lang.String java.util.Scanner.non0Digit

    /// private int java.util.Scanner.SIMPLE_GROUP_INDEX

    /// private static volatile java.util.regex.Pattern java.util.Scanner.separatorPattern

    /// private static volatile java.util.regex.Pattern java.util.Scanner.linePattern

    /// private static final java.lang.String java.util.Scanner.LINE_SEPARATOR_PATTERN

    /// private static final java.lang.String java.util.Scanner.LINE_PATTERN

    /// private java.util.regex.Pattern java.util.Scanner.floatPattern

    /// private java.util.regex.Pattern java.util.Scanner.decimalPattern

    /// public java.util.Scanner(java.io.File) throws java.io.FileNotFoundException

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: /* java.io.File */ UnclassedObject? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Scanner", classCache: &Scanner.ScannerJNIClass, methodSig: "(Ljava/io/File;)V", methodCache: &Scanner.new_MethodID_1, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.FileNotFoundException */ UnclassedObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* java.io.File */ UnclassedObject? ) throws {
        try self.init( arg0: _arg0 )
    }

    /// public java.util.Scanner(java.lang.Readable)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: java_lang.Readable? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/Scanner", classCache: &Scanner.ScannerJNIClass, methodSig: "(Ljava/lang/Readable;)V", methodCache: &Scanner.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: java_lang.Readable? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.Scanner(java.io.InputStream)

    /// public java.util.Scanner(java.io.InputStream,java.lang.String)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: /* java.io.InputStream */ UnclassedObject?, arg1: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Scanner", classCache: &Scanner.ScannerJNIClass, methodSig: "(Ljava/io/InputStream;Ljava/lang/String;)V", methodCache: &Scanner.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* java.io.InputStream */ UnclassedObject?, _ _arg1: String? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.Scanner(java.lang.String)

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Scanner", classCache: &Scanner.ScannerJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &Scanner.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.Scanner(java.io.File,java.lang.String) throws java.io.FileNotFoundException

    /// public java.util.Scanner(java.nio.channels.ReadableByteChannel,java.lang.String)

    private static var new_MethodID_5: jmethodID?

    public convenience init( arg0: /* java.nio.channels.ReadableByteChannel */ UnclassedProtocol?, arg1: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Scanner", classCache: &Scanner.ScannerJNIClass, methodSig: "(Ljava/nio/channels/ReadableByteChannel;Ljava/lang/String;)V", methodCache: &Scanner.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* java.nio.channels.ReadableByteChannel */ UnclassedProtocol?, _ _arg1: String? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.Scanner(java.nio.channels.ReadableByteChannel)

    private static var new_MethodID_6: jmethodID?

    public convenience init( arg0: /* java.nio.channels.ReadableByteChannel */ UnclassedProtocol? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/Scanner", classCache: &Scanner.ScannerJNIClass, methodSig: "(Ljava/nio/channels/ReadableByteChannel;)V", methodCache: &Scanner.new_MethodID_6, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* java.nio.channels.ReadableByteChannel */ UnclassedProtocol? ) {
        self.init( arg0: _arg0 )
    }

    /// private java.util.Scanner(java.lang.Readable,java.util.regex.Pattern)

    /// public java.lang.String java.util.Scanner.toString()

    /// public boolean java.util.Scanner.hasNext()

    private static var hasNext_MethodID_7: jmethodID?

    open func hasNext() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNext", methodSig: "()Z", methodCache: &Scanner.hasNext_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public boolean java.util.Scanner.hasNext(java.lang.String)

    private static var hasNext_MethodID_8: jmethodID?

    open func hasNext( arg0: String? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNext", methodSig: "(Ljava/lang/String;)Z", methodCache: &Scanner.hasNext_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func hasNext( _ _arg0: String? ) -> Bool {
        return hasNext( arg0: _arg0 )
    }

    /// public boolean java.util.Scanner.hasNext(java.util.regex.Pattern)

    private static var hasNext_MethodID_9: jmethodID?

    open func hasNext( arg0: Pattern? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNext", methodSig: "(Ljava/util/regex/Pattern;)Z", methodCache: &Scanner.hasNext_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func hasNext( _ _arg0: Pattern? ) -> Bool {
        return hasNext( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.Scanner.next()

    private static var next_MethodID_10: jmethodID?

    open func next() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "next", methodSig: "()Ljava/lang/Object;", methodCache: &Scanner.next_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public java.lang.String java.util.Scanner.next(java.util.regex.Pattern)

    private static var next_MethodID_11: jmethodID?

    open func next( arg0: Pattern? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "next", methodSig: "(Ljava/util/regex/Pattern;)Ljava/lang/String;", methodCache: &Scanner.next_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func next( _ _arg0: Pattern? ) -> String! {
        return next( arg0: _arg0 )
    }

    /// public java.lang.String java.util.Scanner.next(java.lang.String)

    private static var next_MethodID_12: jmethodID?

    open func next( arg0: String? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "next", methodSig: "(Ljava/lang/String;)Ljava/lang/String;", methodCache: &Scanner.next_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func next( _ _arg0: String? ) -> String! {
        return next( arg0: _arg0 )
    }

    /// public java.lang.String java.util.Scanner.next()

    /// public void java.util.Scanner.remove()

    private static var remove_MethodID_13: jmethodID?

    open func remove() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "remove", methodSig: "()V", methodCache: &Scanner.remove_MethodID_13, args: &__args, locals: &__locals )
    }


    /// public void java.util.Scanner.close()

    private static var close_MethodID_14: jmethodID?

    open func close() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "close", methodSig: "()V", methodCache: &Scanner.close_MethodID_14, args: &__args, locals: &__locals )
    }


    /// public java.util.Scanner java.util.Scanner.reset()

    private static var reset_MethodID_15: jmethodID?

    open func reset() -> Scanner! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "reset", methodSig: "()Ljava/util/Scanner;", methodCache: &Scanner.reset_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Scanner( javaObject: __return ) : nil
    }


    /// public int java.util.Scanner.nextInt()

    private static var nextInt_MethodID_16: jmethodID?

    open func nextInt() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "nextInt", methodSig: "()I", methodCache: &Scanner.nextInt_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.util.Scanner.nextInt(int)

    private static var nextInt_MethodID_17: jmethodID?

    open func nextInt( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "nextInt", methodSig: "(I)I", methodCache: &Scanner.nextInt_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func nextInt( _ _arg0: Int ) -> Int {
        return nextInt( arg0: _arg0 )
    }

    /// public double java.util.Scanner.nextDouble()

    private static var nextDouble_MethodID_18: jmethodID?

    open func nextDouble() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "nextDouble", methodSig: "()D", methodCache: &Scanner.nextDouble_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public long java.util.Scanner.nextLong()

    private static var nextLong_MethodID_19: jmethodID?

    open func nextLong() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "nextLong", methodSig: "()J", methodCache: &Scanner.nextLong_MethodID_19, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }


    /// public long java.util.Scanner.nextLong(int)

    private static var nextLong_MethodID_20: jmethodID?

    open func nextLong( arg0: Int ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "nextLong", methodSig: "(I)J", methodCache: &Scanner.nextLong_MethodID_20, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open func nextLong( _ _arg0: Int ) -> Int64 {
        return nextLong( arg0: _arg0 )
    }

    /// public java.util.Scanner java.util.Scanner.skip(java.util.regex.Pattern)

    private static var skip_MethodID_21: jmethodID?

    open func skip( arg0: Pattern? ) -> Scanner! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "skip", methodSig: "(Ljava/util/regex/Pattern;)Ljava/util/Scanner;", methodCache: &Scanner.skip_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Scanner( javaObject: __return ) : nil
    }

    open func skip( _ _arg0: Pattern? ) -> Scanner! {
        return skip( arg0: _arg0 )
    }

    /// public java.util.Scanner java.util.Scanner.skip(java.lang.String)

    private static var skip_MethodID_22: jmethodID?

    open func skip( arg0: String? ) -> Scanner! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "skip", methodSig: "(Ljava/lang/String;)Ljava/util/Scanner;", methodCache: &Scanner.skip_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Scanner( javaObject: __return ) : nil
    }

    open func skip( _ _arg0: String? ) -> Scanner! {
        return skip( arg0: _arg0 )
    }

    /// private void java.util.Scanner.ensureOpen()

    /// public java.util.Locale java.util.Scanner.locale()

    private static var locale_MethodID_23: jmethodID?

    open func locale() -> JavaLocale! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "locale", methodSig: "()Ljava/util/Locale;", methodCache: &Scanner.locale_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaLocale( javaObject: __return ) : nil
    }


    /// public java.util.regex.MatchResult java.util.Scanner.match()

    private static var match_MethodID_24: jmethodID?

    open func match() -> MatchResult! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "match", methodSig: "()Ljava/util/regex/MatchResult;", methodCache: &Scanner.match_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? MatchResultForward( javaObject: __return ) : nil
    }


    /// public boolean java.util.Scanner.nextBoolean()

    private static var nextBoolean_MethodID_25: jmethodID?

    open func nextBoolean() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "nextBoolean", methodSig: "()Z", methodCache: &Scanner.nextBoolean_MethodID_25, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public float java.util.Scanner.nextFloat()

    private static var nextFloat_MethodID_26: jmethodID?

    open func nextFloat() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "nextFloat", methodSig: "()F", methodCache: &Scanner.nextFloat_MethodID_26, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


    /// public java.io.IOException java.util.Scanner.ioException()

    private static var ioException_MethodID_27: jmethodID?

    open func ioException() -> /* java.io.IOException */ UnclassedObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "ioException", methodSig: "()Ljava/io/IOException;", methodCache: &Scanner.ioException_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.io.IOException */ UnclassedObject( javaObject: __return ) : nil
    }


    /// public int java.util.Scanner.radix()

    private static var radix_MethodID_28: jmethodID?

    open func radix() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "radix", methodSig: "()I", methodCache: &Scanner.radix_MethodID_28, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// private static java.util.regex.Pattern java.util.Scanner.boolPattern()

    /// private java.util.regex.Pattern java.util.Scanner.integerPattern()

    /// private static java.util.regex.Pattern java.util.Scanner.separatorPattern()

    /// private static java.util.regex.Pattern java.util.Scanner.linePattern()

    /// private java.util.regex.Pattern java.util.Scanner.floatPattern()

    /// private java.util.regex.Pattern java.util.Scanner.decimalPattern()

    /// private java.lang.String java.util.Scanner.buildIntegerPatternString()

    /// private void java.util.Scanner.buildFloatAndDecimalPattern()

    /// private static java.lang.Readable java.util.Scanner.makeReadable(java.io.InputStream,java.lang.String)

    /// private static java.lang.Readable java.util.Scanner.makeReadable(java.nio.channels.ReadableByteChannel)

    /// private static java.lang.Readable java.util.Scanner.makeReadable(java.nio.channels.ReadableByteChannel,java.lang.String)

    /// private void java.util.Scanner.saveState()

    /// private void java.util.Scanner.revertState()

    /// private boolean java.util.Scanner.revertState(boolean)

    /// private void java.util.Scanner.cacheResult(java.lang.String)

    /// private void java.util.Scanner.cacheResult()

    /// private void java.util.Scanner.clearCaches()

    /// private java.lang.String java.util.Scanner.getCachedResult()

    /// private void java.util.Scanner.useTypeCache()

    /// private void java.util.Scanner.readInput()

    /// private boolean java.util.Scanner.makeSpace()

    /// private void java.util.Scanner.translateSavedIndexes(int)

    /// private void java.util.Scanner.throwFor()

    /// private boolean java.util.Scanner.hasTokenInBuffer()

    /// private java.lang.String java.util.Scanner.getCompleteTokenInBuffer(java.util.regex.Pattern)

    /// private java.lang.String java.util.Scanner.findPatternInBuffer(java.util.regex.Pattern,int)

    /// private java.lang.String java.util.Scanner.matchPatternInBuffer(java.util.regex.Pattern)

    /// public java.util.regex.Pattern java.util.Scanner.delimiter()

    private static var delimiter_MethodID_29: jmethodID?

    open func delimiter() -> Pattern! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "delimiter", methodSig: "()Ljava/util/regex/Pattern;", methodCache: &Scanner.delimiter_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Pattern( javaObject: __return ) : nil
    }


    /// public java.util.Scanner java.util.Scanner.useDelimiter(java.lang.String)

    private static var useDelimiter_MethodID_30: jmethodID?

    open func useDelimiter( arg0: String? ) -> Scanner! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "useDelimiter", methodSig: "(Ljava/lang/String;)Ljava/util/Scanner;", methodCache: &Scanner.useDelimiter_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Scanner( javaObject: __return ) : nil
    }

    open func useDelimiter( _ _arg0: String? ) -> Scanner! {
        return useDelimiter( arg0: _arg0 )
    }

    /// public java.util.Scanner java.util.Scanner.useDelimiter(java.util.regex.Pattern)

    private static var useDelimiter_MethodID_31: jmethodID?

    open func useDelimiter( arg0: Pattern? ) -> Scanner! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "useDelimiter", methodSig: "(Ljava/util/regex/Pattern;)Ljava/util/Scanner;", methodCache: &Scanner.useDelimiter_MethodID_31, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Scanner( javaObject: __return ) : nil
    }

    open func useDelimiter( _ _arg0: Pattern? ) -> Scanner! {
        return useDelimiter( arg0: _arg0 )
    }

    /// public java.util.Scanner java.util.Scanner.useLocale(java.util.Locale)

    private static var useLocale_MethodID_32: jmethodID?

    open func useLocale( arg0: JavaLocale? ) -> Scanner! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "useLocale", methodSig: "(Ljava/util/Locale;)Ljava/util/Scanner;", methodCache: &Scanner.useLocale_MethodID_32, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Scanner( javaObject: __return ) : nil
    }

    open func useLocale( _ _arg0: JavaLocale? ) -> Scanner! {
        return useLocale( arg0: _arg0 )
    }

    /// public java.util.Scanner java.util.Scanner.useRadix(int)

    private static var useRadix_MethodID_33: jmethodID?

    open func useRadix( arg0: Int ) -> Scanner! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "useRadix", methodSig: "(I)Ljava/util/Scanner;", methodCache: &Scanner.useRadix_MethodID_33, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Scanner( javaObject: __return ) : nil
    }

    open func useRadix( _ _arg0: Int ) -> Scanner! {
        return useRadix( arg0: _arg0 )
    }

    /// private void java.util.Scanner.setRadix(int)

    /// public boolean java.util.Scanner.hasNextLine()

    private static var hasNextLine_MethodID_34: jmethodID?

    open func hasNextLine() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNextLine", methodSig: "()Z", methodCache: &Scanner.hasNextLine_MethodID_34, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public java.lang.String java.util.Scanner.nextLine()

    private static var nextLine_MethodID_35: jmethodID?

    open func nextLine() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "nextLine", methodSig: "()Ljava/lang/String;", methodCache: &Scanner.nextLine_MethodID_35, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public java.lang.String java.util.Scanner.findInLine(java.util.regex.Pattern)

    private static var findInLine_MethodID_36: jmethodID?

    open func findInLine( arg0: Pattern? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "findInLine", methodSig: "(Ljava/util/regex/Pattern;)Ljava/lang/String;", methodCache: &Scanner.findInLine_MethodID_36, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func findInLine( _ _arg0: Pattern? ) -> String! {
        return findInLine( arg0: _arg0 )
    }

    /// public java.lang.String java.util.Scanner.findInLine(java.lang.String)

    private static var findInLine_MethodID_37: jmethodID?

    open func findInLine( arg0: String? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "findInLine", methodSig: "(Ljava/lang/String;)Ljava/lang/String;", methodCache: &Scanner.findInLine_MethodID_37, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func findInLine( _ _arg0: String? ) -> String! {
        return findInLine( arg0: _arg0 )
    }

    /// public java.lang.String java.util.Scanner.findWithinHorizon(java.util.regex.Pattern,int)

    private static var findWithinHorizon_MethodID_38: jmethodID?

    open func findWithinHorizon( arg0: Pattern?, arg1: Int ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "findWithinHorizon", methodSig: "(Ljava/util/regex/Pattern;I)Ljava/lang/String;", methodCache: &Scanner.findWithinHorizon_MethodID_38, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func findWithinHorizon( _ _arg0: Pattern?, _ _arg1: Int ) -> String! {
        return findWithinHorizon( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.lang.String java.util.Scanner.findWithinHorizon(java.lang.String,int)

    private static var findWithinHorizon_MethodID_39: jmethodID?

    open func findWithinHorizon( arg0: String?, arg1: Int ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "findWithinHorizon", methodSig: "(Ljava/lang/String;I)Ljava/lang/String;", methodCache: &Scanner.findWithinHorizon_MethodID_39, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func findWithinHorizon( _ _arg0: String?, _ _arg1: Int ) -> String! {
        return findWithinHorizon( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.util.Scanner.hasNextBoolean()

    private static var hasNextBoolean_MethodID_40: jmethodID?

    open func hasNextBoolean() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNextBoolean", methodSig: "()Z", methodCache: &Scanner.hasNextBoolean_MethodID_40, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public boolean java.util.Scanner.hasNextByte(int)

    private static var hasNextByte_MethodID_41: jmethodID?

    open func hasNextByte( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNextByte", methodSig: "(I)Z", methodCache: &Scanner.hasNextByte_MethodID_41, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func hasNextByte( _ _arg0: Int ) -> Bool {
        return hasNextByte( arg0: _arg0 )
    }

    /// public boolean java.util.Scanner.hasNextByte()

    private static var hasNextByte_MethodID_42: jmethodID?

    open func hasNextByte() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNextByte", methodSig: "()Z", methodCache: &Scanner.hasNextByte_MethodID_42, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public byte java.util.Scanner.nextByte()

    private static var nextByte_MethodID_43: jmethodID?

    open func nextByte() -> Int8 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallByteMethod( object: javaObject, methodName: "nextByte", methodSig: "()B", methodCache: &Scanner.nextByte_MethodID_43, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int8(), from: __return )
    }


    /// public byte java.util.Scanner.nextByte(int)

    private static var nextByte_MethodID_44: jmethodID?

    open func nextByte( arg0: Int ) -> Int8 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallByteMethod( object: javaObject, methodName: "nextByte", methodSig: "(I)B", methodCache: &Scanner.nextByte_MethodID_44, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int8(), from: __return )
    }

    open func nextByte( _ _arg0: Int ) -> Int8 {
        return nextByte( arg0: _arg0 )
    }

    /// public boolean java.util.Scanner.hasNextShort()

    private static var hasNextShort_MethodID_45: jmethodID?

    open func hasNextShort() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNextShort", methodSig: "()Z", methodCache: &Scanner.hasNextShort_MethodID_45, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public boolean java.util.Scanner.hasNextShort(int)

    private static var hasNextShort_MethodID_46: jmethodID?

    open func hasNextShort( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNextShort", methodSig: "(I)Z", methodCache: &Scanner.hasNextShort_MethodID_46, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func hasNextShort( _ _arg0: Int ) -> Bool {
        return hasNextShort( arg0: _arg0 )
    }

    /// public short java.util.Scanner.nextShort(int)

    private static var nextShort_MethodID_47: jmethodID?

    open func nextShort( arg0: Int ) -> Int16 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallShortMethod( object: javaObject, methodName: "nextShort", methodSig: "(I)S", methodCache: &Scanner.nextShort_MethodID_47, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int16(), from: __return )
    }

    open func nextShort( _ _arg0: Int ) -> Int16 {
        return nextShort( arg0: _arg0 )
    }

    /// public short java.util.Scanner.nextShort()

    private static var nextShort_MethodID_48: jmethodID?

    open func nextShort() -> Int16 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallShortMethod( object: javaObject, methodName: "nextShort", methodSig: "()S", methodCache: &Scanner.nextShort_MethodID_48, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int16(), from: __return )
    }


    /// public boolean java.util.Scanner.hasNextInt(int)

    private static var hasNextInt_MethodID_49: jmethodID?

    open func hasNextInt( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNextInt", methodSig: "(I)Z", methodCache: &Scanner.hasNextInt_MethodID_49, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func hasNextInt( _ _arg0: Int ) -> Bool {
        return hasNextInt( arg0: _arg0 )
    }

    /// public boolean java.util.Scanner.hasNextInt()

    private static var hasNextInt_MethodID_50: jmethodID?

    open func hasNextInt() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNextInt", methodSig: "()Z", methodCache: &Scanner.hasNextInt_MethodID_50, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// private java.lang.String java.util.Scanner.processIntegerToken(java.lang.String)

    /// public boolean java.util.Scanner.hasNextLong(int)

    private static var hasNextLong_MethodID_51: jmethodID?

    open func hasNextLong( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNextLong", methodSig: "(I)Z", methodCache: &Scanner.hasNextLong_MethodID_51, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func hasNextLong( _ _arg0: Int ) -> Bool {
        return hasNextLong( arg0: _arg0 )
    }

    /// public boolean java.util.Scanner.hasNextLong()

    private static var hasNextLong_MethodID_52: jmethodID?

    open func hasNextLong() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNextLong", methodSig: "()Z", methodCache: &Scanner.hasNextLong_MethodID_52, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// private java.lang.String java.util.Scanner.processFloatToken(java.lang.String)

    /// public boolean java.util.Scanner.hasNextFloat()

    private static var hasNextFloat_MethodID_53: jmethodID?

    open func hasNextFloat() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNextFloat", methodSig: "()Z", methodCache: &Scanner.hasNextFloat_MethodID_53, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public boolean java.util.Scanner.hasNextDouble()

    private static var hasNextDouble_MethodID_54: jmethodID?

    open func hasNextDouble() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNextDouble", methodSig: "()Z", methodCache: &Scanner.hasNextDouble_MethodID_54, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public boolean java.util.Scanner.hasNextBigInteger(int)

    private static var hasNextBigInteger_MethodID_55: jmethodID?

    open func hasNextBigInteger( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNextBigInteger", methodSig: "(I)Z", methodCache: &Scanner.hasNextBigInteger_MethodID_55, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func hasNextBigInteger( _ _arg0: Int ) -> Bool {
        return hasNextBigInteger( arg0: _arg0 )
    }

    /// public boolean java.util.Scanner.hasNextBigInteger()

    private static var hasNextBigInteger_MethodID_56: jmethodID?

    open func hasNextBigInteger() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNextBigInteger", methodSig: "()Z", methodCache: &Scanner.hasNextBigInteger_MethodID_56, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public java.math.BigInteger java.util.Scanner.nextBigInteger()

    private static var nextBigInteger_MethodID_57: jmethodID?

    open func nextBigInteger() -> /* java.math.BigInteger */ UnclassedObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "nextBigInteger", methodSig: "()Ljava/math/BigInteger;", methodCache: &Scanner.nextBigInteger_MethodID_57, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.math.BigInteger */ UnclassedObject( javaObject: __return ) : nil
    }


    /// public java.math.BigInteger java.util.Scanner.nextBigInteger(int)

    private static var nextBigInteger_MethodID_58: jmethodID?

    open func nextBigInteger( arg0: Int ) -> /* java.math.BigInteger */ UnclassedObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "nextBigInteger", methodSig: "(I)Ljava/math/BigInteger;", methodCache: &Scanner.nextBigInteger_MethodID_58, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.math.BigInteger */ UnclassedObject( javaObject: __return ) : nil
    }

    open func nextBigInteger( _ _arg0: Int ) -> /* java.math.BigInteger */ UnclassedObject! {
        return nextBigInteger( arg0: _arg0 )
    }

    /// public boolean java.util.Scanner.hasNextBigDecimal()

    private static var hasNextBigDecimal_MethodID_59: jmethodID?

    open func hasNextBigDecimal() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNextBigDecimal", methodSig: "()Z", methodCache: &Scanner.hasNextBigDecimal_MethodID_59, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public java.math.BigDecimal java.util.Scanner.nextBigDecimal()

    private static var nextBigDecimal_MethodID_60: jmethodID?

    open func nextBigDecimal() -> /* java.math.BigDecimal */ UnclassedObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "nextBigDecimal", methodSig: "()Ljava/math/BigDecimal;", methodCache: &Scanner.nextBigDecimal_MethodID_60, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.math.BigDecimal */ UnclassedObject( javaObject: __return ) : nil
    }


}
