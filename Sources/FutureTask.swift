
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:48 GMT 2016 ///

/// class java.util.concurrent.FutureTask ///

open class FutureTask: java_lang.JavaObject, RunnableFuture {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.FutureTask", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var FutureTaskJNIClass: jclass?

    /// private final java.util.concurrent.FutureTask$Sync java.util.concurrent.FutureTask.sync

    /// public java.util.concurrent.FutureTask(java.util.concurrent.Callable)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Callable? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/FutureTask", classCache: &FutureTask.FutureTaskJNIClass, methodSig: "(Ljava/util/concurrent/Callable;)V", methodCache: &FutureTask.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Callable? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.concurrent.FutureTask(java.lang.Runnable,java.lang.Object)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: java_lang.Runnable?, arg1: java_lang.JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/FutureTask", classCache: &FutureTask.FutureTaskJNIClass, methodSig: "(Ljava/lang/Runnable;Ljava/lang/Object;)V", methodCache: &FutureTask.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: java_lang.Runnable?, _ _arg1: java_lang.JavaObject? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.util.concurrent.FutureTask.run()

    private static var run_MethodID_3: jmethodID?

    open func run() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "run", methodSig: "()V", methodCache: &FutureTask.run_MethodID_3, args: &__args, locals: &__locals )
    }


    /// public java.lang.Object java.util.concurrent.FutureTask.get(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException,java.util.concurrent.ExecutionException,java.util.concurrent.TimeoutException

    private static var get_MethodID_4: jmethodID?

    open func get( arg0: Int64, arg1: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", methodCache: &FutureTask.get_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func get( _ _arg0: Int64, _ _arg1: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_lang.JavaObject! {
        return try get( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.lang.Object java.util.concurrent.FutureTask.get() throws java.lang.InterruptedException,java.util.concurrent.ExecutionException

    private static var get_MethodID_5: jmethodID?

    open func get() throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "()Ljava/lang/Object;", methodCache: &FutureTask.get_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// protected void java.util.concurrent.FutureTask.set(java.lang.Object)

    private static var set_MethodID_6: jmethodID?

    open func set( arg0: java_lang.JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "set", methodSig: "(Ljava/lang/Object;)V", methodCache: &FutureTask.set_MethodID_6, args: &__args, locals: &__locals )
    }

    open func set( _ _arg0: java_lang.JavaObject? ) {
        set( arg0: _arg0 )
    }

    /// public boolean java.util.concurrent.FutureTask.cancel(boolean)

    private static var cancel_MethodID_7: jmethodID?

    open func cancel( arg0: Bool ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "cancel", methodSig: "(Z)Z", methodCache: &FutureTask.cancel_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func cancel( _ _arg0: Bool ) -> Bool {
        return cancel( arg0: _arg0 )
    }

    /// public boolean java.util.concurrent.FutureTask.isDone()

    private static var isDone_MethodID_8: jmethodID?

    open func isDone() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isDone", methodSig: "()Z", methodCache: &FutureTask.isDone_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public boolean java.util.concurrent.FutureTask.isCancelled()

    private static var isCancelled_MethodID_9: jmethodID?

    open func isCancelled() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isCancelled", methodSig: "()Z", methodCache: &FutureTask.isCancelled_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// protected void java.util.concurrent.FutureTask.done()

    private static var done_MethodID_10: jmethodID?

    open func done() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "done", methodSig: "()V", methodCache: &FutureTask.done_MethodID_10, args: &__args, locals: &__locals )
    }


    /// protected void java.util.concurrent.FutureTask.setException(java.lang.Throwable)

    private static var setException_MethodID_11: jmethodID?

    open func setException( arg0: java_lang.Throwable? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setException", methodSig: "(Ljava/lang/Throwable;)V", methodCache: &FutureTask.setException_MethodID_11, args: &__args, locals: &__locals )
    }

    open func setException( _ _arg0: java_lang.Throwable? ) {
        setException( arg0: _arg0 )
    }

    /// protected boolean java.util.concurrent.FutureTask.runAndReset()

    private static var runAndReset_MethodID_12: jmethodID?

    open func runAndReset() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "runAndReset", methodSig: "()Z", methodCache: &FutureTask.runAndReset_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


}
