
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:55 GMT 2016 ///

/// interface java.util.prefs.NodeChangeListener ///

public protocol NodeChangeListener: EventListener {

    /// public abstract void java.util.prefs.NodeChangeListener.childAdded(java.util.prefs.NodeChangeEvent)

    func childAdded( arg0: NodeChangeEvent? )
    func childAdded( _ _arg0: NodeChangeEvent? )

    /// public abstract void java.util.prefs.NodeChangeListener.childRemoved(java.util.prefs.NodeChangeEvent)

    func childRemoved( arg0: NodeChangeEvent? )
    func childRemoved( _ _arg0: NodeChangeEvent? )

}

open class NodeChangeListenerForward: EventListenerForward, NodeChangeListener {

    private static var NodeChangeListenerJNIClass: jclass?

    /// public abstract void java.util.prefs.NodeChangeListener.childAdded(java.util.prefs.NodeChangeEvent)

    private static var childAdded_MethodID_3: jmethodID?

    open func childAdded( arg0: NodeChangeEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "childAdded", methodSig: "(Ljava/util/prefs/NodeChangeEvent;)V", methodCache: &NodeChangeListenerForward.childAdded_MethodID_3, args: &__args, locals: &__locals )
    }

    open func childAdded( _ _arg0: NodeChangeEvent? ) {
        childAdded( arg0: _arg0 )
    }

    /// public abstract void java.util.prefs.NodeChangeListener.childRemoved(java.util.prefs.NodeChangeEvent)

    private static var childRemoved_MethodID_4: jmethodID?

    open func childRemoved( arg0: NodeChangeEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "childRemoved", methodSig: "(Ljava/util/prefs/NodeChangeEvent;)V", methodCache: &NodeChangeListenerForward.childRemoved_MethodID_4, args: &__args, locals: &__locals )
    }

    open func childRemoved( _ _arg0: NodeChangeEvent? ) {
        childRemoved( arg0: _arg0 )
    }

}


private typealias NodeChangeListener_childAdded_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func NodeChangeListener_childAdded_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    NodeChangeListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).childAdded( arg0 != nil ? NodeChangeEvent( javaObject: arg0 ) : nil )
}

private typealias NodeChangeListener_childRemoved_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func NodeChangeListener_childRemoved_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    NodeChangeListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).childRemoved( arg0 != nil ? NodeChangeEvent( javaObject: arg0 ) : nil )
}

open class NodeChangeListenerBase: JNIObjectProxy, NodeChangeListener {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let NodeChangeListener_childAdded_0_thunk: NodeChangeListener_childAdded_0_type = NodeChangeListener_childAdded_0
            natives.append( JNINativeMethod( name: strdup("__childAdded"), signature: strdup("(Ljava/util/prefs/NodeChangeEvent;)V"), fnPtr: unsafeBitCast( NodeChangeListener_childAdded_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let NodeChangeListener_childRemoved_1_thunk: NodeChangeListener_childRemoved_1_type = NodeChangeListener_childRemoved_1
            natives.append( JNINativeMethod( name: strdup("__childRemoved"), signature: strdup("(Ljava/util/prefs/NodeChangeEvent;)V"), fnPtr: unsafeBitCast( NodeChangeListener_childRemoved_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_util/NodeChangeListenerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        NodeChangeListenerBase.registerNatives()
        createProxy( javaClassName: "org/genie/java_util/NodeChangeListenerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> NodeChangeListenerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: NodeChangeListenerBase.self )
    }

    /// public abstract void java.util.prefs.NodeChangeListener.childAdded(java.util.prefs.NodeChangeEvent)

    open func childAdded( arg0: NodeChangeEvent? ) /**/ {
    }

    open func childAdded( _ _arg0: NodeChangeEvent? ) /**/ {
        childAdded( arg0: _arg0 )
    }

    /// public abstract void java.util.prefs.NodeChangeListener.childRemoved(java.util.prefs.NodeChangeEvent)

    open func childRemoved( arg0: NodeChangeEvent? ) /**/ {
    }

    open func childRemoved( _ _arg0: NodeChangeEvent? ) /**/ {
        childRemoved( arg0: _arg0 )
    }

}
