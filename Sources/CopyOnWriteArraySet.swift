
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.concurrent.CopyOnWriteArraySet ///

open class CopyOnWriteArraySet: AbstractSet {////}, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.CopyOnWriteArraySet", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CopyOnWriteArraySetJNIClass: jclass?

    /// private static final long java.util.concurrent.CopyOnWriteArraySet.serialVersionUID

    /// private final java.util.concurrent.CopyOnWriteArrayList java.util.concurrent.CopyOnWriteArraySet.al

    /// private static final int java.util.AbstractCollection.MAX_ARRAY_SIZE

    /// public java.util.concurrent.CopyOnWriteArraySet()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/CopyOnWriteArraySet", classCache: &CopyOnWriteArraySet.CopyOnWriteArraySetJNIClass, methodSig: "()V", methodCache: &CopyOnWriteArraySet.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.concurrent.CopyOnWriteArraySet(java.util.Collection)

    private static var new_MethodID_2: jmethodID?

    public convenience init( c: Collection? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/CopyOnWriteArraySet", classCache: &CopyOnWriteArraySet.CopyOnWriteArraySetJNIClass, methodSig: "(Ljava/util/Collection;)V", methodCache: &CopyOnWriteArraySet.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _c: Collection? ) {
        self.init( c: _c )
    }

    /// public boolean java.util.concurrent.CopyOnWriteArraySet.add(java.lang.Object)

    /// public boolean java.util.concurrent.CopyOnWriteArraySet.remove(java.lang.Object)

    /// public boolean java.util.concurrent.CopyOnWriteArraySet.equals(java.lang.Object)

    /// public void java.util.concurrent.CopyOnWriteArraySet.clear()

    /// public boolean java.util.concurrent.CopyOnWriteArraySet.isEmpty()

    /// public boolean java.util.concurrent.CopyOnWriteArraySet.contains(java.lang.Object)

    /// public int java.util.concurrent.CopyOnWriteArraySet.size()

    /// public java.lang.Object[] java.util.concurrent.CopyOnWriteArraySet.toArray()

    /// public java.lang.Object[] java.util.concurrent.CopyOnWriteArraySet.toArray(java.lang.Object[])

    /// public java.util.Iterator java.util.concurrent.CopyOnWriteArraySet.iterator()

    /// public java.util.Spliterator java.util.concurrent.CopyOnWriteArraySet.spliterator()

    /// public boolean java.util.concurrent.CopyOnWriteArraySet.addAll(java.util.Collection)

    /// public void java.util.concurrent.CopyOnWriteArraySet.forEach(java.util.function.Consumer)

    /// public boolean java.util.concurrent.CopyOnWriteArraySet.containsAll(java.util.Collection)

    /// public boolean java.util.concurrent.CopyOnWriteArraySet.removeAll(java.util.Collection)

    /// public boolean java.util.concurrent.CopyOnWriteArraySet.retainAll(java.util.Collection)

    /// public boolean java.util.concurrent.CopyOnWriteArraySet.removeIf(java.util.function.Predicate)

    /// private static boolean java.util.concurrent.CopyOnWriteArraySet.eq(java.lang.Object,java.lang.Object)

}

