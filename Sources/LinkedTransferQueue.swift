
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.concurrent.LinkedTransferQueue ///

open class LinkedTransferQueue: AbstractQueue, TransferQueue, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.LinkedTransferQueue", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var LinkedTransferQueueJNIClass: jclass?

    /// private static final long java.util.concurrent.LinkedTransferQueue.serialVersionUID

    /// private static final boolean java.util.concurrent.LinkedTransferQueue.MP

    /// private static final int java.util.concurrent.LinkedTransferQueue.FRONT_SPINS

    /// private static final int java.util.concurrent.LinkedTransferQueue.CHAINED_SPINS

    /// static final int java.util.concurrent.LinkedTransferQueue.SWEEP_THRESHOLD

    /// transient volatile java.util.concurrent.LinkedTransferQueue$Node java.util.concurrent.LinkedTransferQueue.head

    /// private transient volatile java.util.concurrent.LinkedTransferQueue$Node java.util.concurrent.LinkedTransferQueue.tail

    /// private transient volatile int java.util.concurrent.LinkedTransferQueue.sweepVotes

    /// private static final int java.util.concurrent.LinkedTransferQueue.NOW

    /// private static final int java.util.concurrent.LinkedTransferQueue.ASYNC

    /// private static final int java.util.concurrent.LinkedTransferQueue.SYNC

    /// private static final int java.util.concurrent.LinkedTransferQueue.TIMED

    /// private static final sun.misc.Unsafe java.util.concurrent.LinkedTransferQueue.UNSAFE

    /// private static final long java.util.concurrent.LinkedTransferQueue.headOffset

    /// private static final long java.util.concurrent.LinkedTransferQueue.tailOffset

    /// private static final long java.util.concurrent.LinkedTransferQueue.sweepVotesOffset

    /// private static final int java.util.AbstractCollection.MAX_ARRAY_SIZE

    /// public java.util.concurrent.LinkedTransferQueue()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/LinkedTransferQueue", classCache: &LinkedTransferQueue.LinkedTransferQueueJNIClass, methodSig: "()V", methodCache: &LinkedTransferQueue.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.concurrent.LinkedTransferQueue(java.util.Collection)

    private static var new_MethodID_2: jmethodID?

    public convenience init( c: Collection? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/LinkedTransferQueue", classCache: &LinkedTransferQueue.LinkedTransferQueueJNIClass, methodSig: "(Ljava/util/Collection;)V", methodCache: &LinkedTransferQueue.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _c: Collection? ) {
        self.init( c: _c )
    }

    /// public boolean java.util.concurrent.LinkedTransferQueue.add(java.lang.Object)

    /// public boolean java.util.concurrent.LinkedTransferQueue.remove(java.lang.Object)

    /// public void java.util.concurrent.LinkedTransferQueue.put(java.lang.Object)

    private static var put_MethodID_3: jmethodID?

    open func put( e: java_swift.JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "put", methodSig: "(Ljava/lang/Object;)V", methodCache: &LinkedTransferQueue.put_MethodID_3, args: &__args, locals: &__locals )
    }

    open func put( _ _e: java_swift.JavaObject? ) {
        put( e: _e )
    }

    /// public boolean java.util.concurrent.LinkedTransferQueue.isEmpty()

    /// public boolean java.util.concurrent.LinkedTransferQueue.contains(java.lang.Object)

    /// public int java.util.concurrent.LinkedTransferQueue.size()

    /// public java.util.Iterator java.util.concurrent.LinkedTransferQueue.iterator()

    /// public java.util.Spliterator java.util.concurrent.LinkedTransferQueue.spliterator()

    /// static java.lang.Object java.util.concurrent.LinkedTransferQueue.cast(java.lang.Object)

    /// private void java.util.concurrent.LinkedTransferQueue.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// private void java.util.concurrent.LinkedTransferQueue.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// public java.lang.Object java.util.concurrent.LinkedTransferQueue.poll()

    /// public java.lang.Object java.util.concurrent.LinkedTransferQueue.poll(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var poll_MethodID_4: jmethodID?

    open func poll( timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: timeout, locals: &__locals )
        __args[1] = JNIType.toJava( value: unit != nil ? unit! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "poll", methodSig: "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", methodCache: &LinkedTransferQueue.poll_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func poll( _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
        return try poll( timeout: _timeout, unit: _unit )
    }

    /// public java.lang.Object java.util.concurrent.LinkedTransferQueue.peek()

    /// public void java.util.concurrent.LinkedTransferQueue.transfer(java.lang.Object) throws java.lang.InterruptedException

    private static var transfer_MethodID_5: jmethodID?

    open func transfer( e: java_swift.JavaObject? ) throws /* java.lang.InterruptedException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "transfer", methodSig: "(Ljava/lang/Object;)V", methodCache: &LinkedTransferQueue.transfer_MethodID_5, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
    }

    open func transfer( _ _e: java_swift.JavaObject? ) throws /* java.lang.InterruptedException */ {
        try transfer( e: _e )
    }

    /// final java.util.concurrent.LinkedTransferQueue$Node java.util.concurrent.LinkedTransferQueue.succ(java.util.concurrent.LinkedTransferQueue$Node)

    /// final void java.util.concurrent.LinkedTransferQueue.unsplice(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node)

    /// final java.util.concurrent.LinkedTransferQueue$Node java.util.concurrent.LinkedTransferQueue.firstDataNode()

    /// private boolean java.util.concurrent.LinkedTransferQueue.casSweepVotes(int,int)

    /// private java.lang.Object java.util.concurrent.LinkedTransferQueue.xfer(java.lang.Object,boolean,int,long)

    /// private java.util.concurrent.LinkedTransferQueue$Node java.util.concurrent.LinkedTransferQueue.tryAppend(java.util.concurrent.LinkedTransferQueue$Node,boolean)

    /// private java.lang.Object java.util.concurrent.LinkedTransferQueue.awaitMatch(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node,java.lang.Object,boolean,long)

    /// private static int java.util.concurrent.LinkedTransferQueue.spinsFor(java.util.concurrent.LinkedTransferQueue$Node,boolean)

    /// private java.util.concurrent.LinkedTransferQueue$Node java.util.concurrent.LinkedTransferQueue.firstOfMode(boolean)

    /// private java.lang.Object java.util.concurrent.LinkedTransferQueue.firstDataItem()

    /// private int java.util.concurrent.LinkedTransferQueue.countOfMode(boolean)

    /// private void java.util.concurrent.LinkedTransferQueue.sweep()

    /// private boolean java.util.concurrent.LinkedTransferQueue.findAndRemove(java.lang.Object)

    /// public boolean java.util.concurrent.LinkedTransferQueue.tryTransfer(java.lang.Object)

    private static var tryTransfer_MethodID_6: jmethodID?

    open func tryTransfer( e: java_swift.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "tryTransfer", methodSig: "(Ljava/lang/Object;)Z", methodCache: &LinkedTransferQueue.tryTransfer_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    open func tryTransfer( _ _e: java_swift.JavaObject? ) -> Bool {
        return tryTransfer( e: _e )
    }

    /// public boolean java.util.concurrent.LinkedTransferQueue.tryTransfer(java.lang.Object,long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var tryTransfer_MethodID_7: jmethodID?

    open func tryTransfer( e: java_swift.JavaObject?, timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: timeout, locals: &__locals )
        __args[2] = JNIType.toJava( value: unit != nil ? unit! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "tryTransfer", methodSig: "(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", methodCache: &LinkedTransferQueue.tryTransfer_MethodID_7, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    open func tryTransfer( _ _e: java_swift.JavaObject?, _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        return try tryTransfer( e: _e, timeout: _timeout, unit: _unit )
    }

    /// public boolean java.util.concurrent.LinkedTransferQueue.hasWaitingConsumer()

    private static var hasWaitingConsumer_MethodID_8: jmethodID?

    open func hasWaitingConsumer() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasWaitingConsumer", methodSig: "()Z", methodCache: &LinkedTransferQueue.hasWaitingConsumer_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public int java.util.concurrent.LinkedTransferQueue.getWaitingConsumerCount()

    private static var getWaitingConsumerCount_MethodID_9: jmethodID?

    open func getWaitingConsumerCount() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getWaitingConsumerCount", methodSig: "()I", methodCache: &LinkedTransferQueue.getWaitingConsumerCount_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public boolean java.util.concurrent.LinkedTransferQueue.offer(java.lang.Object,long,java.util.concurrent.TimeUnit)

    private static var offer_MethodID_10: jmethodID?

    open func offer( e: java_swift.JavaObject?, timeout: Int64, unit: TimeUnit? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: timeout, locals: &__locals )
        __args[2] = JNIType.toJava( value: unit != nil ? unit! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "offer", methodSig: "(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", methodCache: &LinkedTransferQueue.offer_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    open func offer( _ _e: java_swift.JavaObject?, _ _timeout: Int64, _ _unit: TimeUnit? ) -> Bool {
        return offer( e: _e, timeout: _timeout, unit: _unit )
    }

    /// public boolean java.util.concurrent.LinkedTransferQueue.offer(java.lang.Object)

    /// public java.lang.Object java.util.concurrent.LinkedTransferQueue.take() throws java.lang.InterruptedException

    private static var take_MethodID_11: jmethodID?

    open func take() throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "take", methodSig: "()Ljava/lang/Object;", methodCache: &LinkedTransferQueue.take_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public int java.util.concurrent.LinkedTransferQueue.remainingCapacity()

    private static var remainingCapacity_MethodID_12: jmethodID?

    open func remainingCapacity() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "remainingCapacity", methodSig: "()I", methodCache: &LinkedTransferQueue.remainingCapacity_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public int java.util.concurrent.LinkedTransferQueue.drainTo(java.util.Collection,int)

    private static var drainTo_MethodID_13: jmethodID?

    open func drainTo( c: Collection?, maxElements: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        __args[1] = JNIType.toJava( value: maxElements, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "drainTo", methodSig: "(Ljava/util/Collection;I)I", methodCache: &LinkedTransferQueue.drainTo_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    open func drainTo( _ _c: Collection?, _ _maxElements: Int ) -> Int {
        return drainTo( c: _c, maxElements: _maxElements )
    }

    /// public int java.util.concurrent.LinkedTransferQueue.drainTo(java.util.Collection)

    private static var drainTo_MethodID_14: jmethodID?

    open func drainTo( c: Collection? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "drainTo", methodSig: "(Ljava/util/Collection;)I", methodCache: &LinkedTransferQueue.drainTo_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    open func drainTo( _ _c: Collection? ) -> Int {
        return drainTo( c: _c )
    }

    /// private boolean java.util.concurrent.LinkedTransferQueue.casHead(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node)

    /// private boolean java.util.concurrent.LinkedTransferQueue.casTail(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node)

    /// In declared protocol but not defined.. ///

    /// public abstract boolean java.util.Collection.equals(java.lang.Object)

    private static var equals_MethodID_15: jmethodID?

    override open func equals( o: java_swift.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: o != nil ? o! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &LinkedTransferQueue.equals_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
        return equals( o: _o )
    }

    /// public abstract boolean java.util.Collection.containsAll(java.util.Collection)

    /// public abstract java.lang.Object java.util.Queue.peek()

    /// public abstract boolean java.util.Collection.remove(java.lang.Object)

    /// public abstract boolean java.util.Collection.removeAll(java.util.Collection)

    /// public abstract java.lang.Object[] java.util.Collection.toArray()

    /// public abstract boolean java.util.Collection.contains(java.lang.Object)

    /// public abstract java.lang.Object[] java.util.Collection.toArray(java.lang.Object[])

    /// public abstract int java.util.Collection.hashCode()

    /// public default void java.lang.Iterable.forEach(java.util.function.Consumer)

    /// public default boolean java.util.Collection.removeIf(java.util.function.Predicate)

    /// public default java.util.stream.Stream java.util.Collection.parallelStream()

    /// public abstract void java.util.Collection.clear()

    /// public abstract boolean java.util.Collection.isEmpty()

    /// public abstract boolean java.util.Collection.addAll(java.util.Collection)

    /// public abstract boolean java.util.Queue.offer(java.lang.Object)

    /// public abstract java.lang.Object java.util.Queue.element()

    /// public abstract java.lang.Object java.util.Queue.remove()

    /// public abstract java.lang.Object java.util.Queue.poll()

    /// public abstract boolean java.util.Collection.retainAll(java.util.Collection)

    /// public abstract java.util.Iterator java.lang.Iterable.iterator()

    /// public default java.util.Spliterator java.lang.Iterable.spliterator()

    /// public abstract boolean java.util.Collection.add(java.lang.Object)

    /// public default java.util.stream.Stream java.util.Collection.stream()

    /// public abstract int java.util.Collection.size()

}

