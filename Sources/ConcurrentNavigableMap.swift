
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:46 GMT 2016 ///

/// interface java.util.concurrent.ConcurrentNavigableMap ///

public protocol ConcurrentNavigableMap: JavaProtocol {

    /// public abstract java.util.NavigableSet java.util.concurrent.ConcurrentNavigableMap.keySet()

    func keySet() -> NavigableSet!

    /// public abstract java.util.NavigableSet java.util.concurrent.ConcurrentNavigableMap.navigableKeySet()

    func navigableKeySet() -> NavigableSet!

    /// public abstract java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentNavigableMap.descendingMap()

    func descendingMap() -> ConcurrentNavigableMap!

    /// public abstract java.util.NavigableSet java.util.concurrent.ConcurrentNavigableMap.descendingKeySet()

    func descendingKeySet() -> NavigableSet!

    /// public abstract java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentNavigableMap.subMap(java.lang.Object,boolean,java.lang.Object,boolean)

    func subMap( arg0: java_lang.JavaObject?, arg1: Bool, arg2: java_lang.JavaObject?, arg3: Bool ) -> ConcurrentNavigableMap!
    func subMap( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool, _ _arg2: java_lang.JavaObject?, _ _arg3: Bool ) -> ConcurrentNavigableMap!

    /// public abstract java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentNavigableMap.subMap(java.lang.Object,java.lang.Object)

    func subMap( arg0: java_lang.JavaObject?, arg1: java_lang.JavaObject? ) -> ConcurrentNavigableMap!
    func subMap( _ _arg0: java_lang.JavaObject?, _ _arg1: java_lang.JavaObject? ) -> ConcurrentNavigableMap!

    /// public abstract java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentNavigableMap.headMap(java.lang.Object)

    func headMap( arg0: java_lang.JavaObject? ) -> ConcurrentNavigableMap!
    func headMap( _ _arg0: java_lang.JavaObject? ) -> ConcurrentNavigableMap!

    /// public abstract java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentNavigableMap.headMap(java.lang.Object,boolean)

    func headMap( arg0: java_lang.JavaObject?, arg1: Bool ) -> ConcurrentNavigableMap!
    func headMap( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool ) -> ConcurrentNavigableMap!

    /// public abstract java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentNavigableMap.tailMap(java.lang.Object)

    func tailMap( arg0: java_lang.JavaObject? ) -> ConcurrentNavigableMap!
    func tailMap( _ _arg0: java_lang.JavaObject? ) -> ConcurrentNavigableMap!

    /// public abstract java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentNavigableMap.tailMap(java.lang.Object,boolean)

    func tailMap( arg0: java_lang.JavaObject?, arg1: Bool ) -> ConcurrentNavigableMap!
    func tailMap( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool ) -> ConcurrentNavigableMap!

}

open class ConcurrentNavigableMapForward: ConcurrentMapForward, ConcurrentNavigableMap {

    private static var ConcurrentNavigableMapJNIClass: jclass?

    /// public abstract java.util.NavigableSet java.util.concurrent.ConcurrentNavigableMap.keySet()

    private static var keySet_MethodID_11: jmethodID?

    open func keySet() -> NavigableSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "keySet", methodSig: "()Ljava/util/NavigableSet;", methodCache: &ConcurrentNavigableMapForward.keySet_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.NavigableSet java.util.concurrent.ConcurrentNavigableMap.navigableKeySet()

    private static var navigableKeySet_MethodID_12: jmethodID?

    open func navigableKeySet() -> NavigableSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "navigableKeySet", methodSig: "()Ljava/util/NavigableSet;", methodCache: &ConcurrentNavigableMapForward.navigableKeySet_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentNavigableMap.descendingMap()

    private static var descendingMap_MethodID_13: jmethodID?

    open func descendingMap() -> ConcurrentNavigableMap! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "descendingMap", methodSig: "()Ljava/util/concurrent/ConcurrentNavigableMap;", methodCache: &ConcurrentNavigableMapForward.descendingMap_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ConcurrentNavigableMapForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.NavigableSet java.util.concurrent.ConcurrentNavigableMap.descendingKeySet()

    private static var descendingKeySet_MethodID_14: jmethodID?

    open func descendingKeySet() -> NavigableSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "descendingKeySet", methodSig: "()Ljava/util/NavigableSet;", methodCache: &ConcurrentNavigableMapForward.descendingKeySet_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentNavigableMap.subMap(java.lang.Object,boolean,java.lang.Object,boolean)

    private static var subMap_MethodID_15: jmethodID?

    open func subMap( arg0: java_lang.JavaObject?, arg1: Bool, arg2: java_lang.JavaObject?, arg3: Bool ) -> ConcurrentNavigableMap! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subMap", methodSig: "(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;", methodCache: &ConcurrentNavigableMapForward.subMap_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ConcurrentNavigableMapForward( javaObject: __return ) : nil
    }

    open func subMap( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool, _ _arg2: java_lang.JavaObject?, _ _arg3: Bool ) -> ConcurrentNavigableMap! {
        return subMap( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentNavigableMap.subMap(java.lang.Object,java.lang.Object)

    private static var subMap_MethodID_16: jmethodID?

    open func subMap( arg0: java_lang.JavaObject?, arg1: java_lang.JavaObject? ) -> ConcurrentNavigableMap! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subMap", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;", methodCache: &ConcurrentNavigableMapForward.subMap_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ConcurrentNavigableMapForward( javaObject: __return ) : nil
    }

    open func subMap( _ _arg0: java_lang.JavaObject?, _ _arg1: java_lang.JavaObject? ) -> ConcurrentNavigableMap! {
        return subMap( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentNavigableMap.headMap(java.lang.Object)

    private static var headMap_MethodID_17: jmethodID?

    open func headMap( arg0: java_lang.JavaObject? ) -> ConcurrentNavigableMap! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "headMap", methodSig: "(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;", methodCache: &ConcurrentNavigableMapForward.headMap_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ConcurrentNavigableMapForward( javaObject: __return ) : nil
    }

    open func headMap( _ _arg0: java_lang.JavaObject? ) -> ConcurrentNavigableMap! {
        return headMap( arg0: _arg0 )
    }

    /// public abstract java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentNavigableMap.headMap(java.lang.Object,boolean)

    private static var headMap_MethodID_18: jmethodID?

    open func headMap( arg0: java_lang.JavaObject?, arg1: Bool ) -> ConcurrentNavigableMap! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "headMap", methodSig: "(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;", methodCache: &ConcurrentNavigableMapForward.headMap_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ConcurrentNavigableMapForward( javaObject: __return ) : nil
    }

    open func headMap( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool ) -> ConcurrentNavigableMap! {
        return headMap( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentNavigableMap.tailMap(java.lang.Object)

    private static var tailMap_MethodID_19: jmethodID?

    open func tailMap( arg0: java_lang.JavaObject? ) -> ConcurrentNavigableMap! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "tailMap", methodSig: "(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;", methodCache: &ConcurrentNavigableMapForward.tailMap_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ConcurrentNavigableMapForward( javaObject: __return ) : nil
    }

    open func tailMap( _ _arg0: java_lang.JavaObject? ) -> ConcurrentNavigableMap! {
        return tailMap( arg0: _arg0 )
    }

    /// public abstract java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentNavigableMap.tailMap(java.lang.Object,boolean)

    private static var tailMap_MethodID_20: jmethodID?

    open func tailMap( arg0: java_lang.JavaObject?, arg1: Bool ) -> ConcurrentNavigableMap! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "tailMap", methodSig: "(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;", methodCache: &ConcurrentNavigableMapForward.tailMap_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ConcurrentNavigableMapForward( javaObject: __return ) : nil
    }

    open func tailMap( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool ) -> ConcurrentNavigableMap! {
        return tailMap( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract boolean java.util.concurrent.ConcurrentMap.replace(java.lang.Object,java.lang.Object,java.lang.Object)

    private static var replace_MethodID_21: jmethodID?

    override open func replace( arg0: java_lang.JavaObject?, arg1: java_lang.JavaObject?, arg2: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "replace", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", methodCache: &ConcurrentNavigableMapForward.replace_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func replace( _ _arg0: java_lang.JavaObject?, _ _arg1: java_lang.JavaObject?, _ _arg2: java_lang.JavaObject? ) -> Bool {
        return replace( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract java.lang.Object java.util.concurrent.ConcurrentMap.replace(java.lang.Object,java.lang.Object)

    private static var replace_MethodID_22: jmethodID?

    override open func replace( arg0: java_lang.JavaObject?, arg1: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "replace", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentNavigableMapForward.replace_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    override open func replace( _ _arg0: java_lang.JavaObject?, _ _arg1: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return replace( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract boolean java.util.concurrent.ConcurrentMap.remove(java.lang.Object,java.lang.Object)

    private static var remove_MethodID_23: jmethodID?

    override open func remove( arg0: java_lang.JavaObject?, arg1: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Z", methodCache: &ConcurrentNavigableMapForward.remove_MethodID_23, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func remove( _ _arg0: java_lang.JavaObject?, _ _arg1: java_lang.JavaObject? ) -> Bool {
        return remove( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.lang.Object java.util.concurrent.ConcurrentMap.putIfAbsent(java.lang.Object,java.lang.Object)

    private static var putIfAbsent_MethodID_24: jmethodID?

    override open func putIfAbsent( arg0: java_lang.JavaObject?, arg1: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "putIfAbsent", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentNavigableMapForward.putIfAbsent_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    override open func putIfAbsent( _ _arg0: java_lang.JavaObject?, _ _arg1: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return putIfAbsent( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.lang.Object java.util.Map.get(java.lang.Object)

    private static var get_MethodID_25: jmethodID?

    override open func get( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentNavigableMapForward.get_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    override open func get( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return get( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.util.Map.put(java.lang.Object,java.lang.Object)

    private static var put_MethodID_26: jmethodID?

    override open func put( arg0: java_lang.JavaObject?, arg1: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "put", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentNavigableMapForward.put_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    override open func put( _ _arg0: java_lang.JavaObject?, _ _arg1: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return put( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract boolean java.util.Map.equals(java.lang.Object)

    private static var equals_MethodID_27: jmethodID?

    override open func equals( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &ConcurrentNavigableMapForward.equals_MethodID_27, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func equals( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return equals( arg0: _arg0 )
    }

    /// public abstract java.util.Collection java.util.Map.values()

    private static var values_MethodID_28: jmethodID?

    override open func values() -> Collection! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "values", methodSig: "()Ljava/util/Collection;", methodCache: &ConcurrentNavigableMapForward.values_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CollectionForward( javaObject: __return ) : nil
    }


    /// public abstract int java.util.Map.hashCode()

    private static var hashCode_MethodID_29: jmethodID?

    override open func hashCode() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "hashCode", methodSig: "()I", methodCache: &ConcurrentNavigableMapForward.hashCode_MethodID_29, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.util.Map.clear()

    private static var clear_MethodID_30: jmethodID?

    override open func clear() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "()V", methodCache: &ConcurrentNavigableMapForward.clear_MethodID_30, args: &__args, locals: &__locals )
    }


    /// public abstract boolean java.util.Map.isEmpty()

    private static var isEmpty_MethodID_31: jmethodID?

    override open func isEmpty() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isEmpty", methodSig: "()Z", methodCache: &ConcurrentNavigableMapForward.isEmpty_MethodID_31, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract int java.util.Map.size()

    private static var size_MethodID_32: jmethodID?

    override open func size() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "size", methodSig: "()I", methodCache: &ConcurrentNavigableMapForward.size_MethodID_32, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract java.util.Set java.util.Map.entrySet()

    private static var entrySet_MethodID_33: jmethodID?

    override open func entrySet() -> JavaSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "entrySet", methodSig: "()Ljava/util/Set;", methodCache: &ConcurrentNavigableMapForward.entrySet_MethodID_33, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaSetForward( javaObject: __return ) : nil
    }


    /// public abstract void java.util.Map.putAll(java.util.Map)

    private static var putAll_MethodID_34: jmethodID?

    override open func putAll( arg0: Map? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putAll", methodSig: "(Ljava/util/Map;)V", methodCache: &ConcurrentNavigableMapForward.putAll_MethodID_34, args: &__args, locals: &__locals )
    }

    override open func putAll( _ _arg0: Map? ) {
        putAll( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.util.Map.remove(java.lang.Object)

    private static var remove_MethodID_35: jmethodID?

    override open func remove( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentNavigableMapForward.remove_MethodID_35, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    override open func remove( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return remove( arg0: _arg0 )
    }

    /// public abstract java.util.Set java.util.Map.keySet()

    /// public abstract boolean java.util.Map.containsValue(java.lang.Object)

    private static var containsValue_MethodID_36: jmethodID?

    override open func containsValue( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsValue", methodSig: "(Ljava/lang/Object;)Z", methodCache: &ConcurrentNavigableMapForward.containsValue_MethodID_36, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func containsValue( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return containsValue( arg0: _arg0 )
    }

    /// public abstract boolean java.util.Map.containsKey(java.lang.Object)

    private static var containsKey_MethodID_37: jmethodID?

    override open func containsKey( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsKey", methodSig: "(Ljava/lang/Object;)Z", methodCache: &ConcurrentNavigableMapForward.containsKey_MethodID_37, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func containsKey( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return containsKey( arg0: _arg0 )
    }

    /// public abstract java.util.NavigableMap java.util.NavigableMap.descendingMap()

    /// public abstract java.util.Map$Entry java.util.NavigableMap.firstEntry()

    /// public abstract java.util.Map$Entry java.util.NavigableMap.lastEntry()

    /// public abstract java.util.Map$Entry java.util.NavigableMap.pollFirstEntry()

    /// public abstract java.util.Map$Entry java.util.NavigableMap.pollLastEntry()

    /// public abstract java.util.Map$Entry java.util.NavigableMap.lowerEntry(java.lang.Object)

    /// public abstract java.lang.Object java.util.NavigableMap.lowerKey(java.lang.Object)

    private static var lowerKey_MethodID_38: jmethodID?

    open func lowerKey( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "lowerKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentNavigableMapForward.lowerKey_MethodID_38, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func lowerKey( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return lowerKey( arg0: _arg0 )
    }

    /// public abstract java.util.Map$Entry java.util.NavigableMap.floorEntry(java.lang.Object)

    /// public abstract java.lang.Object java.util.NavigableMap.floorKey(java.lang.Object)

    private static var floorKey_MethodID_39: jmethodID?

    open func floorKey( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "floorKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentNavigableMapForward.floorKey_MethodID_39, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func floorKey( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return floorKey( arg0: _arg0 )
    }

    /// public abstract java.util.Map$Entry java.util.NavigableMap.ceilingEntry(java.lang.Object)

    /// public abstract java.lang.Object java.util.NavigableMap.ceilingKey(java.lang.Object)

    private static var ceilingKey_MethodID_40: jmethodID?

    open func ceilingKey( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "ceilingKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentNavigableMapForward.ceilingKey_MethodID_40, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func ceilingKey( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return ceilingKey( arg0: _arg0 )
    }

    /// public abstract java.util.Map$Entry java.util.NavigableMap.higherEntry(java.lang.Object)

    /// public abstract java.lang.Object java.util.NavigableMap.higherKey(java.lang.Object)

    private static var higherKey_MethodID_41: jmethodID?

    open func higherKey( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "higherKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentNavigableMapForward.higherKey_MethodID_41, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func higherKey( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return higherKey( arg0: _arg0 )
    }

    /// public abstract java.util.NavigableMap java.util.NavigableMap.subMap(java.lang.Object,boolean,java.lang.Object,boolean)

    /// public abstract java.util.SortedMap java.util.NavigableMap.subMap(java.lang.Object,java.lang.Object)

    /// public abstract java.util.NavigableMap java.util.NavigableMap.headMap(java.lang.Object,boolean)

    /// public abstract java.util.SortedMap java.util.NavigableMap.headMap(java.lang.Object)

    /// public abstract java.util.NavigableMap java.util.NavigableMap.tailMap(java.lang.Object,boolean)

    /// public abstract java.util.SortedMap java.util.NavigableMap.tailMap(java.lang.Object)

    /// public abstract java.util.Collection java.util.SortedMap.values()

    /// public abstract java.util.Set java.util.SortedMap.entrySet()

    /// public abstract java.util.Set java.util.SortedMap.keySet()

    /// public abstract java.util.Comparator java.util.SortedMap.comparator()

    private static var comparator_MethodID_42: jmethodID?

    open func comparator() -> JavaComparator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "comparator", methodSig: "()Ljava/util/Comparator;", methodCache: &ConcurrentNavigableMapForward.comparator_MethodID_42, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }


    /// public abstract java.lang.Object java.util.SortedMap.firstKey()

    private static var firstKey_MethodID_43: jmethodID?

    open func firstKey() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "firstKey", methodSig: "()Ljava/lang/Object;", methodCache: &ConcurrentNavigableMapForward.firstKey_MethodID_43, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public abstract java.lang.Object java.util.SortedMap.lastKey()

    private static var lastKey_MethodID_44: jmethodID?

    open func lastKey() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "lastKey", methodSig: "()Ljava/lang/Object;", methodCache: &ConcurrentNavigableMapForward.lastKey_MethodID_44, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// In declared protocol but not defined.. ///

    /// public abstract java.util.Map$Entry java.util.NavigableMap.pollFirstEntry()

    /// public abstract java.util.Map$Entry java.util.NavigableMap.floorEntry(java.lang.Object)

    /// public abstract java.util.Map$Entry java.util.NavigableMap.firstEntry()

    /// public abstract java.util.Map$Entry java.util.NavigableMap.lowerEntry(java.lang.Object)

    /// public abstract java.util.Map$Entry java.util.NavigableMap.ceilingEntry(java.lang.Object)

    /// public abstract java.util.Map$Entry java.util.NavigableMap.pollLastEntry()

    /// public abstract java.util.Map$Entry java.util.NavigableMap.lastEntry()

    /// public abstract java.util.Map$Entry java.util.NavigableMap.higherEntry(java.lang.Object)

}


