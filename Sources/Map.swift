
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:12 GMT 2016 ///

/// interface java.util.Map ///

public protocol Map: JavaProtocol {

    /// public abstract java.lang.Object java.util.Map.get(java.lang.Object)

    func get( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject!
    func get( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject!

    /// public abstract java.lang.Object java.util.Map.put(java.lang.Object,java.lang.Object)

    func put( arg0: java_lang.JavaObject?, arg1: java_lang.JavaObject? ) -> java_lang.JavaObject!
    func put( _ _arg0: java_lang.JavaObject?, _ _arg1: java_lang.JavaObject? ) -> java_lang.JavaObject!

    /// public abstract boolean java.util.Map.equals(java.lang.Object)

    func equals( arg0: java_lang.JavaObject? ) -> Bool
    func equals( _ _arg0: java_lang.JavaObject? ) -> Bool

    /// public abstract java.util.Collection java.util.Map.values()

    func values() -> Collection!

    /// public abstract int java.util.Map.hashCode()

    func hashCode() -> Int

    /// public abstract void java.util.Map.clear()

    func clear()

    /// public abstract boolean java.util.Map.isEmpty()

    func isEmpty() -> Bool

    /// public abstract int java.util.Map.size()

    func size() -> Int

    /// public abstract java.util.Set java.util.Map.entrySet()

    func entrySet() -> JavaSet!

    /// public abstract void java.util.Map.putAll(java.util.Map)

    func putAll( arg0: Map? )
    func putAll( _ _arg0: Map? )

    /// public abstract java.lang.Object java.util.Map.remove(java.lang.Object)

    func remove( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject!
    func remove( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject!

    /// public abstract java.util.Set java.util.Map.keySet()

    func keySet() -> JavaSet!

    /// public abstract boolean java.util.Map.containsValue(java.lang.Object)

    func containsValue( arg0: java_lang.JavaObject? ) -> Bool
    func containsValue( _ _arg0: java_lang.JavaObject? ) -> Bool

    /// public abstract boolean java.util.Map.containsKey(java.lang.Object)

    func containsKey( arg0: java_lang.JavaObject? ) -> Bool
    func containsKey( _ _arg0: java_lang.JavaObject? ) -> Bool

}

open class MapForward: JNIObjectForward, Map {

    private static var MapJNIClass: jclass?

    /// public abstract java.lang.Object java.util.Map.get(java.lang.Object)

    private static var get_MethodID_15: jmethodID?

    open func get( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &MapForward.get_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func get( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return get( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.util.Map.put(java.lang.Object,java.lang.Object)

    private static var put_MethodID_16: jmethodID?

    open func put( arg0: java_lang.JavaObject?, arg1: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "put", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &MapForward.put_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func put( _ _arg0: java_lang.JavaObject?, _ _arg1: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return put( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract boolean java.util.Map.equals(java.lang.Object)

    private static var equals_MethodID_17: jmethodID?

    open func equals( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &MapForward.equals_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func equals( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return equals( arg0: _arg0 )
    }

    /// public abstract java.util.Collection java.util.Map.values()

    private static var values_MethodID_18: jmethodID?

    open func values() -> Collection! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "values", methodSig: "()Ljava/util/Collection;", methodCache: &MapForward.values_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CollectionForward( javaObject: __return ) : nil
    }


    /// public abstract int java.util.Map.hashCode()

    private static var hashCode_MethodID_19: jmethodID?

    open func hashCode() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "hashCode", methodSig: "()I", methodCache: &MapForward.hashCode_MethodID_19, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.util.Map.clear()

    private static var clear_MethodID_20: jmethodID?

    open func clear() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "()V", methodCache: &MapForward.clear_MethodID_20, args: &__args, locals: &__locals )
    }


    /// public abstract boolean java.util.Map.isEmpty()

    private static var isEmpty_MethodID_21: jmethodID?

    open func isEmpty() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isEmpty", methodSig: "()Z", methodCache: &MapForward.isEmpty_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract int java.util.Map.size()

    private static var size_MethodID_22: jmethodID?

    open func size() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "size", methodSig: "()I", methodCache: &MapForward.size_MethodID_22, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract java.util.Set java.util.Map.entrySet()

    private static var entrySet_MethodID_23: jmethodID?

    open func entrySet() -> JavaSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "entrySet", methodSig: "()Ljava/util/Set;", methodCache: &MapForward.entrySet_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaSetForward( javaObject: __return ) : nil
    }


    /// public abstract void java.util.Map.putAll(java.util.Map)

    private static var putAll_MethodID_24: jmethodID?

    open func putAll( arg0: Map? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putAll", methodSig: "(Ljava/util/Map;)V", methodCache: &MapForward.putAll_MethodID_24, args: &__args, locals: &__locals )
    }

    open func putAll( _ _arg0: Map? ) {
        putAll( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.util.Map.remove(java.lang.Object)

    private static var remove_MethodID_25: jmethodID?

    open func remove( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &MapForward.remove_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func remove( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return remove( arg0: _arg0 )
    }

    /// public abstract java.util.Set java.util.Map.keySet()

    private static var keySet_MethodID_26: jmethodID?

    open func keySet() -> JavaSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "keySet", methodSig: "()Ljava/util/Set;", methodCache: &MapForward.keySet_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaSetForward( javaObject: __return ) : nil
    }


    /// public abstract boolean java.util.Map.containsValue(java.lang.Object)

    private static var containsValue_MethodID_27: jmethodID?

    open func containsValue( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsValue", methodSig: "(Ljava/lang/Object;)Z", methodCache: &MapForward.containsValue_MethodID_27, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func containsValue( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return containsValue( arg0: _arg0 )
    }

    /// public abstract boolean java.util.Map.containsKey(java.lang.Object)

    private static var containsKey_MethodID_28: jmethodID?

    open func containsKey( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsKey", methodSig: "(Ljava/lang/Object;)Z", methodCache: &MapForward.containsKey_MethodID_28, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func containsKey( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return containsKey( arg0: _arg0 )
    }

}


