
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:57 GMT 2016 ///

/// class java.util.Random ///

open class Random: java_lang.JavaObject, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.Random", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var RandomJNIClass: jclass?

    /// static final long java.util.Random.serialVersionUID

    /// private final java.util.concurrent.atomic.AtomicLong java.util.Random.seed

    /// private static final long java.util.Random.multiplier

    /// private static final long java.util.Random.addend

    /// private static final long java.util.Random.mask

    /// private static volatile long java.util.Random.seedUniquifier

    /// private double java.util.Random.nextNextGaussian

    /// private boolean java.util.Random.haveNextNextGaussian

    /// private static final java.io.ObjectStreamField[] java.util.Random.serialPersistentFields

    /// private static final sun.misc.Unsafe java.util.Random.unsafe

    /// private static final long java.util.Random.seedOffset

    /// public java.util.Random()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/Random", classCache: &Random.RandomJNIClass, methodSig: "()V", methodCache: &Random.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.Random(long)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Random", classCache: &Random.RandomJNIClass, methodSig: "(J)V", methodCache: &Random.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int64 ) {
        self.init( arg0: _arg0 )
    }

    /// protected int java.util.Random.next(int)

    private static var next_MethodID_3: jmethodID?

    open func next( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "next", methodSig: "(I)I", methodCache: &Random.next_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func next( _ _arg0: Int ) -> Int {
        return next( arg0: _arg0 )
    }

    /// private synchronized void java.util.Random.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// private void java.util.Random.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// public int java.util.Random.nextInt()

    private static var nextInt_MethodID_4: jmethodID?

    open func nextInt() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "nextInt", methodSig: "()I", methodCache: &Random.nextInt_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.util.Random.nextInt(int)

    private static var nextInt_MethodID_5: jmethodID?

    open func nextInt( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "nextInt", methodSig: "(I)I", methodCache: &Random.nextInt_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func nextInt( _ _arg0: Int ) -> Int {
        return nextInt( arg0: _arg0 )
    }

    /// public double java.util.Random.nextDouble()

    private static var nextDouble_MethodID_6: jmethodID?

    open func nextDouble() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "nextDouble", methodSig: "()D", methodCache: &Random.nextDouble_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public long java.util.Random.nextLong()

    private static var nextLong_MethodID_7: jmethodID?

    open func nextLong() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "nextLong", methodSig: "()J", methodCache: &Random.nextLong_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }


    /// public void java.util.Random.nextBytes(byte[])

    private static var nextBytes_MethodID_8: jmethodID?

    open func nextBytes( arg0: [Int8]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "nextBytes", methodSig: "([B)V", methodCache: &Random.nextBytes_MethodID_8, args: &__args, locals: &__locals )
    }

    open func nextBytes( _ _arg0: [Int8]? ) {
        nextBytes( arg0: _arg0 )
    }

    /// public synchronized void java.util.Random.setSeed(long)

    private static var setSeed_MethodID_9: jmethodID?

    open func setSeed( arg0: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSeed", methodSig: "(J)V", methodCache: &Random.setSeed_MethodID_9, args: &__args, locals: &__locals )
    }

    open func setSeed( _ _arg0: Int64 ) {
        setSeed( arg0: _arg0 )
    }

    /// public boolean java.util.Random.nextBoolean()

    private static var nextBoolean_MethodID_10: jmethodID?

    open func nextBoolean() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "nextBoolean", methodSig: "()Z", methodCache: &Random.nextBoolean_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public float java.util.Random.nextFloat()

    private static var nextFloat_MethodID_11: jmethodID?

    open func nextFloat() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "nextFloat", methodSig: "()F", methodCache: &Random.nextFloat_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


    /// public synchronized double java.util.Random.nextGaussian()

    private static var nextGaussian_MethodID_12: jmethodID?

    open func nextGaussian() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "nextGaussian", methodSig: "()D", methodCache: &Random.nextGaussian_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// private void java.util.Random.resetSeed(long)

}
