
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:59 GMT 2016 ///

/// class java.util.EventListenerProxy ///

open class EventListenerProxy: java_lang.JavaObject, EventListener {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.EventListenerProxy", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var EventListenerProxyJNIClass: jclass?

    /// private final java.util.EventListener java.util.EventListenerProxy.listener

    /// public java.util.EventListenerProxy(java.util.EventListener)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: EventListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/EventListenerProxy", classCache: &EventListenerProxy.EventListenerProxyJNIClass, methodSig: "(Ljava/util/EventListener;)V", methodCache: &EventListenerProxy.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: EventListener? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.EventListener java.util.EventListenerProxy.getListener()

    private static var getListener_MethodID_2: jmethodID?

    open func getListener() -> EventListener! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getListener", methodSig: "()Ljava/util/EventListener;", methodCache: &EventListenerProxy.getListener_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? EventListenerForward( javaObject: __return ) : nil
    }


}
