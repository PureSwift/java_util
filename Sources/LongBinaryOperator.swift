
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.function.LongBinaryOperator ///

public protocol LongBinaryOperator: JavaProtocol {

    /// public abstract long java.util.function.LongBinaryOperator.applyAsLong(long,long)

    func applyAsLong( left: Int64, right: Int64 ) -> Int64

}


open class LongBinaryOperatorForward: JNIObjectForward, LongBinaryOperator {

    private static var LongBinaryOperatorJNIClass: jclass?

    /// public abstract long java.util.function.LongBinaryOperator.applyAsLong(long,long)

    private static var applyAsLong_MethodID_2: jmethodID?

    open func applyAsLong( left: Int64, right: Int64 ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: left, locals: &__locals )
        __args[1] = JNIType.toJava( value: right, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "applyAsLong", methodSig: "(JJ)J", methodCache: &LongBinaryOperatorForward.applyAsLong_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int64(), from: __return )
    }

    open func applyAsLong( _ _left: Int64, _ _right: Int64 ) -> Int64 {
        return applyAsLong( left: _left, right: _right )
    }

}


