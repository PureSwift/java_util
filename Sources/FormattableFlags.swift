
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:43 GMT 2016 ///

/// class java.util.FormattableFlags ///

open class FormattableFlags: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.FormattableFlags", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var FormattableFlagsJNIClass: jclass?

    /// public static final int java.util.FormattableFlags.LEFT_JUSTIFY

    private static var LEFT_JUSTIFY_FieldID: jfieldID?

    open static var LEFT_JUSTIFY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "LEFT_JUSTIFY", fieldType: "I", fieldCache: &LEFT_JUSTIFY_FieldID, className: "java/util/FormattableFlags", classCache: &FormattableFlagsJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.FormattableFlags.UPPERCASE

    private static var UPPERCASE_FieldID: jfieldID?

    open static var UPPERCASE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "UPPERCASE", fieldType: "I", fieldCache: &UPPERCASE_FieldID, className: "java/util/FormattableFlags", classCache: &FormattableFlagsJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.FormattableFlags.ALTERNATE

    private static var ALTERNATE_FieldID: jfieldID?

    open static var ALTERNATE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ALTERNATE", fieldType: "I", fieldCache: &ALTERNATE_FieldID, className: "java/util/FormattableFlags", classCache: &FormattableFlagsJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// private java.util.FormattableFlags()

}
