
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:43 GMT 2016 ///

/// class java.util.Formatter ///

open class Formatter: java_lang.JavaObject, /* java.io.Closeable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.Formatter", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var FormatterJNIClass: jclass?

    /// private java.lang.Appendable java.util.Formatter.a

    /// private java.util.Locale java.util.Formatter.l

    /// private java.io.IOException java.util.Formatter.lastException

    /// private char java.util.Formatter.zero

    /// private static double java.util.Formatter.scaleUp

    /// private static final int java.util.Formatter.MAX_FD_CHARS

    /// private static final java.lang.String java.util.Formatter.formatSpecifier

    /// private static java.util.regex.Pattern java.util.Formatter.fsPattern

    /// public java.util.Formatter(java.io.OutputStream,java.lang.String,java.util.Locale) throws java.io.UnsupportedEncodingException

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: /* java.io.OutputStream */ UnclassedObject?, arg1: String?, arg2: JavaLocale? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Formatter", classCache: &Formatter.FormatterJNIClass, methodSig: "(Ljava/io/OutputStream;Ljava/lang/String;Ljava/util/Locale;)V", methodCache: &Formatter.new_MethodID_1, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.UnsupportedEncodingException */ UnclassedObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* java.io.OutputStream */ UnclassedObject?, _ _arg1: String?, _ _arg2: JavaLocale? ) throws {
        try self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.util.Formatter()

    private static var new_MethodID_2: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/Formatter", classCache: &Formatter.FormatterJNIClass, methodSig: "()V", methodCache: &Formatter.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.Formatter(java.lang.Appendable)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: java_lang.Appendable? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/Formatter", classCache: &Formatter.FormatterJNIClass, methodSig: "(Ljava/lang/Appendable;)V", methodCache: &Formatter.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: java_lang.Appendable? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.Formatter(java.util.Locale)

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: JavaLocale? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Formatter", classCache: &Formatter.FormatterJNIClass, methodSig: "(Ljava/util/Locale;)V", methodCache: &Formatter.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: JavaLocale? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.Formatter(java.lang.Appendable,java.util.Locale)

    private static var new_MethodID_5: jmethodID?

    public convenience init( arg0: java_lang.Appendable?, arg1: JavaLocale? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Formatter", classCache: &Formatter.FormatterJNIClass, methodSig: "(Ljava/lang/Appendable;Ljava/util/Locale;)V", methodCache: &Formatter.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: java_lang.Appendable?, _ _arg1: JavaLocale? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.Formatter(java.lang.String) throws java.io.FileNotFoundException

    private static var new_MethodID_6: jmethodID?

    public convenience init( arg0: String? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Formatter", classCache: &Formatter.FormatterJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &Formatter.new_MethodID_6, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.FileNotFoundException */ UnclassedObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String? ) throws {
        try self.init( arg0: _arg0 )
    }

    /// public java.util.Formatter(java.lang.String,java.lang.String) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException

    private static var new_MethodID_7: jmethodID?

    public convenience init( arg0: String?, arg1: String? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Formatter", classCache: &Formatter.FormatterJNIClass, methodSig: "(Ljava/lang/String;Ljava/lang/String;)V", methodCache: &Formatter.new_MethodID_7, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.FileNotFoundException */ UnclassedObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: String? ) throws {
        try self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.Formatter(java.lang.String,java.lang.String,java.util.Locale) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException

    private static var new_MethodID_8: jmethodID?

    public convenience init( arg0: String?, arg1: String?, arg2: JavaLocale? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Formatter", classCache: &Formatter.FormatterJNIClass, methodSig: "(Ljava/lang/String;Ljava/lang/String;Ljava/util/Locale;)V", methodCache: &Formatter.new_MethodID_8, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.FileNotFoundException */ UnclassedObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: String?, _ _arg2: JavaLocale? ) throws {
        try self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.util.Formatter(java.io.File) throws java.io.FileNotFoundException

    private static var new_MethodID_9: jmethodID?

    public convenience init( arg0: /* java.io.File */ UnclassedObject? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Formatter", classCache: &Formatter.FormatterJNIClass, methodSig: "(Ljava/io/File;)V", methodCache: &Formatter.new_MethodID_9, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.FileNotFoundException */ UnclassedObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* java.io.File */ UnclassedObject? ) throws {
        try self.init( arg0: _arg0 )
    }

    /// public java.util.Formatter(java.io.File,java.lang.String) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException

    private static var new_MethodID_10: jmethodID?

    public convenience init( arg0: /* java.io.File */ UnclassedObject?, arg1: String? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Formatter", classCache: &Formatter.FormatterJNIClass, methodSig: "(Ljava/io/File;Ljava/lang/String;)V", methodCache: &Formatter.new_MethodID_10, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.FileNotFoundException */ UnclassedObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* java.io.File */ UnclassedObject?, _ _arg1: String? ) throws {
        try self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.Formatter(java.io.File,java.lang.String,java.util.Locale) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException

    /// public java.util.Formatter(java.io.PrintStream)

    /// public java.util.Formatter(java.io.OutputStream)

    /// public java.util.Formatter(java.io.OutputStream,java.lang.String) throws java.io.UnsupportedEncodingException

    /// public java.lang.String java.util.Formatter.toString()

    /// public java.util.Formatter java.util.Formatter.format(java.util.Locale,java.lang.String,java.lang.Object[])

    private static var format_MethodID_11: jmethodID?

    open func format( arg0: JavaLocale?, arg1: String?, arg2: [JavaObject]? ) -> Formatter! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "format", methodSig: "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;", methodCache: &Formatter.format_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Formatter( javaObject: __return ) : nil
    }

    open func format( _ _arg0: JavaLocale?, _ _arg1: String?, _ _arg2: [JavaObject]? ) -> Formatter! {
        return format( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.util.Formatter java.util.Formatter.format(java.lang.String,java.lang.Object[])

    private static var format_MethodID_12: jmethodID?

    open func format( arg0: String?, arg1: [JavaObject]? ) -> Formatter! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "format", methodSig: "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;", methodCache: &Formatter.format_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Formatter( javaObject: __return ) : nil
    }

    open func format( _ _arg0: String?, _ _arg1: [JavaObject]? ) -> Formatter! {
        return format( arg0: _arg0, arg1: _arg1 )
    }

    /// static double java.util.Formatter.access$202(double)

    /// static java.lang.Appendable java.util.Formatter.access$000(java.util.Formatter)

    /// static double java.util.Formatter.access$200()

    /// public java.lang.Appendable java.util.Formatter.out()

    private static var out_MethodID_13: jmethodID?

    open func out() -> java_lang.Appendable! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "out", methodSig: "()Ljava/lang/Appendable;", methodCache: &Formatter.out_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.AppendableForward( javaObject: __return ) : nil
    }


    /// private void java.util.Formatter.init(java.lang.Appendable,java.util.Locale)

    /// static char java.util.Formatter.access$300(java.util.Formatter)

    /// public void java.util.Formatter.flush()

    private static var flush_MethodID_14: jmethodID?

    open func flush() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "flush", methodSig: "()V", methodCache: &Formatter.flush_MethodID_14, args: &__args, locals: &__locals )
    }


    /// public void java.util.Formatter.close()

    private static var close_MethodID_15: jmethodID?

    open func close() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "close", methodSig: "()V", methodCache: &Formatter.close_MethodID_15, args: &__args, locals: &__locals )
    }


    /// private java.util.Formatter$FormatString[] java.util.Formatter.parse(java.lang.String)

    /// private void java.util.Formatter.ensureOpen()

    /// public java.util.Locale java.util.Formatter.locale()

    private static var locale_MethodID_16: jmethodID?

    open func locale() -> JavaLocale! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "locale", methodSig: "()Ljava/util/Locale;", methodCache: &Formatter.locale_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaLocale( javaObject: __return ) : nil
    }


    /// private void java.util.Formatter.setZero()

    /// public java.io.IOException java.util.Formatter.ioException()

    private static var ioException_MethodID_17: jmethodID?

    open func ioException() -> /* java.io.IOException */ UnclassedObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "ioException", methodSig: "()Ljava/io/IOException;", methodCache: &Formatter.ioException_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.io.IOException */ UnclassedObject( javaObject: __return ) : nil
    }


    /// private void java.util.Formatter.checkText(java.lang.String)

}
