
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:53 GMT 2016 ///

/// class java.util.logging.FileHandler ///

open class FileHandler: StreamHandler {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.logging.FileHandler", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var FileHandlerJNIClass: jclass?

    /// private java.util.logging.FileHandler$MeteredStream java.util.logging.FileHandler.meter

    /// private boolean java.util.logging.FileHandler.append

    /// private int java.util.logging.FileHandler.limit

    /// private int java.util.logging.FileHandler.count

    /// private java.lang.String java.util.logging.FileHandler.pattern

    /// private java.lang.String java.util.logging.FileHandler.lockFileName

    /// private java.io.FileOutputStream java.util.logging.FileHandler.lockStream

    /// private java.io.File[] java.util.logging.FileHandler.files

    /// private static final int java.util.logging.FileHandler.MAX_LOCKS

    /// private static java.util.HashMap java.util.logging.FileHandler.locks

    /// private java.util.logging.LogManager java.util.logging.StreamHandler.manager

    /// private java.io.OutputStream java.util.logging.StreamHandler.output

    /// private boolean java.util.logging.StreamHandler.doneHeader

    /// private java.io.Writer java.util.logging.StreamHandler.writer

    /// private static final int java.util.logging.Handler.offValue

    /// private java.util.logging.LogManager java.util.logging.Handler.manager

    /// private java.util.logging.Filter java.util.logging.Handler.filter

    /// private java.util.logging.Formatter java.util.logging.Handler.formatter

    /// private java.util.logging.Level java.util.logging.Handler.logLevel

    /// private java.util.logging.ErrorManager java.util.logging.Handler.errorManager

    /// private java.lang.String java.util.logging.Handler.encoding

    /// boolean java.util.logging.Handler.sealed

    /// public java.util.logging.FileHandler(java.lang.String,int,int,boolean) throws java.io.IOException,java.lang.SecurityException

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: String?, arg1: Int, arg2: Int, arg3: Bool ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/logging/FileHandler", classCache: &FileHandler.FileHandlerJNIClass, methodSig: "(Ljava/lang/String;IIZ)V", methodCache: &FileHandler.new_MethodID_1, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.IOException */ UnclassedObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Bool ) throws {
        try self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.util.logging.FileHandler(java.lang.String) throws java.io.IOException,java.lang.SecurityException

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: String? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/logging/FileHandler", classCache: &FileHandler.FileHandlerJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &FileHandler.new_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.IOException */ UnclassedObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String? ) throws {
        try self.init( arg0: _arg0 )
    }

    /// public java.util.logging.FileHandler() throws java.io.IOException,java.lang.SecurityException

    private static var new_MethodID_3: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/logging/FileHandler", classCache: &FileHandler.FileHandlerJNIClass, methodSig: "()V", methodCache: &FileHandler.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.logging.FileHandler(java.lang.String,boolean) throws java.io.IOException,java.lang.SecurityException

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: String?, arg1: Bool ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/logging/FileHandler", classCache: &FileHandler.FileHandlerJNIClass, methodSig: "(Ljava/lang/String;Z)V", methodCache: &FileHandler.new_MethodID_4, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.IOException */ UnclassedObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: Bool ) throws {
        try self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.logging.FileHandler(java.lang.String,int,int) throws java.io.IOException,java.lang.SecurityException

    private static var new_MethodID_5: jmethodID?

    public convenience init( arg0: String?, arg1: Int, arg2: Int ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/logging/FileHandler", classCache: &FileHandler.FileHandlerJNIClass, methodSig: "(Ljava/lang/String;II)V", methodCache: &FileHandler.new_MethodID_5, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.IOException */ UnclassedObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: Int, _ _arg2: Int ) throws {
        try self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// static void java.util.logging.FileHandler.access$100(java.util.logging.FileHandler)

    /// public synchronized void java.util.logging.FileHandler.close() throws java.lang.SecurityException

    /// private synchronized void java.util.logging.FileHandler.rotate()

    /// private void java.util.logging.FileHandler.open(java.io.File,boolean) throws java.io.IOException

    /// private java.io.File java.util.logging.FileHandler.generate(java.lang.String,int,int) throws java.io.IOException

    /// private void java.util.logging.FileHandler.configure()

    /// public synchronized void java.util.logging.FileHandler.publish(java.util.logging.LogRecord)

    /// private void java.util.logging.FileHandler.openFiles() throws java.io.IOException

    /// private static native boolean java.util.logging.FileHandler.isSetUID()

}
