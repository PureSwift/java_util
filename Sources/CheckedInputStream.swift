
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.zip.CheckedInputStream ///

open class CheckedInputStream: /* java.io.FilterInputStream */ UnclassedObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CheckedInputStreamJNIClass: jclass?

    /// private java.util.zip.Checksum java.util.zip.CheckedInputStream.cksum

    /// protected volatile java.io.InputStream java.io.FilterInputStream.in

    private static var _in_FieldID: jfieldID?

    open var _in: /* java.io.InputStream */ UnclassedObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "in", fieldType: "Ljava/io/InputStream;", fieldCache: &CheckedInputStream._in_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? /* java.io.InputStream */ UnclassedObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "in", fieldType: "Ljava/io/InputStream;", fieldCache: &CheckedInputStream._in_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private static final int java.io.InputStream.MAX_SKIP_BUFFER_SIZE

    /// public java.util.zip.CheckedInputStream(java.io.InputStream,java.util.zip.Checksum)

    private static var new_MethodID_1: jmethodID?

    public convenience init( _in: /* java.io.InputStream */ UnclassedObject?, cksum: Checksum? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: _in != nil ? _in! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: cksum, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/CheckedInputStream", classCache: &CheckedInputStream.CheckedInputStreamJNIClass, methodSig: "(Ljava/io/InputStream;Ljava/util/zip/Checksum;)V", methodCache: &CheckedInputStream.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ __in: /* java.io.InputStream */ UnclassedObject?, _ _cksum: Checksum? ) {
        self.init( _in: __in, cksum: _cksum )
    }

    /// public int java.util.zip.CheckedInputStream.read(byte[],int,int) throws java.io.IOException

    private static var read_MethodID_2: jmethodID?

    open func read( buf: [Int8]?, off: Int, len: Int ) throws /* java.io.IOException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: buf, locals: &__locals )
        __args[1] = JNIType.toJava( value: off, locals: &__locals )
        __args[2] = JNIType.toJava( value: len, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "read", methodSig: "([BII)I", methodCache: &CheckedInputStream.read_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.IOException */ UnclassedObject( javaObject: throwable )
        }
        return JNIType.toSwift( type: Int(), from: __return )
    }

    open func read( _ _buf: [Int8]?, _ _off: Int, _ _len: Int ) throws /* java.io.IOException */ -> Int {
        return try read( buf: _buf, off: _off, len: _len )
    }

    /// public int java.util.zip.CheckedInputStream.read() throws java.io.IOException

    /// public long java.util.zip.CheckedInputStream.skip(long) throws java.io.IOException

    /// public java.util.zip.Checksum java.util.zip.CheckedInputStream.getChecksum()

    private static var getChecksum_MethodID_3: jmethodID?

    open func getChecksum() -> Checksum! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getChecksum", methodSig: "()Ljava/util/zip/Checksum;", methodCache: &CheckedInputStream.getChecksum_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ChecksumForward( javaObject: __return ) : nil
    }


}

