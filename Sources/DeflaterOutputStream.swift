
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.zip.DeflaterOutputStream ///

open class DeflaterOutputStream: /* java.io.FilterOutputStream */ UnclassedObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DeflaterOutputStreamJNIClass: jclass?

    /// protected java.util.zip.Deflater java.util.zip.DeflaterOutputStream.def

    private static var def_FieldID: jfieldID?

    open var def: Deflater! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "def", fieldType: "Ljava/util/zip/Deflater;", fieldCache: &DeflaterOutputStream.def_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? Deflater( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "def", fieldType: "Ljava/util/zip/Deflater;", fieldCache: &DeflaterOutputStream.def_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected byte[] java.util.zip.DeflaterOutputStream.buf

    private static var buf_FieldID: jfieldID?

    open var buf: [Int8]! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "buf", fieldType: "[B", fieldCache: &DeflaterOutputStream.buf_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: [Int8](), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "buf", fieldType: "[B", fieldCache: &DeflaterOutputStream.buf_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean java.util.zip.DeflaterOutputStream.closed

    /// private final boolean java.util.zip.DeflaterOutputStream.syncFlush

    /// boolean java.util.zip.DeflaterOutputStream.usesDefaultDeflater

    /// protected java.io.OutputStream java.io.FilterOutputStream.out

    private static var out_FieldID: jfieldID?

    open var out: /* java.io.OutputStream */ UnclassedObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "out", fieldType: "Ljava/io/OutputStream;", fieldCache: &DeflaterOutputStream.out_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? /* java.io.OutputStream */ UnclassedObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "out", fieldType: "Ljava/io/OutputStream;", fieldCache: &DeflaterOutputStream.out_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public java.util.zip.DeflaterOutputStream(java.io.OutputStream)

    private static var new_MethodID_1: jmethodID?

    public convenience init( out: /* java.io.OutputStream */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: out, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/DeflaterOutputStream", classCache: &DeflaterOutputStream.DeflaterOutputStreamJNIClass, methodSig: "(Ljava/io/OutputStream;)V", methodCache: &DeflaterOutputStream.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _out: /* java.io.OutputStream */ UnclassedObject? ) {
        self.init( out: _out )
    }

    /// public java.util.zip.DeflaterOutputStream(java.io.OutputStream,boolean)

    private static var new_MethodID_2: jmethodID?

    public convenience init( out: /* java.io.OutputStream */ UnclassedObject?, syncFlush: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: out, locals: &__locals )
        __args[1] = JNIType.toJava( value: syncFlush, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/DeflaterOutputStream", classCache: &DeflaterOutputStream.DeflaterOutputStreamJNIClass, methodSig: "(Ljava/io/OutputStream;Z)V", methodCache: &DeflaterOutputStream.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _out: /* java.io.OutputStream */ UnclassedObject?, _ _syncFlush: Bool ) {
        self.init( out: _out, syncFlush: _syncFlush )
    }

    /// public java.util.zip.DeflaterOutputStream(java.io.OutputStream,java.util.zip.Deflater)

    private static var new_MethodID_3: jmethodID?

    public convenience init( out: /* java.io.OutputStream */ UnclassedObject?, def: Deflater? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: out, locals: &__locals )
        __args[1] = JNIType.toJava( value: def, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/DeflaterOutputStream", classCache: &DeflaterOutputStream.DeflaterOutputStreamJNIClass, methodSig: "(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)V", methodCache: &DeflaterOutputStream.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _out: /* java.io.OutputStream */ UnclassedObject?, _ _def: Deflater? ) {
        self.init( out: _out, def: _def )
    }

    /// public java.util.zip.DeflaterOutputStream(java.io.OutputStream,java.util.zip.Deflater,int,boolean)

    private static var new_MethodID_4: jmethodID?

    public convenience init( out: /* java.io.OutputStream */ UnclassedObject?, def: Deflater?, size: Int, syncFlush: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: out, locals: &__locals )
        __args[1] = JNIType.toJava( value: def, locals: &__locals )
        __args[2] = JNIType.toJava( value: size, locals: &__locals )
        __args[3] = JNIType.toJava( value: syncFlush, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/DeflaterOutputStream", classCache: &DeflaterOutputStream.DeflaterOutputStreamJNIClass, methodSig: "(Ljava/io/OutputStream;Ljava/util/zip/Deflater;IZ)V", methodCache: &DeflaterOutputStream.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _out: /* java.io.OutputStream */ UnclassedObject?, _ _def: Deflater?, _ _size: Int, _ _syncFlush: Bool ) {
        self.init( out: _out, def: _def, size: _size, syncFlush: _syncFlush )
    }

    /// public java.util.zip.DeflaterOutputStream(java.io.OutputStream,java.util.zip.Deflater,int)

    private static var new_MethodID_5: jmethodID?

    public convenience init( out: /* java.io.OutputStream */ UnclassedObject?, def: Deflater?, size: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: out, locals: &__locals )
        __args[1] = JNIType.toJava( value: def, locals: &__locals )
        __args[2] = JNIType.toJava( value: size, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/DeflaterOutputStream", classCache: &DeflaterOutputStream.DeflaterOutputStreamJNIClass, methodSig: "(Ljava/io/OutputStream;Ljava/util/zip/Deflater;I)V", methodCache: &DeflaterOutputStream.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _out: /* java.io.OutputStream */ UnclassedObject?, _ _def: Deflater?, _ _size: Int ) {
        self.init( out: _out, def: _def, size: _size )
    }

    /// public java.util.zip.DeflaterOutputStream(java.io.OutputStream,java.util.zip.Deflater,boolean)

    private static var new_MethodID_6: jmethodID?

    public convenience init( out: /* java.io.OutputStream */ UnclassedObject?, def: Deflater?, syncFlush: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: out, locals: &__locals )
        __args[1] = JNIType.toJava( value: def, locals: &__locals )
        __args[2] = JNIType.toJava( value: syncFlush, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/DeflaterOutputStream", classCache: &DeflaterOutputStream.DeflaterOutputStreamJNIClass, methodSig: "(Ljava/io/OutputStream;Ljava/util/zip/Deflater;Z)V", methodCache: &DeflaterOutputStream.new_MethodID_6, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _out: /* java.io.OutputStream */ UnclassedObject?, _ _def: Deflater?, _ _syncFlush: Bool ) {
        self.init( out: _out, def: _def, syncFlush: _syncFlush )
    }

    /// public void java.util.zip.DeflaterOutputStream.write(byte[],int,int) throws java.io.IOException

    /// public void java.util.zip.DeflaterOutputStream.write(int) throws java.io.IOException

    /// public void java.util.zip.DeflaterOutputStream.flush() throws java.io.IOException

    /// public void java.util.zip.DeflaterOutputStream.close() throws java.io.IOException

    /// public void java.util.zip.DeflaterOutputStream.finish() throws java.io.IOException

    private static var finish_MethodID_7: jmethodID?

    open func finish() throws /* java.io.IOException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "finish", methodSig: "()V", methodCache: &DeflaterOutputStream.finish_MethodID_7, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.IOException */ UnclassedObject( javaObject: throwable )
        }
    }


    /// protected void java.util.zip.DeflaterOutputStream.deflate() throws java.io.IOException

    private static var deflate_MethodID_8: jmethodID?

    open func deflate() throws /* java.io.IOException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "deflate", methodSig: "()V", methodCache: &DeflaterOutputStream.deflate_MethodID_8, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.IOException */ UnclassedObject( javaObject: throwable )
        }
    }


}

