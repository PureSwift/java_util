
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:58 GMT 2016 ///

/// class java.util.Calendar ///

open class Calendar: java_lang.JavaObject, /* java.io.Serializable */ UnclassedProtocol, java_lang.Cloneable, java_lang.JavaComparable {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.Calendar", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CalendarJNIClass: jclass?

    /// public static final int java.util.Calendar.ERA

    private static var ERA_FieldID: jfieldID?

    open static var ERA: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ERA", fieldType: "I", fieldCache: &ERA_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.YEAR

    private static var YEAR_FieldID: jfieldID?

    open static var YEAR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "YEAR", fieldType: "I", fieldCache: &YEAR_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.MONTH

    private static var MONTH_FieldID: jfieldID?

    open static var MONTH: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MONTH", fieldType: "I", fieldCache: &MONTH_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.WEEK_OF_YEAR

    private static var WEEK_OF_YEAR_FieldID: jfieldID?

    open static var WEEK_OF_YEAR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WEEK_OF_YEAR", fieldType: "I", fieldCache: &WEEK_OF_YEAR_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.WEEK_OF_MONTH

    private static var WEEK_OF_MONTH_FieldID: jfieldID?

    open static var WEEK_OF_MONTH: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WEEK_OF_MONTH", fieldType: "I", fieldCache: &WEEK_OF_MONTH_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.DATE

    private static var DATE_FieldID: jfieldID?

    open static var DATE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DATE", fieldType: "I", fieldCache: &DATE_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.DAY_OF_MONTH

    private static var DAY_OF_MONTH_FieldID: jfieldID?

    open static var DAY_OF_MONTH: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DAY_OF_MONTH", fieldType: "I", fieldCache: &DAY_OF_MONTH_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.DAY_OF_YEAR

    private static var DAY_OF_YEAR_FieldID: jfieldID?

    open static var DAY_OF_YEAR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DAY_OF_YEAR", fieldType: "I", fieldCache: &DAY_OF_YEAR_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.DAY_OF_WEEK

    private static var DAY_OF_WEEK_FieldID: jfieldID?

    open static var DAY_OF_WEEK: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DAY_OF_WEEK", fieldType: "I", fieldCache: &DAY_OF_WEEK_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.DAY_OF_WEEK_IN_MONTH

    private static var DAY_OF_WEEK_IN_MONTH_FieldID: jfieldID?

    open static var DAY_OF_WEEK_IN_MONTH: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DAY_OF_WEEK_IN_MONTH", fieldType: "I", fieldCache: &DAY_OF_WEEK_IN_MONTH_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.AM_PM

    private static var AM_PM_FieldID: jfieldID?

    open static var AM_PM: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "AM_PM", fieldType: "I", fieldCache: &AM_PM_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.HOUR

    private static var HOUR_FieldID: jfieldID?

    open static var HOUR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "HOUR", fieldType: "I", fieldCache: &HOUR_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.HOUR_OF_DAY

    private static var HOUR_OF_DAY_FieldID: jfieldID?

    open static var HOUR_OF_DAY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "HOUR_OF_DAY", fieldType: "I", fieldCache: &HOUR_OF_DAY_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.MINUTE

    private static var MINUTE_FieldID: jfieldID?

    open static var MINUTE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MINUTE", fieldType: "I", fieldCache: &MINUTE_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.SECOND

    private static var SECOND_FieldID: jfieldID?

    open static var SECOND: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SECOND", fieldType: "I", fieldCache: &SECOND_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.MILLISECOND

    private static var MILLISECOND_FieldID: jfieldID?

    open static var MILLISECOND: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MILLISECOND", fieldType: "I", fieldCache: &MILLISECOND_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.ZONE_OFFSET

    private static var ZONE_OFFSET_FieldID: jfieldID?

    open static var ZONE_OFFSET: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ZONE_OFFSET", fieldType: "I", fieldCache: &ZONE_OFFSET_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.DST_OFFSET

    private static var DST_OFFSET_FieldID: jfieldID?

    open static var DST_OFFSET: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DST_OFFSET", fieldType: "I", fieldCache: &DST_OFFSET_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.FIELD_COUNT

    private static var FIELD_COUNT_FieldID: jfieldID?

    open static var FIELD_COUNT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FIELD_COUNT", fieldType: "I", fieldCache: &FIELD_COUNT_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.SUNDAY

    private static var SUNDAY_FieldID: jfieldID?

    open static var SUNDAY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SUNDAY", fieldType: "I", fieldCache: &SUNDAY_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.MONDAY

    private static var MONDAY_FieldID: jfieldID?

    open static var MONDAY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MONDAY", fieldType: "I", fieldCache: &MONDAY_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.TUESDAY

    private static var TUESDAY_FieldID: jfieldID?

    open static var TUESDAY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TUESDAY", fieldType: "I", fieldCache: &TUESDAY_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.WEDNESDAY

    private static var WEDNESDAY_FieldID: jfieldID?

    open static var WEDNESDAY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WEDNESDAY", fieldType: "I", fieldCache: &WEDNESDAY_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.THURSDAY

    private static var THURSDAY_FieldID: jfieldID?

    open static var THURSDAY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "THURSDAY", fieldType: "I", fieldCache: &THURSDAY_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.FRIDAY

    private static var FRIDAY_FieldID: jfieldID?

    open static var FRIDAY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FRIDAY", fieldType: "I", fieldCache: &FRIDAY_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.SATURDAY

    private static var SATURDAY_FieldID: jfieldID?

    open static var SATURDAY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SATURDAY", fieldType: "I", fieldCache: &SATURDAY_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.JANUARY

    private static var JANUARY_FieldID: jfieldID?

    open static var JANUARY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "JANUARY", fieldType: "I", fieldCache: &JANUARY_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.FEBRUARY

    private static var FEBRUARY_FieldID: jfieldID?

    open static var FEBRUARY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FEBRUARY", fieldType: "I", fieldCache: &FEBRUARY_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.MARCH

    private static var MARCH_FieldID: jfieldID?

    open static var MARCH: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MARCH", fieldType: "I", fieldCache: &MARCH_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.APRIL

    private static var APRIL_FieldID: jfieldID?

    open static var APRIL: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "APRIL", fieldType: "I", fieldCache: &APRIL_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.MAY

    private static var MAY_FieldID: jfieldID?

    open static var MAY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MAY", fieldType: "I", fieldCache: &MAY_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.JUNE

    private static var JUNE_FieldID: jfieldID?

    open static var JUNE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "JUNE", fieldType: "I", fieldCache: &JUNE_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.JULY

    private static var JULY_FieldID: jfieldID?

    open static var JULY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "JULY", fieldType: "I", fieldCache: &JULY_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.AUGUST

    private static var AUGUST_FieldID: jfieldID?

    open static var AUGUST: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "AUGUST", fieldType: "I", fieldCache: &AUGUST_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.SEPTEMBER

    private static var SEPTEMBER_FieldID: jfieldID?

    open static var SEPTEMBER: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SEPTEMBER", fieldType: "I", fieldCache: &SEPTEMBER_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.OCTOBER

    private static var OCTOBER_FieldID: jfieldID?

    open static var OCTOBER: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "OCTOBER", fieldType: "I", fieldCache: &OCTOBER_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.NOVEMBER

    private static var NOVEMBER_FieldID: jfieldID?

    open static var NOVEMBER: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "NOVEMBER", fieldType: "I", fieldCache: &NOVEMBER_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.DECEMBER

    private static var DECEMBER_FieldID: jfieldID?

    open static var DECEMBER: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DECEMBER", fieldType: "I", fieldCache: &DECEMBER_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.UNDECIMBER

    private static var UNDECIMBER_FieldID: jfieldID?

    open static var UNDECIMBER: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "UNDECIMBER", fieldType: "I", fieldCache: &UNDECIMBER_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.AM

    private static var AM_FieldID: jfieldID?

    open static var AM: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "AM", fieldType: "I", fieldCache: &AM_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.PM

    private static var PM_FieldID: jfieldID?

    open static var PM: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "PM", fieldType: "I", fieldCache: &PM_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.ALL_STYLES

    private static var ALL_STYLES_FieldID: jfieldID?

    open static var ALL_STYLES: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ALL_STYLES", fieldType: "I", fieldCache: &ALL_STYLES_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.SHORT

    private static var SHORT_FieldID: jfieldID?

    open static var SHORT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SHORT", fieldType: "I", fieldCache: &SHORT_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.Calendar.LONG

    private static var LONG_FieldID: jfieldID?

    open static var LONG: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "LONG", fieldType: "I", fieldCache: &LONG_FieldID, className: "java/util/Calendar", classCache: &CalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// protected int[] java.util.Calendar.fields

    private static var fields_FieldID: jfieldID?

    open var fields: [Int32]! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "fields", fieldType: "[I", fieldCache: &Calendar.fields_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: [Int32](), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "fields", fieldType: "[I", fieldCache: &Calendar.fields_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected boolean[] java.util.Calendar.isSet

    private static var isSet_FieldID: jfieldID?

    open var isSet: [Bool]! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "isSet", fieldType: "[Z", fieldCache: &Calendar.isSet_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: [Bool](), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "isSet", fieldType: "[Z", fieldCache: &Calendar.isSet_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private transient int[] java.util.Calendar.stamp

    /// protected long java.util.Calendar.time

    private static var time_FieldID: jfieldID?

    open var time: Int64 {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetLongField( fieldName: "time", fieldType: "J", fieldCache: &Calendar.time_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int64(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetLongField( fieldName: "time", fieldType: "J", fieldCache: &Calendar.time_FieldID, object: javaObject, value: __value.j, locals: &__locals )
        }
    }

    /// protected boolean java.util.Calendar.isTimeSet

    private static var isTimeSet_FieldID: jfieldID?

    open var isTimeSet: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "isTimeSet", fieldType: "Z", fieldCache: &Calendar.isTimeSet_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "isTimeSet", fieldType: "Z", fieldCache: &Calendar.isTimeSet_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected boolean java.util.Calendar.areFieldsSet

    private static var areFieldsSet_FieldID: jfieldID?

    open var areFieldsSet: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "areFieldsSet", fieldType: "Z", fieldCache: &Calendar.areFieldsSet_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "areFieldsSet", fieldType: "Z", fieldCache: &Calendar.areFieldsSet_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// transient boolean java.util.Calendar.areAllFieldsSet

    /// private boolean java.util.Calendar.lenient

    /// private java.util.TimeZone java.util.Calendar.zone

    /// private transient boolean java.util.Calendar.sharedZone

    /// private int java.util.Calendar.firstDayOfWeek

    /// private int java.util.Calendar.minimalDaysInFirstWeek

    /// private static final java.util.concurrent.ConcurrentMap java.util.Calendar.cachedLocaleData

    /// private static final int java.util.Calendar.UNSET

    /// private static final int java.util.Calendar.COMPUTED

    /// private static final int java.util.Calendar.MINIMUM_USER_STAMP

    /// static final int java.util.Calendar.ALL_FIELDS

    /// private int java.util.Calendar.nextStamp

    /// static final int java.util.Calendar.currentSerialVersion

    /// private int java.util.Calendar.serialVersionOnStream

    /// static final long java.util.Calendar.serialVersionUID

    /// static final int java.util.Calendar.ERA_MASK

    /// static final int java.util.Calendar.YEAR_MASK

    /// static final int java.util.Calendar.MONTH_MASK

    /// static final int java.util.Calendar.WEEK_OF_YEAR_MASK

    /// static final int java.util.Calendar.WEEK_OF_MONTH_MASK

    /// static final int java.util.Calendar.DAY_OF_MONTH_MASK

    /// static final int java.util.Calendar.DATE_MASK

    /// static final int java.util.Calendar.DAY_OF_YEAR_MASK

    /// static final int java.util.Calendar.DAY_OF_WEEK_MASK

    /// static final int java.util.Calendar.DAY_OF_WEEK_IN_MONTH_MASK

    /// static final int java.util.Calendar.AM_PM_MASK

    /// static final int java.util.Calendar.HOUR_MASK

    /// static final int java.util.Calendar.HOUR_OF_DAY_MASK

    /// static final int java.util.Calendar.MINUTE_MASK

    /// static final int java.util.Calendar.SECOND_MASK

    /// static final int java.util.Calendar.MILLISECOND_MASK

    /// static final int java.util.Calendar.ZONE_OFFSET_MASK

    /// static final int java.util.Calendar.DST_OFFSET_MASK

    /// private static final java.lang.String[] java.util.Calendar.FIELD_NAME

    /// static final boolean java.util.Calendar.$assertionsDisabled

    /// protected java.util.Calendar()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/Calendar", classCache: &Calendar.CalendarJNIClass, methodSig: "()V", methodCache: &Calendar.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// protected java.util.Calendar(java.util.TimeZone,java.util.Locale)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: TimeZone?, arg1: JavaLocale? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Calendar", classCache: &Calendar.CalendarJNIClass, methodSig: "(Ljava/util/TimeZone;Ljava/util/Locale;)V", methodCache: &Calendar.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: TimeZone?, _ _arg1: JavaLocale? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.util.Calendar.add(int,int)

    private static var add_MethodID_3: jmethodID?

    open func add( arg0: Int, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "add", methodSig: "(II)V", methodCache: &Calendar.add_MethodID_3, args: &__args, locals: &__locals )
    }

    open func add( _ _arg0: Int, _ _arg1: Int ) {
        add( arg0: _arg0, arg1: _arg1 )
    }

    /// public int java.util.Calendar.get(int)

    private static var get_MethodID_4: jmethodID?

    open func get( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "get", methodSig: "(I)I", methodCache: &Calendar.get_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func get( _ _arg0: Int ) -> Int {
        return get( arg0: _arg0 )
    }

    /// public boolean java.util.Calendar.equals(java.lang.Object)

    /// public java.lang.String java.util.Calendar.toString()

    /// public int java.util.Calendar.hashCode()

    /// public java.lang.Object java.util.Calendar.clone()

    private static var clone_MethodID_5: jmethodID?

    override open func clone() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &Calendar.clone_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// private int java.util.Calendar.compareTo(long)

    /// public int java.util.Calendar.compareTo(java.util.Calendar)

    private static var compareTo_MethodID_6: jmethodID?

    open func compareTo( arg0: Calendar? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/util/Calendar;)I", methodCache: &Calendar.compareTo_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: Calendar? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public int java.util.Calendar.compareTo(java.lang.Object)

    private static var compareTo_MethodID_7: jmethodID?

    open func compareTo( arg0: java_lang.JavaObject? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Object;)I", methodCache: &Calendar.compareTo_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: java_lang.JavaObject? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public final void java.util.Calendar.clear()

    private static var clear_MethodID_8: jmethodID?

    open func clear() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "()V", methodCache: &Calendar.clear_MethodID_8, args: &__args, locals: &__locals )
    }


    /// public final void java.util.Calendar.clear(int)

    private static var clear_MethodID_9: jmethodID?

    open func clear( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "(I)V", methodCache: &Calendar.clear_MethodID_9, args: &__args, locals: &__locals )
    }

    open func clear( _ _arg0: Int ) {
        clear( arg0: _arg0 )
    }

    /// public static java.util.Calendar java.util.Calendar.getInstance(java.util.TimeZone,java.util.Locale)

    private static var getInstance_MethodID_10: jmethodID?

    open class func getInstance( arg0: TimeZone?, arg1: JavaLocale? ) -> Calendar! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Calendar", classCache: &CalendarJNIClass, methodName: "getInstance", methodSig: "(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar;", methodCache: &getInstance_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Calendar( javaObject: __return ) : nil
    }

    open class func getInstance( _ _arg0: TimeZone?, _ _arg1: JavaLocale? ) -> Calendar! {
        return getInstance( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.util.Calendar java.util.Calendar.getInstance()

    private static var getInstance_MethodID_11: jmethodID?

    open class func getInstance() -> Calendar! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Calendar", classCache: &CalendarJNIClass, methodName: "getInstance", methodSig: "()Ljava/util/Calendar;", methodCache: &getInstance_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Calendar( javaObject: __return ) : nil
    }


    /// public static java.util.Calendar java.util.Calendar.getInstance(java.util.TimeZone)

    private static var getInstance_MethodID_12: jmethodID?

    open class func getInstance( arg0: TimeZone? ) -> Calendar! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Calendar", classCache: &CalendarJNIClass, methodName: "getInstance", methodSig: "(Ljava/util/TimeZone;)Ljava/util/Calendar;", methodCache: &getInstance_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Calendar( javaObject: __return ) : nil
    }

    open class func getInstance( _ _arg0: TimeZone? ) -> Calendar! {
        return getInstance( arg0: _arg0 )
    }

    /// public static java.util.Calendar java.util.Calendar.getInstance(java.util.Locale)

    private static var getInstance_MethodID_13: jmethodID?

    open class func getInstance( arg0: JavaLocale? ) -> Calendar! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Calendar", classCache: &CalendarJNIClass, methodName: "getInstance", methodSig: "(Ljava/util/Locale;)Ljava/util/Calendar;", methodCache: &getInstance_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Calendar( javaObject: __return ) : nil
    }

    open class func getInstance( _ _arg0: JavaLocale? ) -> Calendar! {
        return getInstance( arg0: _arg0 )
    }

    /// private void java.util.Calendar.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// public final boolean java.util.Calendar.isSet(int)

    private static var isSet_MethodID_14: jmethodID?

    open func isSet( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isSet", methodSig: "(I)Z", methodCache: &Calendar.isSet_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func isSet( _ _arg0: Int ) -> Bool {
        return isSet( arg0: _arg0 )
    }

    /// private void java.util.Calendar.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// public final void java.util.Calendar.set(int,int,int)

    private static var set_MethodID_15: jmethodID?

    open func set( arg0: Int, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "set", methodSig: "(III)V", methodCache: &Calendar.set_MethodID_15, args: &__args, locals: &__locals )
    }

    open func set( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) {
        set( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.util.Calendar.set(int,int)

    private static var set_MethodID_16: jmethodID?

    open func set( arg0: Int, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "set", methodSig: "(II)V", methodCache: &Calendar.set_MethodID_16, args: &__args, locals: &__locals )
    }

    open func set( _ _arg0: Int, _ _arg1: Int ) {
        set( arg0: _arg0, arg1: _arg1 )
    }

    /// public final void java.util.Calendar.set(int,int,int,int,int)

    private static var set_MethodID_17: jmethodID?

    open func set( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "set", methodSig: "(IIIII)V", methodCache: &Calendar.set_MethodID_17, args: &__args, locals: &__locals )
    }

    open func set( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int ) {
        set( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public final void java.util.Calendar.set(int,int,int,int,int,int)

    private static var set_MethodID_18: jmethodID?

    open func set( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "set", methodSig: "(IIIIII)V", methodCache: &Calendar.set_MethodID_18, args: &__args, locals: &__locals )
    }

    open func set( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int ) {
        set( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public boolean java.util.Calendar.after(java.lang.Object)

    private static var after_MethodID_19: jmethodID?

    open func after( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "after", methodSig: "(Ljava/lang/Object;)Z", methodCache: &Calendar.after_MethodID_19, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func after( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return after( arg0: _arg0 )
    }

    /// public boolean java.util.Calendar.before(java.lang.Object)

    private static var before_MethodID_20: jmethodID?

    open func before( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "before", methodSig: "(Ljava/lang/Object;)Z", methodCache: &Calendar.before_MethodID_20, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func before( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return before( arg0: _arg0 )
    }

    /// protected void java.util.Calendar.complete()

    private static var complete_MethodID_21: jmethodID?

    open func complete() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "complete", methodSig: "()V", methodCache: &Calendar.complete_MethodID_21, args: &__args, locals: &__locals )
    }


    /// public static synchronized java.util.Locale[] java.util.Calendar.getAvailableLocales()

    private static var getAvailableLocales_MethodID_22: jmethodID?

    open class func getAvailableLocales() -> [JavaLocale]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Calendar", classCache: &CalendarJNIClass, methodName: "getAvailableLocales", methodSig: "()[Ljava/util/Locale;", methodCache: &getAvailableLocales_MethodID_22, args: &__args, locals: &__locals )
        return JNIType.decode( type: [JavaLocale](), from: __return )
    }


    /// public java.lang.String java.util.Calendar.getDisplayName(int,int,java.util.Locale)

    private static var getDisplayName_MethodID_23: jmethodID?

    open func getDisplayName( arg0: Int, arg1: Int, arg2: JavaLocale? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDisplayName", methodSig: "(IILjava/util/Locale;)Ljava/lang/String;", methodCache: &Calendar.getDisplayName_MethodID_23, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func getDisplayName( _ _arg0: Int, _ _arg1: Int, _ _arg2: JavaLocale? ) -> String! {
        return getDisplayName( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public final void java.util.Calendar.setTime(java.util.Date)

    private static var setTime_MethodID_24: jmethodID?

    open func setTime( arg0: Date? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTime", methodSig: "(Ljava/util/Date;)V", methodCache: &Calendar.setTime_MethodID_24, args: &__args, locals: &__locals )
    }

    open func setTime( _ _arg0: Date? ) {
        setTime( arg0: _arg0 )
    }

    /// public final java.util.Date java.util.Calendar.getTime()

    private static var getTime_MethodID_25: jmethodID?

    open func getTime() -> Date! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTime", methodSig: "()Ljava/util/Date;", methodCache: &Calendar.getTime_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Date( javaObject: __return ) : nil
    }


    /// public java.util.TimeZone java.util.Calendar.getTimeZone()

    private static var getTimeZone_MethodID_26: jmethodID?

    open func getTimeZone() -> TimeZone! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTimeZone", methodSig: "()Ljava/util/TimeZone;", methodCache: &Calendar.getTimeZone_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TimeZone( javaObject: __return ) : nil
    }


    /// public void java.util.Calendar.setTimeZone(java.util.TimeZone)

    private static var setTimeZone_MethodID_27: jmethodID?

    open func setTimeZone( arg0: TimeZone? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTimeZone", methodSig: "(Ljava/util/TimeZone;)V", methodCache: &Calendar.setTimeZone_MethodID_27, args: &__args, locals: &__locals )
    }

    open func setTimeZone( _ _arg0: TimeZone? ) {
        setTimeZone( arg0: _arg0 )
    }

    /// java.util.TimeZone java.util.Calendar.getZone()

    /// private static final long java.util.Calendar.getMillisOf(java.util.Calendar)

    /// public long java.util.Calendar.getTimeInMillis()

    private static var getTimeInMillis_MethodID_28: jmethodID?

    open func getTimeInMillis() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getTimeInMillis", methodSig: "()J", methodCache: &Calendar.getTimeInMillis_MethodID_28, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }


    /// public java.util.Map java.util.Calendar.getDisplayNames(int,int,java.util.Locale)

    private static var getDisplayNames_MethodID_29: jmethodID?

    open func getDisplayNames( arg0: Int, arg1: Int, arg2: JavaLocale? ) -> Map! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDisplayNames", methodSig: "(IILjava/util/Locale;)Ljava/util/Map;", methodCache: &Calendar.getDisplayNames_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? MapForward( javaObject: __return ) : nil
    }

    open func getDisplayNames( _ _arg0: Int, _ _arg1: Int, _ _arg2: JavaLocale? ) -> Map! {
        return getDisplayNames( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.util.Calendar.setTimeInMillis(long)

    private static var setTimeInMillis_MethodID_30: jmethodID?

    open func setTimeInMillis( arg0: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTimeInMillis", methodSig: "(J)V", methodCache: &Calendar.setTimeInMillis_MethodID_30, args: &__args, locals: &__locals )
    }

    open func setTimeInMillis( _ _arg0: Int64 ) {
        setTimeInMillis( arg0: _arg0 )
    }

    /// public void java.util.Calendar.setLenient(boolean)

    private static var setLenient_MethodID_31: jmethodID?

    open func setLenient( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLenient", methodSig: "(Z)V", methodCache: &Calendar.setLenient_MethodID_31, args: &__args, locals: &__locals )
    }

    open func setLenient( _ _arg0: Bool ) {
        setLenient( arg0: _arg0 )
    }

    /// public abstract void java.util.Calendar.roll(int,boolean)

    private static var roll_MethodID_32: jmethodID?

    open func roll( arg0: Int, arg1: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "roll", methodSig: "(IZ)V", methodCache: &Calendar.roll_MethodID_32, args: &__args, locals: &__locals )
    }

    open func roll( _ _arg0: Int, _ _arg1: Bool ) {
        roll( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.util.Calendar.roll(int,int)

    private static var roll_MethodID_33: jmethodID?

    open func roll( arg0: Int, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "roll", methodSig: "(II)V", methodCache: &Calendar.roll_MethodID_33, args: &__args, locals: &__locals )
    }

    open func roll( _ _arg0: Int, _ _arg1: Int ) {
        roll( arg0: _arg0, arg1: _arg1 )
    }

    /// private java.util.Map java.util.Calendar.getDisplayNamesImpl(int,int,java.util.Locale)

    /// public abstract int java.util.Calendar.getMinimum(int)

    private static var getMinimum_MethodID_34: jmethodID?

    open func getMinimum( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMinimum", methodSig: "(I)I", methodCache: &Calendar.getMinimum_MethodID_34, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getMinimum( _ _arg0: Int ) -> Int {
        return getMinimum( arg0: _arg0 )
    }

    /// public abstract int java.util.Calendar.getMaximum(int)

    private static var getMaximum_MethodID_35: jmethodID?

    open func getMaximum( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMaximum", methodSig: "(I)I", methodCache: &Calendar.getMaximum_MethodID_35, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getMaximum( _ _arg0: Int ) -> Int {
        return getMaximum( arg0: _arg0 )
    }

    /// public abstract int java.util.Calendar.getGreatestMinimum(int)

    private static var getGreatestMinimum_MethodID_36: jmethodID?

    open func getGreatestMinimum( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getGreatestMinimum", methodSig: "(I)I", methodCache: &Calendar.getGreatestMinimum_MethodID_36, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getGreatestMinimum( _ _arg0: Int ) -> Int {
        return getGreatestMinimum( arg0: _arg0 )
    }

    /// public abstract int java.util.Calendar.getLeastMaximum(int)

    private static var getLeastMaximum_MethodID_37: jmethodID?

    open func getLeastMaximum( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getLeastMaximum", methodSig: "(I)I", methodCache: &Calendar.getLeastMaximum_MethodID_37, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getLeastMaximum( _ _arg0: Int ) -> Int {
        return getLeastMaximum( arg0: _arg0 )
    }

    /// public int java.util.Calendar.getActualMinimum(int)

    private static var getActualMinimum_MethodID_38: jmethodID?

    open func getActualMinimum( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getActualMinimum", methodSig: "(I)I", methodCache: &Calendar.getActualMinimum_MethodID_38, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getActualMinimum( _ _arg0: Int ) -> Int {
        return getActualMinimum( arg0: _arg0 )
    }

    /// public int java.util.Calendar.getActualMaximum(int)

    private static var getActualMaximum_MethodID_39: jmethodID?

    open func getActualMaximum( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getActualMaximum", methodSig: "(I)I", methodCache: &Calendar.getActualMaximum_MethodID_39, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getActualMaximum( _ _arg0: Int ) -> Int {
        return getActualMaximum( arg0: _arg0 )
    }

    /// protected abstract void java.util.Calendar.computeFields()

    private static var computeFields_MethodID_40: jmethodID?

    open func computeFields() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "computeFields", methodSig: "()V", methodCache: &Calendar.computeFields_MethodID_40, args: &__args, locals: &__locals )
    }


    /// protected abstract void java.util.Calendar.computeTime()

    private static var computeTime_MethodID_41: jmethodID?

    open func computeTime() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "computeTime", methodSig: "()V", methodCache: &Calendar.computeTime_MethodID_41, args: &__args, locals: &__locals )
    }


    /// protected final int java.util.Calendar.internalGet(int)

    private static var internalGet_MethodID_42: jmethodID?

    open func internalGet( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "internalGet", methodSig: "(I)I", methodCache: &Calendar.internalGet_MethodID_42, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func internalGet( _ _arg0: Int ) -> Int {
        return internalGet( arg0: _arg0 )
    }

    /// final void java.util.Calendar.internalSet(int,int)

    /// public int java.util.Calendar.getFirstDayOfWeek()

    private static var getFirstDayOfWeek_MethodID_43: jmethodID?

    open func getFirstDayOfWeek() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getFirstDayOfWeek", methodSig: "()I", methodCache: &Calendar.getFirstDayOfWeek_MethodID_43, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.util.Calendar.getMinimalDaysInFirstWeek()

    private static var getMinimalDaysInFirstWeek_MethodID_44: jmethodID?

    open func getMinimalDaysInFirstWeek() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMinimalDaysInFirstWeek", methodSig: "()I", methodCache: &Calendar.getMinimalDaysInFirstWeek_MethodID_44, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// boolean java.util.Calendar.checkDisplayNameParams(int,int,int,int,java.util.Locale,int)

    /// static final boolean java.util.Calendar.isFieldSet(int,int)

    /// final boolean java.util.Calendar.isPartiallyNormalized()

    /// final int java.util.Calendar.getSetStateFields()

    /// final void java.util.Calendar.setFieldsComputed(int)

    /// public boolean java.util.Calendar.isLenient()

    private static var isLenient_MethodID_45: jmethodID?

    open func isLenient() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isLenient", methodSig: "()Z", methodCache: &Calendar.isLenient_MethodID_45, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// final boolean java.util.Calendar.isExternallySet(int)

    /// static final java.lang.String java.util.Calendar.getFieldName(int)

    /// final int java.util.Calendar.selectFields()

    /// final void java.util.Calendar.setFieldsNormalized(int)

    /// final boolean java.util.Calendar.isFullyNormalized()

    /// private static java.util.Calendar java.util.Calendar.createCalendar(java.util.TimeZone,java.util.Locale)

    /// private java.lang.String[] java.util.Calendar.getFieldStrings(int,int,java.text.DateFormatSymbols)

    /// final void java.util.Calendar.setUnnormalized()

    /// private static final int java.util.Calendar.aggregateStamp(int,int)

    /// void java.util.Calendar.setZoneShared(boolean)

    /// public void java.util.Calendar.setFirstDayOfWeek(int)

    private static var setFirstDayOfWeek_MethodID_46: jmethodID?

    open func setFirstDayOfWeek( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFirstDayOfWeek", methodSig: "(I)V", methodCache: &Calendar.setFirstDayOfWeek_MethodID_46, args: &__args, locals: &__locals )
    }

    open func setFirstDayOfWeek( _ _arg0: Int ) {
        setFirstDayOfWeek( arg0: _arg0 )
    }

    /// public void java.util.Calendar.setMinimalDaysInFirstWeek(int)

    private static var setMinimalDaysInFirstWeek_MethodID_47: jmethodID?

    open func setMinimalDaysInFirstWeek( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMinimalDaysInFirstWeek", methodSig: "(I)V", methodCache: &Calendar.setMinimalDaysInFirstWeek_MethodID_47, args: &__args, locals: &__locals )
    }

    open func setMinimalDaysInFirstWeek( _ _arg0: Int ) {
        setMinimalDaysInFirstWeek( arg0: _arg0 )
    }

    /// private static final void java.util.Calendar.appendValue(java.lang.StringBuilder,java.lang.String,boolean,long)

    /// private void java.util.Calendar.setWeekCountData(java.util.Locale)

    /// private void java.util.Calendar.updateTime()

    /// private final void java.util.Calendar.adjustStamp()

    /// private void java.util.Calendar.invalidateWeekFields()

}
