
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.function.ToDoubleBiFunction ///

public protocol ToDoubleBiFunction: JavaProtocol {

    /// public abstract double java.util.function.ToDoubleBiFunction.applyAsDouble(java.lang.Object,java.lang.Object)

    func applyAsDouble( t: java_swift.JavaObject?, u: java_swift.JavaObject? ) -> Double

}


open class ToDoubleBiFunctionForward: JNIObjectForward, ToDoubleBiFunction {

    private static var ToDoubleBiFunctionJNIClass: jclass?

    /// public abstract double java.util.function.ToDoubleBiFunction.applyAsDouble(java.lang.Object,java.lang.Object)

    private static var applyAsDouble_MethodID_2: jmethodID?

    open func applyAsDouble( t: java_swift.JavaObject?, u: java_swift.JavaObject? ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: t != nil ? t! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: u != nil ? u! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "applyAsDouble", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)D", methodCache: &ToDoubleBiFunctionForward.applyAsDouble_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }

    open func applyAsDouble( _ _t: java_swift.JavaObject?, _ _u: java_swift.JavaObject? ) -> Double {
        return applyAsDouble( t: _t, u: _u )
    }

}


