
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:04 GMT 2016 ///

/// class java.util.AbstractSequentialList ///

open class AbstractSequentialList: AbstractList {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.AbstractSequentialList", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AbstractSequentialListJNIClass: jclass?

    /// protected transient int java.util.AbstractList.modCount

    private static var modCount_FieldID: jfieldID?

    override open var modCount: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "modCount", fieldType: "I", fieldCache: &AbstractSequentialList.modCount_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "modCount", fieldType: "I", fieldCache: &AbstractSequentialList.modCount_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.util.AbstractSequentialList()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/AbstractSequentialList", classCache: &AbstractSequentialList.AbstractSequentialListJNIClass, methodSig: "()V", methodCache: &AbstractSequentialList.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void java.util.AbstractSequentialList.add(int,java.lang.Object)

    /// public java.lang.Object java.util.AbstractSequentialList.get(int)

    /// public boolean java.util.AbstractSequentialList.addAll(int,java.util.Collection)

    /// public java.util.Iterator java.util.AbstractSequentialList.iterator()

    /// public java.lang.Object java.util.AbstractSequentialList.remove(int)

    /// public java.lang.Object java.util.AbstractSequentialList.set(int,java.lang.Object)

    /// public abstract java.util.ListIterator java.util.AbstractSequentialList.listIterator(int)

}
