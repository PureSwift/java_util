
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:55 GMT 2016 ///

/// class java.util.zip.Adler32 ///

open class Adler32: java_lang.JavaObject, Checksum {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.zip.Adler32", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var Adler32JNIClass: jclass?

    /// private int java.util.zip.Adler32.adler

    /// public java.util.zip.Adler32()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/zip/Adler32", classCache: &Adler32.Adler32JNIClass, methodSig: "()V", methodCache: &Adler32.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public long java.util.zip.Adler32.getValue()

    private static var getValue_MethodID_2: jmethodID?

    open func getValue() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getValue", methodSig: "()J", methodCache: &Adler32.getValue_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }


    /// public void java.util.zip.Adler32.reset()

    private static var reset_MethodID_3: jmethodID?

    open func reset() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reset", methodSig: "()V", methodCache: &Adler32.reset_MethodID_3, args: &__args, locals: &__locals )
    }


    /// public void java.util.zip.Adler32.update(byte[])

    private static var update_MethodID_4: jmethodID?

    open func update( arg0: [Int8]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "update", methodSig: "([B)V", methodCache: &Adler32.update_MethodID_4, args: &__args, locals: &__locals )
    }

    open func update( _ _arg0: [Int8]? ) {
        update( arg0: _arg0 )
    }

    /// public void java.util.zip.Adler32.update(byte[],int,int)

    private static var update_MethodID_5: jmethodID?

    open func update( arg0: [Int8]?, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "update", methodSig: "([BII)V", methodCache: &Adler32.update_MethodID_5, args: &__args, locals: &__locals )
    }

    open func update( _ _arg0: [Int8]?, _ _arg1: Int, _ _arg2: Int ) {
        update( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.util.zip.Adler32.update(int)

    private static var update_MethodID_6: jmethodID?

    open func update( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "update", methodSig: "(I)V", methodCache: &Adler32.update_MethodID_6, args: &__args, locals: &__locals )
    }

    open func update( _ _arg0: Int ) {
        update( arg0: _arg0 )
    }

    /// private static native int java.util.zip.Adler32.update(int,int)

    /// private static native int java.util.zip.Adler32.updateBytes(int,byte[],int,int)

}
