
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.PropertyPermission ///

open class PropertyPermission: /* java.security.BasicPermission */ UnclassedObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var PropertyPermissionJNIClass: jclass?

    /// private static final int java.util.PropertyPermission.READ

    /// private static final int java.util.PropertyPermission.WRITE

    /// private static final int java.util.PropertyPermission.ALL

    /// private static final int java.util.PropertyPermission.NONE

    /// private transient int java.util.PropertyPermission.mask

    /// private java.lang.String java.util.PropertyPermission.actions

    /// private static final long java.util.PropertyPermission.serialVersionUID

    /// private static final long java.security.BasicPermission.serialVersionUID

    /// private transient boolean java.security.BasicPermission.wildcard

    /// private transient java.lang.String java.security.BasicPermission.path

    /// private transient boolean java.security.BasicPermission.exitVM

    /// private static final long java.security.Permission.serialVersionUID

    /// private java.lang.String java.security.Permission.name

    /// public java.util.PropertyPermission(java.lang.String,java.lang.String)

    private static var new_MethodID_1: jmethodID?

    public convenience init( name: String?, actions: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        __args[1] = JNIType.toJava( value: actions, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/PropertyPermission", classCache: &PropertyPermission.PropertyPermissionJNIClass, methodSig: "(Ljava/lang/String;Ljava/lang/String;)V", methodCache: &PropertyPermission.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _name: String?, _ _actions: String? ) {
        self.init( name: _name, actions: _actions )
    }

    /// public boolean java.util.PropertyPermission.equals(java.lang.Object)

    /// public int java.util.PropertyPermission.hashCode()

    /// private void java.util.PropertyPermission.init(int)

    /// private synchronized void java.util.PropertyPermission.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// private synchronized void java.util.PropertyPermission.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// public boolean java.util.PropertyPermission.implies(java.security.Permission)

    /// static java.lang.String java.util.PropertyPermission.getActions(int)

    /// public java.lang.String java.util.PropertyPermission.getActions()

    /// public java.security.PermissionCollection java.util.PropertyPermission.newPermissionCollection()

    /// private static int java.util.PropertyPermission.getMask(java.lang.String)

    /// int java.util.PropertyPermission.getMask()

}

