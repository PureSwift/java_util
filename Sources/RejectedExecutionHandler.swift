
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:49 GMT 2016 ///

/// interface java.util.concurrent.RejectedExecutionHandler ///

public protocol RejectedExecutionHandler: JavaProtocol {

    /// public abstract void java.util.concurrent.RejectedExecutionHandler.rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)

    func rejectedExecution( arg0: java_lang.Runnable?, arg1: ThreadPoolExecutor? )
    func rejectedExecution( _ _arg0: java_lang.Runnable?, _ _arg1: ThreadPoolExecutor? )

}

open class RejectedExecutionHandlerForward: JNIObjectForward, RejectedExecutionHandler {

    private static var RejectedExecutionHandlerJNIClass: jclass?

    /// public abstract void java.util.concurrent.RejectedExecutionHandler.rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)

    private static var rejectedExecution_MethodID_2: jmethodID?

    open func rejectedExecution( arg0: java_lang.Runnable?, arg1: ThreadPoolExecutor? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "rejectedExecution", methodSig: "(Ljava/lang/Runnable;Ljava/util/concurrent/ThreadPoolExecutor;)V", methodCache: &RejectedExecutionHandlerForward.rejectedExecution_MethodID_2, args: &__args, locals: &__locals )
    }

    open func rejectedExecution( _ _arg0: java_lang.Runnable?, _ _arg1: ThreadPoolExecutor? ) {
        rejectedExecution( arg0: _arg0, arg1: _arg1 )
    }

}


private typealias RejectedExecutionHandler_rejectedExecution_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject?, _: jobject? ) -> ()

private func RejectedExecutionHandler_rejectedExecution_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject?, _ arg1: jobject? ) -> () {
    RejectedExecutionHandlerBase.swiftObject( jniEnv: __env, javaObject: __this ).rejectedExecution( arg0 != nil ? java_lang.RunnableForward( javaObject: arg0 ) : nil, arg1 != nil ? ThreadPoolExecutor( javaObject: arg1 ) : nil )
}

open class RejectedExecutionHandlerBase: JNIObjectProxy, RejectedExecutionHandler {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let RejectedExecutionHandler_rejectedExecution_0_thunk: RejectedExecutionHandler_rejectedExecution_0_type = RejectedExecutionHandler_rejectedExecution_0
            natives.append( JNINativeMethod( name: strdup("__rejectedExecution"), signature: strdup("(Ljava/lang/Runnable;Ljava/util/concurrent/ThreadPoolExecutor;)V"), fnPtr: unsafeBitCast( RejectedExecutionHandler_rejectedExecution_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_util/RejectedExecutionHandlerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        RejectedExecutionHandlerBase.registerNatives()
        createProxy( javaClassName: "org/genie/java_util/RejectedExecutionHandlerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> RejectedExecutionHandlerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: RejectedExecutionHandlerBase.self )
    }

    /// public abstract void java.util.concurrent.RejectedExecutionHandler.rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)

    open func rejectedExecution( arg0: java_lang.Runnable?, arg1: ThreadPoolExecutor? ) /**/ {
    }

    open func rejectedExecution( _ _arg0: java_lang.Runnable?, _ _arg1: ThreadPoolExecutor? ) /**/ {
        rejectedExecution( arg0: _arg0, arg1: _arg1 )
    }

}
