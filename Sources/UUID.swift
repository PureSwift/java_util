
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.UUID ///

open class UUID: java_swift.JavaObject, /* java.io.Serializable */ UnclassedProtocol, java_lang.JavaComparable {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.UUID", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var UUIDJNIClass: jclass?

    /// private static final long java.util.UUID.serialVersionUID

    /// private final long java.util.UUID.mostSigBits

    /// private final long java.util.UUID.leastSigBits

    /// static final boolean java.util.UUID.$assertionsDisabled

    /// private java.util.UUID(byte[])

    /// public java.util.UUID(long,long)

    private static var new_MethodID_1: jmethodID?

    public convenience init( mostSigBits: Int64, leastSigBits: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: mostSigBits, locals: &__locals )
        __args[1] = JNIType.toJava( value: leastSigBits, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/UUID", classCache: &UUID.UUIDJNIClass, methodSig: "(JJ)V", methodCache: &UUID.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _mostSigBits: Int64, _ _leastSigBits: Int64 ) {
        self.init( mostSigBits: _mostSigBits, leastSigBits: _leastSigBits )
    }

    /// public boolean java.util.UUID.equals(java.lang.Object)

    private static var equals_MethodID_2: jmethodID?

    open func equals( obj: java_swift.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: obj != nil ? obj! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &UUID.equals_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
        return equals( obj: _obj )
    }

    /// public java.lang.String java.util.UUID.toString()

    /// public int java.util.UUID.hashCode()

    /// public int java.util.UUID.compareTo(java.lang.Object)

    private static var compareTo_MethodID_3: jmethodID?

    open func compareTo( arg0: java_swift.JavaObject? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0 != nil ? arg0! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Object;)I", methodCache: &UUID.compareTo_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: java_swift.JavaObject? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public int java.util.UUID.compareTo(java.util.UUID)

    private static var compareTo_MethodID_4: jmethodID?

    open func compareTo( val: UUID? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: val != nil ? val! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/util/UUID;)I", methodCache: &UUID.compareTo_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    open func compareTo( _ _val: UUID? ) -> Int {
        return compareTo( val: _val )
    }

    /// public long java.util.UUID.timestamp()

    private static var timestamp_MethodID_5: jmethodID?

    open func timestamp() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "timestamp", methodSig: "()J", methodCache: &UUID.timestamp_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int64(), from: __return )
    }


    /// private static java.lang.String java.util.UUID.digits(long,int)

    /// public long java.util.UUID.node()

    private static var node_MethodID_6: jmethodID?

    open func node() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "node", methodSig: "()J", methodCache: &UUID.node_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int64(), from: __return )
    }


    /// public int java.util.UUID.version()

    private static var version_MethodID_7: jmethodID?

    open func version() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "version", methodSig: "()I", methodCache: &UUID.version_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public int java.util.UUID.variant()

    private static var variant_MethodID_8: jmethodID?

    open func variant() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "variant", methodSig: "()I", methodCache: &UUID.variant_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public static java.util.UUID java.util.UUID.randomUUID()

    private static var randomUUID_MethodID_9: jmethodID?

    open class func randomUUID() -> UUID! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/UUID", classCache: &UUIDJNIClass, methodName: "randomUUID", methodSig: "()Ljava/util/UUID;", methodCache: &randomUUID_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? UUID( javaObject: __return ) : nil
    }


    /// public static java.util.UUID java.util.UUID.nameUUIDFromBytes(byte[])

    private static var nameUUIDFromBytes_MethodID_10: jmethodID?

    open class func nameUUIDFromBytes( name: [Int8]? ) -> UUID! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/UUID", classCache: &UUIDJNIClass, methodName: "nameUUIDFromBytes", methodSig: "([B)Ljava/util/UUID;", methodCache: &nameUUIDFromBytes_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? UUID( javaObject: __return ) : nil
    }

    open class func nameUUIDFromBytes( _ _name: [Int8]? ) -> UUID! {
        return nameUUIDFromBytes( name: _name )
    }

    /// public static java.util.UUID java.util.UUID.fromString(java.lang.String)

    private static var fromString_MethodID_11: jmethodID?

    open class func fromString( name: String? ) -> UUID! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/UUID", classCache: &UUIDJNIClass, methodName: "fromString", methodSig: "(Ljava/lang/String;)Ljava/util/UUID;", methodCache: &fromString_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? UUID( javaObject: __return ) : nil
    }

    open class func fromString( _ _name: String? ) -> UUID! {
        return fromString( name: _name )
    }

    /// public long java.util.UUID.getLeastSignificantBits()

    private static var getLeastSignificantBits_MethodID_12: jmethodID?

    open func getLeastSignificantBits() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getLeastSignificantBits", methodSig: "()J", methodCache: &UUID.getLeastSignificantBits_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int64(), from: __return )
    }


    /// public long java.util.UUID.getMostSignificantBits()

    private static var getMostSignificantBits_MethodID_13: jmethodID?

    open func getMostSignificantBits() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getMostSignificantBits", methodSig: "()J", methodCache: &UUID.getMostSignificantBits_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int64(), from: __return )
    }


    /// public int java.util.UUID.clockSequence()

    private static var clockSequence_MethodID_14: jmethodID?

    open func clockSequence() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "clockSequence", methodSig: "()I", methodCache: &UUID.clockSequence_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


}

