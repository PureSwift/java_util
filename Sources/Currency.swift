
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:59 GMT 2016 ///

/// class java.util.Currency ///

open class Currency: java_lang.JavaObject, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.Currency", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CurrencyJNIClass: jclass?

    /// private static final long java.util.Currency.serialVersionUID

    /// private final java.lang.String java.util.Currency.currencyCode

    /// private final transient int java.util.Currency.defaultFractionDigits

    /// private static java.util.HashMap java.util.Currency.instances

    /// static java.lang.String java.util.Currency.mainTable

    /// static long[] java.util.Currency.scCutOverTimes

    /// static java.lang.String[] java.util.Currency.scOldCurrencies

    /// static java.lang.String[] java.util.Currency.scNewCurrencies

    /// static int[] java.util.Currency.scOldCurrenciesDFD

    /// static int[] java.util.Currency.scNewCurrenciesDFD

    /// static java.lang.String java.util.Currency.otherCurrencies

    /// static int[] java.util.Currency.otherCurrenciesDFD

    /// private static final int java.util.Currency.A_TO_Z

    /// private static final int java.util.Currency.INVALID_COUNTRY_ENTRY

    /// private static final int java.util.Currency.COUNTRY_WITHOUT_CURRENCY_ENTRY

    /// private static final int java.util.Currency.SIMPLE_CASE_COUNTRY_MASK

    /// private static final int java.util.Currency.SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK

    /// private static final int java.util.Currency.SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_MASK

    /// private static final int java.util.Currency.SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT

    /// private static final int java.util.Currency.SPECIAL_CASE_COUNTRY_MASK

    /// private static final int java.util.Currency.SPECIAL_CASE_COUNTRY_INDEX_MASK

    /// private static final int java.util.Currency.SPECIAL_CASE_COUNTRY_INDEX_DELTA

    /// private static final int java.util.Currency.COUNTRY_TYPE_MASK

    /// private java.util.Currency(java.lang.String,int)

    /// public java.lang.String java.util.Currency.toString()

    /// public static java.util.Currency java.util.Currency.getInstance(java.util.Locale)

    private static var getInstance_MethodID_1: jmethodID?

    open class func getInstance( arg0: JavaLocale? ) -> Currency! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Currency", classCache: &CurrencyJNIClass, methodName: "getInstance", methodSig: "(Ljava/util/Locale;)Ljava/util/Currency;", methodCache: &getInstance_MethodID_1, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Currency( javaObject: __return ) : nil
    }

    open class func getInstance( _ _arg0: JavaLocale? ) -> Currency! {
        return getInstance( arg0: _arg0 )
    }

    /// private static java.util.Currency java.util.Currency.getInstance(java.lang.String,int)

    /// public static java.util.Currency java.util.Currency.getInstance(java.lang.String)

    private static var getInstance_MethodID_2: jmethodID?

    open class func getInstance( arg0: String? ) -> Currency! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Currency", classCache: &CurrencyJNIClass, methodName: "getInstance", methodSig: "(Ljava/lang/String;)Ljava/util/Currency;", methodCache: &getInstance_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Currency( javaObject: __return ) : nil
    }

    open class func getInstance( _ _arg0: String? ) -> Currency! {
        return getInstance( arg0: _arg0 )
    }

    /// private java.lang.Object java.util.Currency.readResolve()

    /// public java.lang.String java.util.Currency.getSymbol(java.util.Locale)

    private static var getSymbol_MethodID_3: jmethodID?

    open func getSymbol( arg0: JavaLocale? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSymbol", methodSig: "(Ljava/util/Locale;)Ljava/lang/String;", methodCache: &Currency.getSymbol_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func getSymbol( _ _arg0: JavaLocale? ) -> String! {
        return getSymbol( arg0: _arg0 )
    }

    /// public java.lang.String java.util.Currency.getSymbol()

    private static var getSymbol_MethodID_4: jmethodID?

    open func getSymbol() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSymbol", methodSig: "()Ljava/lang/String;", methodCache: &Currency.getSymbol_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public java.lang.String java.util.Currency.getCurrencyCode()

    private static var getCurrencyCode_MethodID_5: jmethodID?

    open func getCurrencyCode() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCurrencyCode", methodSig: "()Ljava/lang/String;", methodCache: &Currency.getCurrencyCode_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public int java.util.Currency.getDefaultFractionDigits()

    private static var getDefaultFractionDigits_MethodID_6: jmethodID?

    open func getDefaultFractionDigits() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getDefaultFractionDigits", methodSig: "()I", methodCache: &Currency.getDefaultFractionDigits_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// private static int java.util.Currency.getMainTableEntry(char,char)

}
