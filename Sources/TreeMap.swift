
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:00 GMT 2016 ///

/// class java.util.TreeMap ///

open class TreeMap: AbstractMap, java_lang.Cloneable, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.TreeMap", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var TreeMapJNIClass: jclass?

    /// private final java.util.Comparator java.util.TreeMap.comparator

    /// private transient java.util.TreeMap$Entry java.util.TreeMap.root

    /// private transient int java.util.TreeMap.size

    /// private transient int java.util.TreeMap.modCount

    /// private transient java.util.TreeMap$EntrySet java.util.TreeMap.entrySet

    /// private transient java.util.TreeMap$KeySet java.util.TreeMap.navigableKeySet

    /// private transient java.util.NavigableMap java.util.TreeMap.descendingMap

    /// private static final boolean java.util.TreeMap.RED

    /// private static final boolean java.util.TreeMap.BLACK

    /// private static final long java.util.TreeMap.serialVersionUID

    /// transient volatile java.util.Set java.util.AbstractMap.keySet

    /// transient volatile java.util.Collection java.util.AbstractMap.values

    /// public java.util.TreeMap(java.util.Comparator)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: JavaComparator? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/TreeMap", classCache: &TreeMap.TreeMapJNIClass, methodSig: "(Ljava/util/Comparator;)V", methodCache: &TreeMap.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: JavaComparator? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.TreeMap(java.util.Map)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Map? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/TreeMap", classCache: &TreeMap.TreeMapJNIClass, methodSig: "(Ljava/util/Map;)V", methodCache: &TreeMap.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Map? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.TreeMap(java.util.SortedMap)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: SortedMap? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/TreeMap", classCache: &TreeMap.TreeMapJNIClass, methodSig: "(Ljava/util/SortedMap;)V", methodCache: &TreeMap.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: SortedMap? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.TreeMap()

    private static var new_MethodID_4: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/TreeMap", classCache: &TreeMap.TreeMapJNIClass, methodSig: "()V", methodCache: &TreeMap.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.lang.Object java.util.TreeMap.get(java.lang.Object)

    /// public java.lang.Object java.util.TreeMap.put(java.lang.Object,java.lang.Object)

    /// public java.util.Collection java.util.TreeMap.values()

    /// public java.lang.Object java.util.TreeMap.clone()

    private static var clone_MethodID_5: jmethodID?

    override open func clone() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &TreeMap.clone_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public void java.util.TreeMap.clear()

    /// final int java.util.TreeMap.compare(java.lang.Object,java.lang.Object)

    /// static int java.util.TreeMap.access$100(java.util.TreeMap)

    /// public int java.util.TreeMap.size()

    /// public java.util.Set java.util.TreeMap.entrySet()

    /// public void java.util.TreeMap.putAll(java.util.Map)

    /// static void java.util.TreeMap.access$000(java.util.TreeMap,java.util.TreeMap$Entry)

    /// static java.util.Comparator java.util.TreeMap.access$200(java.util.TreeMap)

    /// public java.lang.Object java.util.TreeMap.remove(java.lang.Object)

    /// private void java.util.TreeMap.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// static java.lang.Object java.util.TreeMap.key(java.util.TreeMap$Entry)

    /// private static java.util.TreeMap$Entry java.util.TreeMap.parentOf(java.util.TreeMap$Entry)

    /// public java.util.Set java.util.TreeMap.keySet()

    /// public boolean java.util.TreeMap.containsValue(java.lang.Object)

    /// public boolean java.util.TreeMap.containsKey(java.lang.Object)

    /// private void java.util.TreeMap.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// private void java.util.TreeMap.rotateLeft(java.util.TreeMap$Entry)

    /// private void java.util.TreeMap.rotateRight(java.util.TreeMap$Entry)

    /// static final boolean java.util.TreeMap.valEquals(java.lang.Object,java.lang.Object)

    /// final java.util.TreeMap$Entry java.util.TreeMap.getEntry(java.lang.Object)

    /// static java.util.TreeMap$Entry java.util.TreeMap.predecessor(java.util.TreeMap$Entry)

    /// public java.util.Comparator java.util.TreeMap.comparator()

    private static var comparator_MethodID_6: jmethodID?

    open func comparator() -> JavaComparator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "comparator", methodSig: "()Ljava/util/Comparator;", methodCache: &TreeMap.comparator_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }


    /// public java.util.NavigableSet java.util.TreeMap.navigableKeySet()

    private static var navigableKeySet_MethodID_7: jmethodID?

    open func navigableKeySet() -> NavigableSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "navigableKeySet", methodSig: "()Ljava/util/NavigableSet;", methodCache: &TreeMap.navigableKeySet_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }


    /// public java.util.NavigableMap java.util.TreeMap.descendingMap()

    private static var descendingMap_MethodID_8: jmethodID?

    open func descendingMap() -> NavigableMap! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "descendingMap", methodSig: "()Ljava/util/NavigableMap;", methodCache: &TreeMap.descendingMap_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableMapForward( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.TreeMap.firstKey()

    private static var firstKey_MethodID_9: jmethodID?

    open func firstKey() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "firstKey", methodSig: "()Ljava/lang/Object;", methodCache: &TreeMap.firstKey_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.TreeMap.lastKey()

    private static var lastKey_MethodID_10: jmethodID?

    open func lastKey() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "lastKey", methodSig: "()Ljava/lang/Object;", methodCache: &TreeMap.lastKey_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// final java.util.TreeMap$Entry java.util.TreeMap.getEntryUsingComparator(java.lang.Object)

    /// final java.util.TreeMap$Entry java.util.TreeMap.getCeilingEntry(java.lang.Object)

    /// final java.util.TreeMap$Entry java.util.TreeMap.getFloorEntry(java.lang.Object)

    /// final java.util.TreeMap$Entry java.util.TreeMap.getHigherEntry(java.lang.Object)

    /// final java.util.TreeMap$Entry java.util.TreeMap.getLowerEntry(java.lang.Object)

    /// public java.util.Map$Entry java.util.TreeMap.firstEntry()

    private static var firstEntry_MethodID_11: jmethodID?

    open func firstEntry() -> /* java.util.Map$Entry */ UnclassedProtocol! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "firstEntry", methodSig: "()Ljava/util/Map$Entry;", methodCache: &TreeMap.firstEntry_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.util.Map$Entry */ UnclassedProtocolForward( javaObject: __return ) : nil
    }


    /// public java.util.Map$Entry java.util.TreeMap.lastEntry()

    private static var lastEntry_MethodID_12: jmethodID?

    open func lastEntry() -> /* java.util.Map$Entry */ UnclassedProtocol! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "lastEntry", methodSig: "()Ljava/util/Map$Entry;", methodCache: &TreeMap.lastEntry_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.util.Map$Entry */ UnclassedProtocolForward( javaObject: __return ) : nil
    }


    /// public java.util.Map$Entry java.util.TreeMap.pollFirstEntry()

    private static var pollFirstEntry_MethodID_13: jmethodID?

    open func pollFirstEntry() -> /* java.util.Map$Entry */ UnclassedProtocol! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "pollFirstEntry", methodSig: "()Ljava/util/Map$Entry;", methodCache: &TreeMap.pollFirstEntry_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.util.Map$Entry */ UnclassedProtocolForward( javaObject: __return ) : nil
    }


    /// public java.util.Map$Entry java.util.TreeMap.pollLastEntry()

    private static var pollLastEntry_MethodID_14: jmethodID?

    open func pollLastEntry() -> /* java.util.Map$Entry */ UnclassedProtocol! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "pollLastEntry", methodSig: "()Ljava/util/Map$Entry;", methodCache: &TreeMap.pollLastEntry_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.util.Map$Entry */ UnclassedProtocolForward( javaObject: __return ) : nil
    }


    /// public java.util.Map$Entry java.util.TreeMap.lowerEntry(java.lang.Object)

    private static var lowerEntry_MethodID_15: jmethodID?

    open func lowerEntry( arg0: java_lang.JavaObject? ) -> /* java.util.Map$Entry */ UnclassedProtocol! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "lowerEntry", methodSig: "(Ljava/lang/Object;)Ljava/util/Map$Entry;", methodCache: &TreeMap.lowerEntry_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.util.Map$Entry */ UnclassedProtocolForward( javaObject: __return ) : nil
    }

    open func lowerEntry( _ _arg0: java_lang.JavaObject? ) -> /* java.util.Map$Entry */ UnclassedProtocol! {
        return lowerEntry( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.TreeMap.lowerKey(java.lang.Object)

    private static var lowerKey_MethodID_16: jmethodID?

    open func lowerKey( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "lowerKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &TreeMap.lowerKey_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func lowerKey( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return lowerKey( arg0: _arg0 )
    }

    /// public java.util.Map$Entry java.util.TreeMap.floorEntry(java.lang.Object)

    private static var floorEntry_MethodID_17: jmethodID?

    open func floorEntry( arg0: java_lang.JavaObject? ) -> /* java.util.Map$Entry */ UnclassedProtocol! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "floorEntry", methodSig: "(Ljava/lang/Object;)Ljava/util/Map$Entry;", methodCache: &TreeMap.floorEntry_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.util.Map$Entry */ UnclassedProtocolForward( javaObject: __return ) : nil
    }

    open func floorEntry( _ _arg0: java_lang.JavaObject? ) -> /* java.util.Map$Entry */ UnclassedProtocol! {
        return floorEntry( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.TreeMap.floorKey(java.lang.Object)

    private static var floorKey_MethodID_18: jmethodID?

    open func floorKey( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "floorKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &TreeMap.floorKey_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func floorKey( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return floorKey( arg0: _arg0 )
    }

    /// public java.util.Map$Entry java.util.TreeMap.ceilingEntry(java.lang.Object)

    private static var ceilingEntry_MethodID_19: jmethodID?

    open func ceilingEntry( arg0: java_lang.JavaObject? ) -> /* java.util.Map$Entry */ UnclassedProtocol! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "ceilingEntry", methodSig: "(Ljava/lang/Object;)Ljava/util/Map$Entry;", methodCache: &TreeMap.ceilingEntry_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.util.Map$Entry */ UnclassedProtocolForward( javaObject: __return ) : nil
    }

    open func ceilingEntry( _ _arg0: java_lang.JavaObject? ) -> /* java.util.Map$Entry */ UnclassedProtocol! {
        return ceilingEntry( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.TreeMap.ceilingKey(java.lang.Object)

    private static var ceilingKey_MethodID_20: jmethodID?

    open func ceilingKey( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "ceilingKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &TreeMap.ceilingKey_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func ceilingKey( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return ceilingKey( arg0: _arg0 )
    }

    /// public java.util.Map$Entry java.util.TreeMap.higherEntry(java.lang.Object)

    private static var higherEntry_MethodID_21: jmethodID?

    open func higherEntry( arg0: java_lang.JavaObject? ) -> /* java.util.Map$Entry */ UnclassedProtocol! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "higherEntry", methodSig: "(Ljava/lang/Object;)Ljava/util/Map$Entry;", methodCache: &TreeMap.higherEntry_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.util.Map$Entry */ UnclassedProtocolForward( javaObject: __return ) : nil
    }

    open func higherEntry( _ _arg0: java_lang.JavaObject? ) -> /* java.util.Map$Entry */ UnclassedProtocol! {
        return higherEntry( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.TreeMap.higherKey(java.lang.Object)

    private static var higherKey_MethodID_22: jmethodID?

    open func higherKey( arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "higherKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &TreeMap.higherKey_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func higherKey( _ _arg0: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return higherKey( arg0: _arg0 )
    }

    /// public java.util.NavigableSet java.util.TreeMap.descendingKeySet()

    private static var descendingKeySet_MethodID_23: jmethodID?

    open func descendingKeySet() -> NavigableSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "descendingKeySet", methodSig: "()Ljava/util/NavigableSet;", methodCache: &TreeMap.descendingKeySet_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }


    /// public java.util.SortedMap java.util.TreeMap.subMap(java.lang.Object,java.lang.Object)

    private static var subMap_MethodID_24: jmethodID?

    open func subMap( arg0: java_lang.JavaObject?, arg1: java_lang.JavaObject? ) -> SortedMap! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subMap", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;", methodCache: &TreeMap.subMap_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SortedMapForward( javaObject: __return ) : nil
    }

    open func subMap( _ _arg0: java_lang.JavaObject?, _ _arg1: java_lang.JavaObject? ) -> SortedMap! {
        return subMap( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.NavigableMap java.util.TreeMap.subMap(java.lang.Object,boolean,java.lang.Object,boolean)

    private static var subMap_MethodID_25: jmethodID?

    open func subMap( arg0: java_lang.JavaObject?, arg1: Bool, arg2: java_lang.JavaObject?, arg3: Bool ) -> NavigableMap! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subMap", methodSig: "(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;", methodCache: &TreeMap.subMap_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableMapForward( javaObject: __return ) : nil
    }

    open func subMap( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool, _ _arg2: java_lang.JavaObject?, _ _arg3: Bool ) -> NavigableMap! {
        return subMap( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.util.SortedMap java.util.TreeMap.headMap(java.lang.Object)

    private static var headMap_MethodID_26: jmethodID?

    open func headMap( arg0: java_lang.JavaObject? ) -> SortedMap! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "headMap", methodSig: "(Ljava/lang/Object;)Ljava/util/SortedMap;", methodCache: &TreeMap.headMap_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SortedMapForward( javaObject: __return ) : nil
    }

    open func headMap( _ _arg0: java_lang.JavaObject? ) -> SortedMap! {
        return headMap( arg0: _arg0 )
    }

    /// public java.util.NavigableMap java.util.TreeMap.headMap(java.lang.Object,boolean)

    private static var headMap_MethodID_27: jmethodID?

    open func headMap( arg0: java_lang.JavaObject?, arg1: Bool ) -> NavigableMap! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "headMap", methodSig: "(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", methodCache: &TreeMap.headMap_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableMapForward( javaObject: __return ) : nil
    }

    open func headMap( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool ) -> NavigableMap! {
        return headMap( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.SortedMap java.util.TreeMap.tailMap(java.lang.Object)

    private static var tailMap_MethodID_28: jmethodID?

    open func tailMap( arg0: java_lang.JavaObject? ) -> SortedMap! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "tailMap", methodSig: "(Ljava/lang/Object;)Ljava/util/SortedMap;", methodCache: &TreeMap.tailMap_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SortedMapForward( javaObject: __return ) : nil
    }

    open func tailMap( _ _arg0: java_lang.JavaObject? ) -> SortedMap! {
        return tailMap( arg0: _arg0 )
    }

    /// public java.util.NavigableMap java.util.TreeMap.tailMap(java.lang.Object,boolean)

    private static var tailMap_MethodID_29: jmethodID?

    open func tailMap( arg0: java_lang.JavaObject?, arg1: Bool ) -> NavigableMap! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "tailMap", methodSig: "(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", methodCache: &TreeMap.tailMap_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableMapForward( javaObject: __return ) : nil
    }

    open func tailMap( _ _arg0: java_lang.JavaObject?, _ _arg1: Bool ) -> NavigableMap! {
        return tailMap( arg0: _arg0, arg1: _arg1 )
    }

    /// java.util.Iterator java.util.TreeMap.keyIterator()

    /// java.util.Iterator java.util.TreeMap.descendingKeyIterator()

    /// static java.util.Map$Entry java.util.TreeMap.exportEntry(java.util.TreeMap$Entry)

    /// static java.lang.Object java.util.TreeMap.keyOrNull(java.util.TreeMap$Entry)

    /// final java.util.TreeMap$Entry java.util.TreeMap.getFirstEntry()

    /// final java.util.TreeMap$Entry java.util.TreeMap.getLastEntry()

    /// static java.util.TreeMap$Entry java.util.TreeMap.successor(java.util.TreeMap$Entry)

    /// private static boolean java.util.TreeMap.colorOf(java.util.TreeMap$Entry)

    /// private static void java.util.TreeMap.setColor(java.util.TreeMap$Entry,boolean)

    /// private static java.util.TreeMap$Entry java.util.TreeMap.leftOf(java.util.TreeMap$Entry)

    /// private static java.util.TreeMap$Entry java.util.TreeMap.rightOf(java.util.TreeMap$Entry)

    /// private void java.util.TreeMap.fixAfterInsertion(java.util.TreeMap$Entry)

    /// private void java.util.TreeMap.deleteEntry(java.util.TreeMap$Entry)

    /// private void java.util.TreeMap.fixAfterDeletion(java.util.TreeMap$Entry)

    /// void java.util.TreeMap.readTreeSet(int,java.io.ObjectInputStream,java.lang.Object) throws java.io.IOException,java.lang.ClassNotFoundException

    /// void java.util.TreeMap.addAllForTreeSet(java.util.SortedSet,java.lang.Object)

    /// private void java.util.TreeMap.buildFromSorted(int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object) throws java.io.IOException,java.lang.ClassNotFoundException

    /// private final java.util.TreeMap$Entry java.util.TreeMap.buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object) throws java.io.IOException,java.lang.ClassNotFoundException

    /// private static int java.util.TreeMap.computeRedLevel(int)

    /// In declared protocol but not defined.. ///

    /// public abstract int java.util.Map.size()

    /// public abstract void java.util.Map.clear()

    /// public abstract java.lang.Object java.util.Map.remove(java.lang.Object)

    /// public abstract java.util.Collection java.util.Map.values()

    /// public abstract java.util.Set java.util.Map.entrySet()

    /// public abstract java.lang.Object java.util.Map.get(java.lang.Object)

    /// public abstract boolean java.util.Map.containsKey(java.lang.Object)

    /// public abstract boolean java.util.Map.containsValue(java.lang.Object)

    /// public abstract boolean java.util.Map.equals(java.lang.Object)

    /// public abstract java.lang.Object java.util.Map.put(java.lang.Object,java.lang.Object)

    /// public abstract boolean java.util.Map.isEmpty()

    /// public abstract java.util.Set java.util.Map.keySet()

    /// public abstract int java.util.Map.hashCode()

    /// public abstract void java.util.Map.putAll(java.util.Map)

}
