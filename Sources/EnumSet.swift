
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:43 GMT 2016 ///

/// class java.util.EnumSet ///

open class EnumSet: AbstractSet, java_lang.Cloneable, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.EnumSet", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var EnumSetJNIClass: jclass?

    /// final java.lang.Class java.util.EnumSet.elementType

    /// final java.lang.Enum[] java.util.EnumSet.universe

    /// private static java.lang.Enum[] java.util.EnumSet.ZERO_LENGTH_ENUM_ARRAY

    /// java.util.EnumSet(java.lang.Class,java.lang.Enum[])

//    /// public java.lang.Object java.util.EnumSet.clone() throws java.lang.CloneNotSupportedException
//
//    private static var clone_MethodID_1: jmethodID?
//
//    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_lang.JavaObject! {
//        var __args = [jvalue]( repeating: jvalue(), count: 1 )
//        var __locals = [jobject]()
//        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &EnumSet.clone_MethodID_1, args: &__args, locals: &__locals )
//        defer { JNI.DeleteLocalRef( __return ) }
//        if let throwable = JNI.ExceptionCheck() {
//            throw java_lang.CloneNotSupportedException( javaObject: throwable )
//        }
//        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
//    }


    /// public java.util.EnumSet java.util.EnumSet.clone()

    private static var clone_MethodID_2: jmethodID?

    override open func clone() -> EnumSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/util/EnumSet;", methodCache: &EnumSet.clone_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? EnumSet( javaObject: __return ) : nil
    }


    /// public static java.util.EnumSet java.util.EnumSet.copyOf(java.util.EnumSet)

    private static var copyOf_MethodID_3: jmethodID?

    open class func copyOf( arg0: EnumSet? ) -> EnumSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/EnumSet", classCache: &EnumSetJNIClass, methodName: "copyOf", methodSig: "(Ljava/util/EnumSet;)Ljava/util/EnumSet;", methodCache: &copyOf_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? EnumSet( javaObject: __return ) : nil
    }

    open class func copyOf( _ _arg0: EnumSet? ) -> EnumSet! {
        return copyOf( arg0: _arg0 )
    }

    /// public static java.util.EnumSet java.util.EnumSet.copyOf(java.util.Collection)

    private static var copyOf_MethodID_4: jmethodID?

    open class func copyOf( arg0: Collection? ) -> EnumSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/EnumSet", classCache: &EnumSetJNIClass, methodName: "copyOf", methodSig: "(Ljava/util/Collection;)Ljava/util/EnumSet;", methodCache: &copyOf_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? EnumSet( javaObject: __return ) : nil
    }

    open class func copyOf( _ _arg0: Collection? ) -> EnumSet! {
        return copyOf( arg0: _arg0 )
    }

    /// abstract void java.util.EnumSet.addAll()

    /// static java.lang.Enum[] java.util.EnumSet.access$000()

    /// java.lang.Object java.util.EnumSet.writeReplace()

    /// public static java.util.EnumSet java.util.EnumSet.range(java.lang.Enum,java.lang.Enum)

    private static var range_MethodID_5: jmethodID?

    open class func range( arg0: java_lang.Enum?, arg1: java_lang.Enum? ) -> EnumSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/EnumSet", classCache: &EnumSetJNIClass, methodName: "range", methodSig: "(Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;", methodCache: &range_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? EnumSet( javaObject: __return ) : nil
    }

    open class func range( _ _arg0: java_lang.Enum?, _ _arg1: java_lang.Enum? ) -> EnumSet! {
        return range( arg0: _arg0, arg1: _arg1 )
    }

    /// abstract void java.util.EnumSet.complement()

    /// final void java.util.EnumSet.typeCheck(java.lang.Enum)

    /// public static java.util.EnumSet java.util.EnumSet.noneOf(java.lang.Class)

    private static var noneOf_MethodID_6: jmethodID?

    open class func noneOf( arg0: java_lang.Class? ) -> EnumSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/EnumSet", classCache: &EnumSetJNIClass, methodName: "noneOf", methodSig: "(Ljava/lang/Class;)Ljava/util/EnumSet;", methodCache: &noneOf_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? EnumSet( javaObject: __return ) : nil
    }

    open class func noneOf( _ _arg0: java_lang.Class? ) -> EnumSet! {
        return noneOf( arg0: _arg0 )
    }

    /// public static java.util.EnumSet java.util.EnumSet.allOf(java.lang.Class)

    private static var allOf_MethodID_7: jmethodID?

    open class func allOf( arg0: java_lang.Class? ) -> EnumSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/EnumSet", classCache: &EnumSetJNIClass, methodName: "allOf", methodSig: "(Ljava/lang/Class;)Ljava/util/EnumSet;", methodCache: &allOf_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? EnumSet( javaObject: __return ) : nil
    }

    open class func allOf( _ _arg0: java_lang.Class? ) -> EnumSet! {
        return allOf( arg0: _arg0 )
    }

    /// public static java.util.EnumSet java.util.EnumSet.complementOf(java.util.EnumSet)

    private static var complementOf_MethodID_8: jmethodID?

    open class func complementOf( arg0: EnumSet? ) -> EnumSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/EnumSet", classCache: &EnumSetJNIClass, methodName: "complementOf", methodSig: "(Ljava/util/EnumSet;)Ljava/util/EnumSet;", methodCache: &complementOf_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? EnumSet( javaObject: __return ) : nil
    }

    open class func complementOf( _ _arg0: EnumSet? ) -> EnumSet! {
        return complementOf( arg0: _arg0 )
    }

    /// public static java.util.EnumSet java.util.EnumSet.of(java.lang.Enum,java.lang.Enum[])

    private static var of_MethodID_9: jmethodID?

    open class func of( arg0: java_lang.Enum?, arg1: [Enum]? ) -> EnumSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/EnumSet", classCache: &EnumSetJNIClass, methodName: "of", methodSig: "(Ljava/lang/Enum;[Ljava/lang/Enum;)Ljava/util/EnumSet;", methodCache: &of_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? EnumSet( javaObject: __return ) : nil
    }

    open class func of( _ _arg0: java_lang.Enum?, _ _arg1: [Enum]? ) -> EnumSet! {
        return of( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.util.EnumSet java.util.EnumSet.of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)

    private static var of_MethodID_10: jmethodID?

    open class func of( arg0: java_lang.Enum?, arg1: java_lang.Enum?, arg2: java_lang.Enum?, arg3: java_lang.Enum?, arg4: java_lang.Enum? ) -> EnumSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/EnumSet", classCache: &EnumSetJNIClass, methodName: "of", methodSig: "(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;", methodCache: &of_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? EnumSet( javaObject: __return ) : nil
    }

    open class func of( _ _arg0: java_lang.Enum?, _ _arg1: java_lang.Enum?, _ _arg2: java_lang.Enum?, _ _arg3: java_lang.Enum?, _ _arg4: java_lang.Enum? ) -> EnumSet! {
        return of( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public static java.util.EnumSet java.util.EnumSet.of(java.lang.Enum)

    private static var of_MethodID_11: jmethodID?

    open class func of( arg0: java_lang.Enum? ) -> EnumSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/EnumSet", classCache: &EnumSetJNIClass, methodName: "of", methodSig: "(Ljava/lang/Enum;)Ljava/util/EnumSet;", methodCache: &of_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? EnumSet( javaObject: __return ) : nil
    }

    open class func of( _ _arg0: java_lang.Enum? ) -> EnumSet! {
        return of( arg0: _arg0 )
    }

    /// public static java.util.EnumSet java.util.EnumSet.of(java.lang.Enum,java.lang.Enum,java.lang.Enum)

    private static var of_MethodID_12: jmethodID?

    open class func of( arg0: java_lang.Enum?, arg1: java_lang.Enum?, arg2: java_lang.Enum? ) -> EnumSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/EnumSet", classCache: &EnumSetJNIClass, methodName: "of", methodSig: "(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;", methodCache: &of_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? EnumSet( javaObject: __return ) : nil
    }

    open class func of( _ _arg0: java_lang.Enum?, _ _arg1: java_lang.Enum?, _ _arg2: java_lang.Enum? ) -> EnumSet! {
        return of( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public static java.util.EnumSet java.util.EnumSet.of(java.lang.Enum,java.lang.Enum)

    private static var of_MethodID_13: jmethodID?

    open class func of( arg0: java_lang.Enum?, arg1: java_lang.Enum? ) -> EnumSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/EnumSet", classCache: &EnumSetJNIClass, methodName: "of", methodSig: "(Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;", methodCache: &of_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? EnumSet( javaObject: __return ) : nil
    }

    open class func of( _ _arg0: java_lang.Enum?, _ _arg1: java_lang.Enum? ) -> EnumSet! {
        return of( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.util.EnumSet java.util.EnumSet.of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)

    private static var of_MethodID_14: jmethodID?

    open class func of( arg0: java_lang.Enum?, arg1: java_lang.Enum?, arg2: java_lang.Enum?, arg3: java_lang.Enum? ) -> EnumSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/EnumSet", classCache: &EnumSetJNIClass, methodName: "of", methodSig: "(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;", methodCache: &of_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? EnumSet( javaObject: __return ) : nil
    }

    open class func of( _ _arg0: java_lang.Enum?, _ _arg1: java_lang.Enum?, _ _arg2: java_lang.Enum?, _ _arg3: java_lang.Enum? ) -> EnumSet! {
        return of( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// abstract void java.util.EnumSet.addRange(java.lang.Enum,java.lang.Enum)

    /// private static java.lang.Enum[] java.util.EnumSet.getUniverse(java.lang.Class)

}
