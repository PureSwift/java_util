
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:12 GMT 2016 ///

/// class java.util.AbstractList ///

open class AbstractList: AbstractCollection, List {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.AbstractList", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AbstractListJNIClass: jclass?

    /// protected transient int java.util.AbstractList.modCount

    private static var modCount_FieldID: jfieldID?

    open var modCount: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "modCount", fieldType: "I", fieldCache: &AbstractList.modCount_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "modCount", fieldType: "I", fieldCache: &AbstractList.modCount_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.util.AbstractList()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/AbstractList", classCache: &AbstractList.AbstractListJNIClass, methodSig: "()V", methodCache: &AbstractList.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public boolean java.util.AbstractList.add(java.lang.Object)

    /// public void java.util.AbstractList.add(int,java.lang.Object)

    private static var add_MethodID_2: jmethodID?

    open func add( arg0: Int, arg1: java_lang.JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "add", methodSig: "(ILjava/lang/Object;)V", methodCache: &AbstractList.add_MethodID_2, args: &__args, locals: &__locals )
    }

    open func add( _ _arg0: Int, _ _arg1: java_lang.JavaObject? ) {
        add( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.lang.Object java.util.AbstractList.get(int)

    private static var get_MethodID_3: jmethodID?

    open func get( arg0: Int ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "(I)Ljava/lang/Object;", methodCache: &AbstractList.get_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func get( _ _arg0: Int ) -> java_lang.JavaObject! {
        return get( arg0: _arg0 )
    }

    /// public boolean java.util.AbstractList.equals(java.lang.Object)

    /// public int java.util.AbstractList.hashCode()

    /// public int java.util.AbstractList.indexOf(java.lang.Object)

    private static var indexOf_MethodID_4: jmethodID?

    open func indexOf( arg0: java_lang.JavaObject? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "indexOf", methodSig: "(Ljava/lang/Object;)I", methodCache: &AbstractList.indexOf_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func indexOf( _ _arg0: java_lang.JavaObject? ) -> Int {
        return indexOf( arg0: _arg0 )
    }

    /// public void java.util.AbstractList.clear()

    /// public int java.util.AbstractList.lastIndexOf(java.lang.Object)

    private static var lastIndexOf_MethodID_5: jmethodID?

    open func lastIndexOf( arg0: java_lang.JavaObject? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "lastIndexOf", methodSig: "(Ljava/lang/Object;)I", methodCache: &AbstractList.lastIndexOf_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func lastIndexOf( _ _arg0: java_lang.JavaObject? ) -> Int {
        return lastIndexOf( arg0: _arg0 )
    }

    /// public boolean java.util.AbstractList.addAll(int,java.util.Collection)

    private static var addAll_MethodID_6: jmethodID?

    open func addAll( arg0: Int, arg1: Collection? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "addAll", methodSig: "(ILjava/util/Collection;)Z", methodCache: &AbstractList.addAll_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func addAll( _ _arg0: Int, _ _arg1: Collection? ) -> Bool {
        return addAll( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.Iterator java.util.AbstractList.iterator()

    /// public java.lang.Object java.util.AbstractList.remove(int)

    private static var remove_MethodID_7: jmethodID?

    open func remove( arg0: Int ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "remove", methodSig: "(I)Ljava/lang/Object;", methodCache: &AbstractList.remove_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func remove( _ _arg0: Int ) -> java_lang.JavaObject! {
        return remove( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.AbstractList.set(int,java.lang.Object)

    private static var set_MethodID_8: jmethodID?

    open func set( arg0: Int, arg1: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "set", methodSig: "(ILjava/lang/Object;)Ljava/lang/Object;", methodCache: &AbstractList.set_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func set( _ _arg0: Int, _ _arg1: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return set( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.ListIterator java.util.AbstractList.listIterator(int)

    private static var listIterator_MethodID_9: jmethodID?

    open func listIterator( arg0: Int ) -> ListIterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "listIterator", methodSig: "(I)Ljava/util/ListIterator;", methodCache: &AbstractList.listIterator_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ListIteratorForward( javaObject: __return ) : nil
    }

    open func listIterator( _ _arg0: Int ) -> ListIterator! {
        return listIterator( arg0: _arg0 )
    }

    /// public java.util.ListIterator java.util.AbstractList.listIterator()

    private static var listIterator_MethodID_10: jmethodID?

    open func listIterator() -> ListIterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "listIterator", methodSig: "()Ljava/util/ListIterator;", methodCache: &AbstractList.listIterator_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ListIteratorForward( javaObject: __return ) : nil
    }


    /// public java.util.List java.util.AbstractList.subList(int,int)

    private static var subList_MethodID_11: jmethodID?

    open func subList( arg0: Int, arg1: Int ) -> List! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subList", methodSig: "(II)Ljava/util/List;", methodCache: &AbstractList.subList_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ListForward( javaObject: __return ) : nil
    }

    open func subList( _ _arg0: Int, _ _arg1: Int ) -> List! {
        return subList( arg0: _arg0, arg1: _arg1 )
    }

    /// protected void java.util.AbstractList.removeRange(int,int)

    private static var removeRange_MethodID_12: jmethodID?

    open func removeRange( arg0: Int, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeRange", methodSig: "(II)V", methodCache: &AbstractList.removeRange_MethodID_12, args: &__args, locals: &__locals )
    }

    open func removeRange( _ _arg0: Int, _ _arg1: Int ) {
        removeRange( arg0: _arg0, arg1: _arg1 )
    }

    /// In declared protocol but not defined.. ///

    /// public abstract int java.util.Collection.size()

    /// public abstract java.util.Iterator java.lang.Iterable.iterator()

    /// public abstract boolean java.util.Collection.retainAll(java.util.Collection)

    /// public abstract void java.util.Collection.clear()

    /// public abstract boolean java.util.Collection.remove(java.lang.Object)

    /// public abstract java.lang.Object[] java.util.Collection.toArray(java.lang.Object[])

    /// public abstract boolean java.util.Collection.add(java.lang.Object)

    /// public abstract boolean java.util.Collection.addAll(java.util.Collection)

    /// public abstract boolean java.util.Collection.removeAll(java.util.Collection)

    /// public abstract boolean java.util.Collection.contains(java.lang.Object)

    /// public abstract boolean java.util.Collection.containsAll(java.util.Collection)

    /// public abstract boolean java.util.Collection.equals(java.lang.Object)

    /// public abstract java.lang.Object[] java.util.Collection.toArray()

    /// public abstract boolean java.util.Collection.isEmpty()

    /// public abstract int java.util.Collection.hashCode()

}
