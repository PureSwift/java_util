
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:01 GMT 2016 ///

/// class java.util.WeakHashMap ///

open class WeakHashMap: AbstractMap {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.WeakHashMap", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var WeakHashMapJNIClass: jclass?

    /// private static final int java.util.WeakHashMap.DEFAULT_INITIAL_CAPACITY

    /// private static final int java.util.WeakHashMap.MAXIMUM_CAPACITY

    /// private static final float java.util.WeakHashMap.DEFAULT_LOAD_FACTOR

    /// private java.util.WeakHashMap$Entry[] java.util.WeakHashMap.table

    /// private int java.util.WeakHashMap.size

    /// private int java.util.WeakHashMap.threshold

    /// private final float java.util.WeakHashMap.loadFactor

    /// private final java.lang.ref.ReferenceQueue java.util.WeakHashMap.queue

    /// private volatile int java.util.WeakHashMap.modCount

    /// private static final java.lang.Object java.util.WeakHashMap.NULL_KEY

    /// private transient java.util.Set java.util.WeakHashMap.entrySet

    /// transient volatile java.util.Set java.util.AbstractMap.keySet

    /// transient volatile java.util.Collection java.util.AbstractMap.values

    /// public java.util.WeakHashMap(int,float)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int, arg1: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/WeakHashMap", classCache: &WeakHashMap.WeakHashMapJNIClass, methodSig: "(IF)V", methodCache: &WeakHashMap.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Float ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.WeakHashMap(int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/WeakHashMap", classCache: &WeakHashMap.WeakHashMapJNIClass, methodSig: "(I)V", methodCache: &WeakHashMap.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.WeakHashMap()

    private static var new_MethodID_3: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/WeakHashMap", classCache: &WeakHashMap.WeakHashMapJNIClass, methodSig: "()V", methodCache: &WeakHashMap.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.WeakHashMap(java.util.Map)

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: Map? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/util/WeakHashMap", classCache: &WeakHashMap.WeakHashMapJNIClass, methodSig: "(Ljava/util/Map;)V", methodCache: &WeakHashMap.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Map? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.WeakHashMap.get(java.lang.Object)

    /// public java.lang.Object java.util.WeakHashMap.put(java.lang.Object,java.lang.Object)

    /// public java.util.Collection java.util.WeakHashMap.values()

    /// public void java.util.WeakHashMap.clear()

    /// public boolean java.util.WeakHashMap.isEmpty()

    /// public int java.util.WeakHashMap.size()

    /// public java.util.Set java.util.WeakHashMap.entrySet()

    /// public void java.util.WeakHashMap.putAll(java.util.Map)

    /// public java.lang.Object java.util.WeakHashMap.remove(java.lang.Object)

    /// static java.lang.Object java.util.WeakHashMap.access$300(java.lang.Object)

    /// static int java.util.WeakHashMap.access$400(java.util.WeakHashMap)

    /// public java.util.Set java.util.WeakHashMap.keySet()

    /// public boolean java.util.WeakHashMap.containsValue(java.lang.Object)

    /// public boolean java.util.WeakHashMap.containsKey(java.lang.Object)

    /// static java.util.WeakHashMap$Entry[] java.util.WeakHashMap.access$500(java.util.WeakHashMap)

    /// static boolean java.util.WeakHashMap.eq(java.lang.Object,java.lang.Object)

    /// static int java.util.WeakHashMap.indexFor(int,int)

    /// java.util.WeakHashMap$Entry java.util.WeakHashMap.getEntry(java.lang.Object)

    /// void java.util.WeakHashMap.resize(int)

    /// private void java.util.WeakHashMap.transfer(java.util.WeakHashMap$Entry[],java.util.WeakHashMap$Entry[])

    /// java.util.WeakHashMap$Entry java.util.WeakHashMap.removeMapping(java.lang.Object)

    /// private boolean java.util.WeakHashMap.containsNullValue()

    /// private void java.util.WeakHashMap.expungeStaleEntries()

    /// private static java.lang.Object java.util.WeakHashMap.maskNull(java.lang.Object)

    /// private static java.lang.Object java.util.WeakHashMap.unmaskNull(java.lang.Object)

    /// private java.util.WeakHashMap$Entry[] java.util.WeakHashMap.getTable()

    /// In declared protocol but not defined.. ///

    /// public abstract boolean java.util.Map.containsKey(java.lang.Object)

    /// public abstract boolean java.util.Map.containsValue(java.lang.Object)

    /// public abstract int java.util.Map.size()

    /// public abstract boolean java.util.Map.equals(java.lang.Object)

    /// public abstract java.lang.Object java.util.Map.put(java.lang.Object,java.lang.Object)

    /// public abstract void java.util.Map.clear()

    /// public abstract java.lang.Object java.util.Map.remove(java.lang.Object)

    /// public abstract boolean java.util.Map.isEmpty()

    /// public abstract java.util.Set java.util.Map.keySet()

    /// public abstract java.util.Collection java.util.Map.values()

    /// public abstract int java.util.Map.hashCode()

    /// public abstract java.util.Set java.util.Map.entrySet()

    /// public abstract void java.util.Map.putAll(java.util.Map)

    /// public abstract java.lang.Object java.util.Map.get(java.lang.Object)

}
