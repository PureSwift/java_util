
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:07 GMT 2016 ///

/// class java.util.BitSet ///

open class BitSet: java_lang.JavaObject, java_lang.Cloneable, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.BitSet", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var BitSetJNIClass: jclass?

    /// private static final int java.util.BitSet.ADDRESS_BITS_PER_WORD

    /// private static final int java.util.BitSet.BITS_PER_WORD

    /// private static final int java.util.BitSet.BIT_INDEX_MASK

    /// private static final long java.util.BitSet.WORD_MASK

    /// private static final java.io.ObjectStreamField[] java.util.BitSet.serialPersistentFields

    /// private long[] java.util.BitSet.words

    /// private transient int java.util.BitSet.wordsInUse

    /// private transient boolean java.util.BitSet.sizeIsSticky

    /// private static final long java.util.BitSet.serialVersionUID

    /// static final boolean java.util.BitSet.$assertionsDisabled

    /// public java.util.BitSet()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/BitSet", classCache: &BitSet.BitSetJNIClass, methodSig: "()V", methodCache: &BitSet.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.BitSet(int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/BitSet", classCache: &BitSet.BitSetJNIClass, methodSig: "(I)V", methodCache: &BitSet.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.BitSet java.util.BitSet.get(int,int)

    private static var get_MethodID_3: jmethodID?

    open func get( arg0: Int, arg1: Int ) -> BitSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "(II)Ljava/util/BitSet;", methodCache: &BitSet.get_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BitSet( javaObject: __return ) : nil
    }

    open func get( _ _arg0: Int, _ _arg1: Int ) -> BitSet! {
        return get( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.util.BitSet.get(int)

    private static var get_MethodID_4: jmethodID?

    open func get( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "get", methodSig: "(I)Z", methodCache: &BitSet.get_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func get( _ _arg0: Int ) -> Bool {
        return get( arg0: _arg0 )
    }

    /// public boolean java.util.BitSet.equals(java.lang.Object)

    /// public java.lang.String java.util.BitSet.toString()

    /// public int java.util.BitSet.hashCode()

    /// public java.lang.Object java.util.BitSet.clone()

    private static var clone_MethodID_5: jmethodID?

    override open func clone() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &BitSet.clone_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public void java.util.BitSet.clear(int,int)

    private static var clear_MethodID_6: jmethodID?

    open func clear( arg0: Int, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "(II)V", methodCache: &BitSet.clear_MethodID_6, args: &__args, locals: &__locals )
    }

    open func clear( _ _arg0: Int, _ _arg1: Int ) {
        clear( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.util.BitSet.clear(int)

    private static var clear_MethodID_7: jmethodID?

    open func clear( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "(I)V", methodCache: &BitSet.clear_MethodID_7, args: &__args, locals: &__locals )
    }

    open func clear( _ _arg0: Int ) {
        clear( arg0: _arg0 )
    }

    /// public void java.util.BitSet.clear()

    private static var clear_MethodID_8: jmethodID?

    open func clear() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "()V", methodCache: &BitSet.clear_MethodID_8, args: &__args, locals: &__locals )
    }


    /// public int java.util.BitSet.length()

    private static var length_MethodID_9: jmethodID?

    open func length() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "length", methodSig: "()I", methodCache: &BitSet.length_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public boolean java.util.BitSet.isEmpty()

    private static var isEmpty_MethodID_10: jmethodID?

    open func isEmpty() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isEmpty", methodSig: "()Z", methodCache: &BitSet.isEmpty_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public int java.util.BitSet.size()

    private static var size_MethodID_11: jmethodID?

    open func size() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "size", methodSig: "()I", methodCache: &BitSet.size_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// private void java.util.BitSet.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// private void java.util.BitSet.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// public void java.util.BitSet.set(int,boolean)

    private static var set_MethodID_12: jmethodID?

    open func set( arg0: Int, arg1: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "set", methodSig: "(IZ)V", methodCache: &BitSet.set_MethodID_12, args: &__args, locals: &__locals )
    }

    open func set( _ _arg0: Int, _ _arg1: Bool ) {
        set( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.util.BitSet.set(int,int)

    private static var set_MethodID_13: jmethodID?

    open func set( arg0: Int, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "set", methodSig: "(II)V", methodCache: &BitSet.set_MethodID_13, args: &__args, locals: &__locals )
    }

    open func set( _ _arg0: Int, _ _arg1: Int ) {
        set( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.util.BitSet.set(int,int,boolean)

    private static var set_MethodID_14: jmethodID?

    open func set( arg0: Int, arg1: Int, arg2: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "set", methodSig: "(IIZ)V", methodCache: &BitSet.set_MethodID_14, args: &__args, locals: &__locals )
    }

    open func set( _ _arg0: Int, _ _arg1: Int, _ _arg2: Bool ) {
        set( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.util.BitSet.set(int)

    private static var set_MethodID_15: jmethodID?

    open func set( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "set", methodSig: "(I)V", methodCache: &BitSet.set_MethodID_15, args: &__args, locals: &__locals )
    }

    open func set( _ _arg0: Int ) {
        set( arg0: _arg0 )
    }

    /// private void java.util.BitSet.ensureCapacity(int)

    /// private void java.util.BitSet.trimToSize()

    /// public void java.util.BitSet.flip(int)

    private static var flip_MethodID_16: jmethodID?

    open func flip( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "flip", methodSig: "(I)V", methodCache: &BitSet.flip_MethodID_16, args: &__args, locals: &__locals )
    }

    open func flip( _ _arg0: Int ) {
        flip( arg0: _arg0 )
    }

    /// public void java.util.BitSet.flip(int,int)

    private static var flip_MethodID_17: jmethodID?

    open func flip( arg0: Int, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "flip", methodSig: "(II)V", methodCache: &BitSet.flip_MethodID_17, args: &__args, locals: &__locals )
    }

    open func flip( _ _arg0: Int, _ _arg1: Int ) {
        flip( arg0: _arg0, arg1: _arg1 )
    }

    /// private static int java.util.BitSet.wordIndex(int)

    /// private void java.util.BitSet.checkInvariants()

    /// private void java.util.BitSet.recalculateWordsInUse()

    /// private void java.util.BitSet.initWords(int)

    /// private void java.util.BitSet.expandTo(int)

    /// private static void java.util.BitSet.checkRange(int,int)

    /// public int java.util.BitSet.nextSetBit(int)

    private static var nextSetBit_MethodID_18: jmethodID?

    open func nextSetBit( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "nextSetBit", methodSig: "(I)I", methodCache: &BitSet.nextSetBit_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func nextSetBit( _ _arg0: Int ) -> Int {
        return nextSetBit( arg0: _arg0 )
    }

    /// public int java.util.BitSet.nextClearBit(int)

    private static var nextClearBit_MethodID_19: jmethodID?

    open func nextClearBit( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "nextClearBit", methodSig: "(I)I", methodCache: &BitSet.nextClearBit_MethodID_19, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func nextClearBit( _ _arg0: Int ) -> Int {
        return nextClearBit( arg0: _arg0 )
    }

    /// public boolean java.util.BitSet.intersects(java.util.BitSet)

    private static var intersects_MethodID_20: jmethodID?

    open func intersects( arg0: BitSet? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "intersects", methodSig: "(Ljava/util/BitSet;)Z", methodCache: &BitSet.intersects_MethodID_20, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func intersects( _ _arg0: BitSet? ) -> Bool {
        return intersects( arg0: _arg0 )
    }

    /// public int java.util.BitSet.cardinality()

    private static var cardinality_MethodID_21: jmethodID?

    open func cardinality() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "cardinality", methodSig: "()I", methodCache: &BitSet.cardinality_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public void java.util.BitSet.and(java.util.BitSet)

    private static var and_MethodID_22: jmethodID?

    open func and( arg0: BitSet? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "and", methodSig: "(Ljava/util/BitSet;)V", methodCache: &BitSet.and_MethodID_22, args: &__args, locals: &__locals )
    }

    open func and( _ _arg0: BitSet? ) {
        and( arg0: _arg0 )
    }

    /// public void java.util.BitSet.or(java.util.BitSet)

    private static var or_MethodID_23: jmethodID?

    open func or( arg0: BitSet? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "or", methodSig: "(Ljava/util/BitSet;)V", methodCache: &BitSet.or_MethodID_23, args: &__args, locals: &__locals )
    }

    open func or( _ _arg0: BitSet? ) {
        or( arg0: _arg0 )
    }

    /// public void java.util.BitSet.xor(java.util.BitSet)

    private static var xor_MethodID_24: jmethodID?

    open func xor( arg0: BitSet? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "xor", methodSig: "(Ljava/util/BitSet;)V", methodCache: &BitSet.xor_MethodID_24, args: &__args, locals: &__locals )
    }

    open func xor( _ _arg0: BitSet? ) {
        xor( arg0: _arg0 )
    }

    /// public void java.util.BitSet.andNot(java.util.BitSet)

    private static var andNot_MethodID_25: jmethodID?

    open func andNot( arg0: BitSet? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "andNot", methodSig: "(Ljava/util/BitSet;)V", methodCache: &BitSet.andNot_MethodID_25, args: &__args, locals: &__locals )
    }

    open func andNot( _ _arg0: BitSet? ) {
        andNot( arg0: _arg0 )
    }

}
