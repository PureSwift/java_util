
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:58 GMT 2016 ///

/// class java.util.GregorianCalendar ///

open class GregorianCalendar: Calendar {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.GregorianCalendar", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var GregorianCalendarJNIClass: jclass?

    /// public static final int java.util.GregorianCalendar.BC

    private static var BC_FieldID: jfieldID?

    open static var BC: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "BC", fieldType: "I", fieldCache: &BC_FieldID, className: "java/util/GregorianCalendar", classCache: &GregorianCalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// static final int java.util.GregorianCalendar.BCE

    /// public static final int java.util.GregorianCalendar.AD

    private static var AD_FieldID: jfieldID?

    open static var AD: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "AD", fieldType: "I", fieldCache: &AD_FieldID, className: "java/util/GregorianCalendar", classCache: &GregorianCalendarJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// static final int java.util.GregorianCalendar.CE

    /// private static final int java.util.GregorianCalendar.EPOCH_OFFSET

    /// private static final int java.util.GregorianCalendar.EPOCH_YEAR

    /// static final int[] java.util.GregorianCalendar.MONTH_LENGTH

    /// static final int[] java.util.GregorianCalendar.LEAP_MONTH_LENGTH

    /// private static final int java.util.GregorianCalendar.ONE_SECOND

    /// private static final int java.util.GregorianCalendar.ONE_MINUTE

    /// private static final int java.util.GregorianCalendar.ONE_HOUR

    /// private static final long java.util.GregorianCalendar.ONE_DAY

    /// private static final long java.util.GregorianCalendar.ONE_WEEK

    /// static final int[] java.util.GregorianCalendar.MIN_VALUES

    /// static final int[] java.util.GregorianCalendar.LEAST_MAX_VALUES

    /// static final int[] java.util.GregorianCalendar.MAX_VALUES

    /// static final long java.util.GregorianCalendar.serialVersionUID

    /// private static final sun.util.calendar.Gregorian java.util.GregorianCalendar.gcal

    /// private static sun.util.calendar.JulianCalendar java.util.GregorianCalendar.jcal

    /// private static sun.util.calendar.Era[] java.util.GregorianCalendar.jeras

    /// static final long java.util.GregorianCalendar.DEFAULT_GREGORIAN_CUTOVER

    /// private long java.util.GregorianCalendar.gregorianCutover

    /// private transient long java.util.GregorianCalendar.gregorianCutoverDate

    /// private transient int java.util.GregorianCalendar.gregorianCutoverYear

    /// private transient int java.util.GregorianCalendar.gregorianCutoverYearJulian

    /// private transient sun.util.calendar.BaseCalendar$Date java.util.GregorianCalendar.gdate

    /// private transient sun.util.calendar.BaseCalendar$Date java.util.GregorianCalendar.cdate

    /// private transient sun.util.calendar.BaseCalendar java.util.GregorianCalendar.calsys

    /// private transient int[] java.util.GregorianCalendar.zoneOffsets

    /// private transient int[] java.util.GregorianCalendar.originalFields

    /// private transient long java.util.GregorianCalendar.cachedFixedDate

    /// static final boolean java.util.GregorianCalendar.$assertionsDisabled

    /// public static final int java.util.Calendar.ERA

    /// public static final int java.util.Calendar.YEAR

    /// public static final int java.util.Calendar.MONTH

    /// public static final int java.util.Calendar.WEEK_OF_YEAR

    /// public static final int java.util.Calendar.WEEK_OF_MONTH

    /// public static final int java.util.Calendar.DATE

    /// public static final int java.util.Calendar.DAY_OF_MONTH

    /// public static final int java.util.Calendar.DAY_OF_YEAR

    /// public static final int java.util.Calendar.DAY_OF_WEEK

    /// public static final int java.util.Calendar.DAY_OF_WEEK_IN_MONTH

    /// public static final int java.util.Calendar.AM_PM

    /// public static final int java.util.Calendar.HOUR

    /// public static final int java.util.Calendar.HOUR_OF_DAY

    /// public static final int java.util.Calendar.MINUTE

    /// public static final int java.util.Calendar.SECOND

    /// public static final int java.util.Calendar.MILLISECOND

    /// public static final int java.util.Calendar.ZONE_OFFSET

    /// public static final int java.util.Calendar.DST_OFFSET

    /// public static final int java.util.Calendar.FIELD_COUNT

    /// public static final int java.util.Calendar.SUNDAY

    /// public static final int java.util.Calendar.MONDAY

    /// public static final int java.util.Calendar.TUESDAY

    /// public static final int java.util.Calendar.WEDNESDAY

    /// public static final int java.util.Calendar.THURSDAY

    /// public static final int java.util.Calendar.FRIDAY

    /// public static final int java.util.Calendar.SATURDAY

    /// public static final int java.util.Calendar.JANUARY

    /// public static final int java.util.Calendar.FEBRUARY

    /// public static final int java.util.Calendar.MARCH

    /// public static final int java.util.Calendar.APRIL

    /// public static final int java.util.Calendar.MAY

    /// public static final int java.util.Calendar.JUNE

    /// public static final int java.util.Calendar.JULY

    /// public static final int java.util.Calendar.AUGUST

    /// public static final int java.util.Calendar.SEPTEMBER

    /// public static final int java.util.Calendar.OCTOBER

    /// public static final int java.util.Calendar.NOVEMBER

    /// public static final int java.util.Calendar.DECEMBER

    /// public static final int java.util.Calendar.UNDECIMBER

    /// public static final int java.util.Calendar.AM

    /// public static final int java.util.Calendar.PM

    /// public static final int java.util.Calendar.ALL_STYLES

    /// public static final int java.util.Calendar.SHORT

    /// public static final int java.util.Calendar.LONG

    /// protected int[] java.util.Calendar.fields

    private static var fields_FieldID: jfieldID?

    override open var fields: [Int32]! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "fields", fieldType: "[I", fieldCache: &GregorianCalendar.fields_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: [Int32](), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "fields", fieldType: "[I", fieldCache: &GregorianCalendar.fields_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected boolean[] java.util.Calendar.isSet

    private static var isSet_FieldID: jfieldID?

    override open var isSet: [Bool]! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "isSet", fieldType: "[Z", fieldCache: &GregorianCalendar.isSet_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: [Bool](), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "isSet", fieldType: "[Z", fieldCache: &GregorianCalendar.isSet_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private transient int[] java.util.Calendar.stamp

    /// protected long java.util.Calendar.time

    private static var time_FieldID: jfieldID?

    override open var time: Int64 {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetLongField( fieldName: "time", fieldType: "J", fieldCache: &GregorianCalendar.time_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int64(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetLongField( fieldName: "time", fieldType: "J", fieldCache: &GregorianCalendar.time_FieldID, object: javaObject, value: __value.j, locals: &__locals )
        }
    }

    /// protected boolean java.util.Calendar.isTimeSet

    private static var isTimeSet_FieldID: jfieldID?

    override open var isTimeSet: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "isTimeSet", fieldType: "Z", fieldCache: &GregorianCalendar.isTimeSet_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "isTimeSet", fieldType: "Z", fieldCache: &GregorianCalendar.isTimeSet_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected boolean java.util.Calendar.areFieldsSet

    private static var areFieldsSet_FieldID: jfieldID?

    override open var areFieldsSet: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "areFieldsSet", fieldType: "Z", fieldCache: &GregorianCalendar.areFieldsSet_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "areFieldsSet", fieldType: "Z", fieldCache: &GregorianCalendar.areFieldsSet_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// transient boolean java.util.Calendar.areAllFieldsSet

    /// private boolean java.util.Calendar.lenient

    /// private java.util.TimeZone java.util.Calendar.zone

    /// private transient boolean java.util.Calendar.sharedZone

    /// private int java.util.Calendar.firstDayOfWeek

    /// private int java.util.Calendar.minimalDaysInFirstWeek

    /// private static final java.util.concurrent.ConcurrentMap java.util.Calendar.cachedLocaleData

    /// private static final int java.util.Calendar.UNSET

    /// private static final int java.util.Calendar.COMPUTED

    /// private static final int java.util.Calendar.MINIMUM_USER_STAMP

    /// static final int java.util.Calendar.ALL_FIELDS

    /// private int java.util.Calendar.nextStamp

    /// static final int java.util.Calendar.currentSerialVersion

    /// private int java.util.Calendar.serialVersionOnStream

    /// static final long java.util.Calendar.serialVersionUID

    /// static final int java.util.Calendar.ERA_MASK

    /// static final int java.util.Calendar.YEAR_MASK

    /// static final int java.util.Calendar.MONTH_MASK

    /// static final int java.util.Calendar.WEEK_OF_YEAR_MASK

    /// static final int java.util.Calendar.WEEK_OF_MONTH_MASK

    /// static final int java.util.Calendar.DAY_OF_MONTH_MASK

    /// static final int java.util.Calendar.DATE_MASK

    /// static final int java.util.Calendar.DAY_OF_YEAR_MASK

    /// static final int java.util.Calendar.DAY_OF_WEEK_MASK

    /// static final int java.util.Calendar.DAY_OF_WEEK_IN_MONTH_MASK

    /// static final int java.util.Calendar.AM_PM_MASK

    /// static final int java.util.Calendar.HOUR_MASK

    /// static final int java.util.Calendar.HOUR_OF_DAY_MASK

    /// static final int java.util.Calendar.MINUTE_MASK

    /// static final int java.util.Calendar.SECOND_MASK

    /// static final int java.util.Calendar.MILLISECOND_MASK

    /// static final int java.util.Calendar.ZONE_OFFSET_MASK

    /// static final int java.util.Calendar.DST_OFFSET_MASK

    /// private static final java.lang.String[] java.util.Calendar.FIELD_NAME

    /// static final boolean java.util.Calendar.$assertionsDisabled

    /// public java.util.GregorianCalendar(java.util.TimeZone)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: TimeZone? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/GregorianCalendar", classCache: &GregorianCalendar.GregorianCalendarJNIClass, methodSig: "(Ljava/util/TimeZone;)V", methodCache: &GregorianCalendar.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: TimeZone? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.GregorianCalendar(java.util.Locale)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: JavaLocale? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/GregorianCalendar", classCache: &GregorianCalendar.GregorianCalendarJNIClass, methodSig: "(Ljava/util/Locale;)V", methodCache: &GregorianCalendar.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: JavaLocale? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.GregorianCalendar(java.util.TimeZone,java.util.Locale)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: TimeZone?, arg1: JavaLocale? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/GregorianCalendar", classCache: &GregorianCalendar.GregorianCalendarJNIClass, methodSig: "(Ljava/util/TimeZone;Ljava/util/Locale;)V", methodCache: &GregorianCalendar.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: TimeZone?, _ _arg1: JavaLocale? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.GregorianCalendar(int,int,int)

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: Int, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/GregorianCalendar", classCache: &GregorianCalendar.GregorianCalendarJNIClass, methodSig: "(III)V", methodCache: &GregorianCalendar.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.util.GregorianCalendar(int,int,int,int,int)

    private static var new_MethodID_5: jmethodID?

    public convenience init( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/GregorianCalendar", classCache: &GregorianCalendar.GregorianCalendarJNIClass, methodSig: "(IIIII)V", methodCache: &GregorianCalendar.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// java.util.GregorianCalendar(int,int,int,int,int,int,int)

    /// public java.util.GregorianCalendar()

    private static var new_MethodID_6: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/GregorianCalendar", classCache: &GregorianCalendar.GregorianCalendarJNIClass, methodSig: "()V", methodCache: &GregorianCalendar.new_MethodID_6, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.GregorianCalendar(int,int,int,int,int,int)

    private static var new_MethodID_7: jmethodID?

    public convenience init( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/GregorianCalendar", classCache: &GregorianCalendar.GregorianCalendarJNIClass, methodSig: "(IIIIII)V", methodCache: &GregorianCalendar.new_MethodID_7, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public void java.util.GregorianCalendar.add(int,int)

    /// public boolean java.util.GregorianCalendar.equals(java.lang.Object)

    /// public int java.util.GregorianCalendar.hashCode()

    /// public java.lang.Object java.util.GregorianCalendar.clone()

    /// private void java.util.GregorianCalendar.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// public java.util.TimeZone java.util.GregorianCalendar.getTimeZone()

    /// public void java.util.GregorianCalendar.setTimeZone(java.util.TimeZone)

    /// private final sun.util.calendar.BaseCalendar$Date java.util.GregorianCalendar.getCalendarDate(long)

    /// private long java.util.GregorianCalendar.getFixedDate(sun.util.calendar.BaseCalendar,int,int)

    /// public boolean java.util.GregorianCalendar.isLeapYear(int)

    private static var isLeapYear_MethodID_8: jmethodID?

    open func isLeapYear( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isLeapYear", methodSig: "(I)Z", methodCache: &GregorianCalendar.isLeapYear_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func isLeapYear( _ _arg0: Int ) -> Bool {
        return isLeapYear( arg0: _arg0 )
    }

    /// public void java.util.GregorianCalendar.roll(int,int)

    /// public void java.util.GregorianCalendar.roll(int,boolean)

    /// public int java.util.GregorianCalendar.getMinimum(int)

    /// public int java.util.GregorianCalendar.getMaximum(int)

    /// public int java.util.GregorianCalendar.getGreatestMinimum(int)

    /// public int java.util.GregorianCalendar.getLeastMaximum(int)

    /// public int java.util.GregorianCalendar.getActualMinimum(int)

    /// public int java.util.GregorianCalendar.getActualMaximum(int)

    /// private final long java.util.GregorianCalendar.getYearOffsetInMillis()

    /// protected void java.util.GregorianCalendar.computeFields()

    private static var computeFields_MethodID_9: jmethodID?

    override open func computeFields() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "computeFields", methodSig: "()V", methodCache: &GregorianCalendar.computeFields_MethodID_9, args: &__args, locals: &__locals )
    }


    /// private int java.util.GregorianCalendar.computeFields(int,int)

    /// private final int java.util.GregorianCalendar.getWeekNumber(long,long)

    /// protected void java.util.GregorianCalendar.computeTime()

    private static var computeTime_MethodID_10: jmethodID?

    override open func computeTime() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "computeTime", methodSig: "()V", methodCache: &GregorianCalendar.computeTime_MethodID_10, args: &__args, locals: &__locals )
    }


    /// private final long java.util.GregorianCalendar.getFixedDateJan1(sun.util.calendar.BaseCalendar$Date,long)

    /// private final long java.util.GregorianCalendar.getFixedDateMonth1(sun.util.calendar.BaseCalendar$Date,long)

    /// private final int java.util.GregorianCalendar.monthLength(int)

    /// private final int java.util.GregorianCalendar.monthLength(int,int)

    /// private final int java.util.GregorianCalendar.actualMonthLength()

    /// private final java.util.GregorianCalendar java.util.GregorianCalendar.getNormalizedCalendar()

    /// private final void java.util.GregorianCalendar.pinDayOfMonth()

    /// private static final int java.util.GregorianCalendar.getRolledValue(int,int,int,int)

    /// private final int java.util.GregorianCalendar.internalGetEra()

    /// public void java.util.GregorianCalendar.setGregorianChange(java.util.Date)

    private static var setGregorianChange_MethodID_11: jmethodID?

    open func setGregorianChange( arg0: Date? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setGregorianChange", methodSig: "(Ljava/util/Date;)V", methodCache: &GregorianCalendar.setGregorianChange_MethodID_11, args: &__args, locals: &__locals )
    }

    open func setGregorianChange( _ _arg0: Date? ) {
        setGregorianChange( arg0: _arg0 )
    }

    /// private void java.util.GregorianCalendar.setGregorianChange(long)

    /// public final java.util.Date java.util.GregorianCalendar.getGregorianChange()

    private static var getGregorianChange_MethodID_12: jmethodID?

    open func getGregorianChange() -> Date! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGregorianChange", methodSig: "()Ljava/util/Date;", methodCache: &GregorianCalendar.getGregorianChange_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Date( javaObject: __return ) : nil
    }


    /// private static final synchronized sun.util.calendar.BaseCalendar java.util.GregorianCalendar.getJulianCalendarSystem()

    /// private sun.util.calendar.BaseCalendar java.util.GregorianCalendar.getCutoverCalendarSystem()

    /// private final boolean java.util.GregorianCalendar.isCutoverYear(int)

    /// private final sun.util.calendar.BaseCalendar$Date java.util.GregorianCalendar.getGregorianCutoverDate()

    /// private final sun.util.calendar.BaseCalendar$Date java.util.GregorianCalendar.getLastJulianDate()

    /// private final int java.util.GregorianCalendar.yearLength()

    /// private final int java.util.GregorianCalendar.yearLength(int)

    /// private final long java.util.GregorianCalendar.getCurrentFixedDate()

}
