
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:56 GMT 2016 ///

/// class java.util.zip.ZipOutputStream ///

open class ZipOutputStream: DeflaterOutputStream {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.zip.ZipOutputStream", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ZipOutputStreamJNIClass: jclass?

    /// private java.util.zip.ZipOutputStream$XEntry java.util.zip.ZipOutputStream.current

    /// private java.util.Vector java.util.zip.ZipOutputStream.xentries

    /// private java.util.HashSet java.util.zip.ZipOutputStream.names

    /// private java.util.zip.CRC32 java.util.zip.ZipOutputStream.crc

    /// private long java.util.zip.ZipOutputStream.written

    /// private long java.util.zip.ZipOutputStream.locoff

    /// private java.lang.String java.util.zip.ZipOutputStream.comment

    /// private int java.util.zip.ZipOutputStream.method

    /// private boolean java.util.zip.ZipOutputStream.finished

    /// private boolean java.util.zip.ZipOutputStream.closed

    /// public static final int java.util.zip.ZipOutputStream.STORED

    private static var STORED_FieldID: jfieldID?

    open static var STORED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "STORED", fieldType: "I", fieldCache: &STORED_FieldID, className: "java/util/zip/ZipOutputStream", classCache: &ZipOutputStreamJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.zip.ZipOutputStream.DEFLATED

    private static var DEFLATED_FieldID: jfieldID?

    open static var DEFLATED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DEFLATED", fieldType: "I", fieldCache: &DEFLATED_FieldID, className: "java/util/zip/ZipOutputStream", classCache: &ZipOutputStreamJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// protected java.util.zip.Deflater java.util.zip.DeflaterOutputStream.def

    private static var def_FieldID: jfieldID?

    override open var def: Deflater! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "def", fieldType: "Ljava/util/zip/Deflater;", fieldCache: &ZipOutputStream.def_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? Deflater( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "def", fieldType: "Ljava/util/zip/Deflater;", fieldCache: &ZipOutputStream.def_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected byte[] java.util.zip.DeflaterOutputStream.buf

    private static var buf_FieldID: jfieldID?

    override open var buf: [Int8]! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "buf", fieldType: "[B", fieldCache: &ZipOutputStream.buf_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: [Int8](), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "buf", fieldType: "[B", fieldCache: &ZipOutputStream.buf_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean java.util.zip.DeflaterOutputStream.closed

    /// boolean java.util.zip.DeflaterOutputStream.usesDefaultDeflater

    /// protected java.io.OutputStream java.io.FilterOutputStream.out

    private static var out_FieldID: jfieldID?

    override open var out: /* java.io.OutputStream */ UnclassedObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "out", fieldType: "Ljava/io/OutputStream;", fieldCache: &ZipOutputStream.out_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? /* java.io.OutputStream */ UnclassedObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "out", fieldType: "Ljava/io/OutputStream;", fieldCache: &ZipOutputStream.out_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public java.util.zip.ZipOutputStream(java.io.OutputStream)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: /* java.io.OutputStream */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/ZipOutputStream", classCache: &ZipOutputStream.ZipOutputStreamJNIClass, methodSig: "(Ljava/io/OutputStream;)V", methodCache: &ZipOutputStream.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* java.io.OutputStream */ UnclassedObject? ) {
        self.init( arg0: _arg0 )
    }

    /// public synchronized void java.util.zip.ZipOutputStream.write(byte[],int,int) throws java.io.IOException

    /// public void java.util.zip.ZipOutputStream.close() throws java.io.IOException

    /// private void java.util.zip.ZipOutputStream.writeInt(long) throws java.io.IOException

    /// private void java.util.zip.ZipOutputStream.writeBytes(byte[],int,int) throws java.io.IOException

    /// private void java.util.zip.ZipOutputStream.ensureOpen() throws java.io.IOException

    /// private void java.util.zip.ZipOutputStream.writeShort(int) throws java.io.IOException

    /// public void java.util.zip.ZipOutputStream.setMethod(int)

    private static var setMethod_MethodID_2: jmethodID?

    open func setMethod( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMethod", methodSig: "(I)V", methodCache: &ZipOutputStream.setMethod_MethodID_2, args: &__args, locals: &__locals )
    }

    open func setMethod( _ _arg0: Int ) {
        setMethod( arg0: _arg0 )
    }

    /// public void java.util.zip.ZipOutputStream.setComment(java.lang.String)

    private static var setComment_MethodID_3: jmethodID?

    open func setComment( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setComment", methodSig: "(Ljava/lang/String;)V", methodCache: &ZipOutputStream.setComment_MethodID_3, args: &__args, locals: &__locals )
    }

    open func setComment( _ _arg0: String? ) {
        setComment( arg0: _arg0 )
    }

    /// static int java.util.zip.ZipOutputStream.getUTF8Length(java.lang.String)

    /// private static int java.util.zip.ZipOutputStream.version(java.util.zip.ZipEntry) throws java.util.zip.ZipException

    /// public void java.util.zip.ZipOutputStream.finish() throws java.io.IOException

    /// public void java.util.zip.ZipOutputStream.closeEntry() throws java.io.IOException

    private static var closeEntry_MethodID_4: jmethodID?

    open func closeEntry() throws /* java.io.IOException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "closeEntry", methodSig: "()V", methodCache: &ZipOutputStream.closeEntry_MethodID_4, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.IOException */ UnclassedObject( javaObject: throwable )
        }
    }


    /// public void java.util.zip.ZipOutputStream.putNextEntry(java.util.zip.ZipEntry) throws java.io.IOException

    private static var putNextEntry_MethodID_5: jmethodID?

    open func putNextEntry( arg0: ZipEntry? ) throws /* java.io.IOException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putNextEntry", methodSig: "(Ljava/util/zip/ZipEntry;)V", methodCache: &ZipOutputStream.putNextEntry_MethodID_5, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.IOException */ UnclassedObject( javaObject: throwable )
        }
    }

    open func putNextEntry( _ _arg0: ZipEntry? ) throws /* java.io.IOException */ {
        try putNextEntry( arg0: _arg0 )
    }

    /// public void java.util.zip.ZipOutputStream.setLevel(int)

    private static var setLevel_MethodID_6: jmethodID?

    open func setLevel( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLevel", methodSig: "(I)V", methodCache: &ZipOutputStream.setLevel_MethodID_6, args: &__args, locals: &__locals )
    }

    open func setLevel( _ _arg0: Int ) {
        setLevel( arg0: _arg0 )
    }

    /// private void java.util.zip.ZipOutputStream.writeLOC(java.util.zip.ZipOutputStream$XEntry) throws java.io.IOException

    /// private void java.util.zip.ZipOutputStream.writeEXT(java.util.zip.ZipEntry) throws java.io.IOException

    /// private void java.util.zip.ZipOutputStream.writeCEN(java.util.zip.ZipOutputStream$XEntry) throws java.io.IOException

    /// private void java.util.zip.ZipOutputStream.writeEND(long,long) throws java.io.IOException

    /// private static byte[] java.util.zip.ZipOutputStream.getUTF8Bytes(java.lang.String)

}
