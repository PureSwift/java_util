
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:45 GMT 2016 ///

/// class java.util.Timer ///

open class Timer: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.Timer", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var TimerJNIClass: jclass?

    /// private java.util.TaskQueue java.util.Timer.queue

    /// private java.util.TimerThread java.util.Timer.thread

    /// private java.lang.Object java.util.Timer.threadReaper

    /// private static int java.util.Timer.nextSerialNumber

    /// public java.util.Timer(java.lang.String)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Timer", classCache: &Timer.TimerJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &Timer.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.Timer()

    private static var new_MethodID_2: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/Timer", classCache: &Timer.TimerJNIClass, methodSig: "()V", methodCache: &Timer.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.Timer(boolean)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Timer", classCache: &Timer.TimerJNIClass, methodSig: "(Z)V", methodCache: &Timer.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Bool ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.Timer(java.lang.String,boolean)

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: String?, arg1: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/Timer", classCache: &Timer.TimerJNIClass, methodSig: "(Ljava/lang/String;Z)V", methodCache: &Timer.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: Bool ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// static java.util.TimerThread java.util.Timer.access$100(java.util.Timer)

    /// static java.util.TaskQueue java.util.Timer.access$000(java.util.Timer)

    /// private static synchronized int java.util.Timer.serialNumber()

    /// public void java.util.Timer.schedule(java.util.TimerTask,java.util.Date,long)

    private static var schedule_MethodID_5: jmethodID?

    open func schedule( arg0: TimerTask?, arg1: Date?, arg2: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "schedule", methodSig: "(Ljava/util/TimerTask;Ljava/util/Date;J)V", methodCache: &Timer.schedule_MethodID_5, args: &__args, locals: &__locals )
    }

    open func schedule( _ _arg0: TimerTask?, _ _arg1: Date?, _ _arg2: Int64 ) {
        schedule( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.util.Timer.schedule(java.util.TimerTask,long,long)

    private static var schedule_MethodID_6: jmethodID?

    open func schedule( arg0: TimerTask?, arg1: Int64, arg2: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "schedule", methodSig: "(Ljava/util/TimerTask;JJ)V", methodCache: &Timer.schedule_MethodID_6, args: &__args, locals: &__locals )
    }

    open func schedule( _ _arg0: TimerTask?, _ _arg1: Int64, _ _arg2: Int64 ) {
        schedule( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.util.Timer.schedule(java.util.TimerTask,java.util.Date)

    private static var schedule_MethodID_7: jmethodID?

    open func schedule( arg0: TimerTask?, arg1: Date? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "schedule", methodSig: "(Ljava/util/TimerTask;Ljava/util/Date;)V", methodCache: &Timer.schedule_MethodID_7, args: &__args, locals: &__locals )
    }

    open func schedule( _ _arg0: TimerTask?, _ _arg1: Date? ) {
        schedule( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.util.Timer.schedule(java.util.TimerTask,long)

    private static var schedule_MethodID_8: jmethodID?

    open func schedule( arg0: TimerTask?, arg1: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "schedule", methodSig: "(Ljava/util/TimerTask;J)V", methodCache: &Timer.schedule_MethodID_8, args: &__args, locals: &__locals )
    }

    open func schedule( _ _arg0: TimerTask?, _ _arg1: Int64 ) {
        schedule( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.util.Timer.scheduleAtFixedRate(java.util.TimerTask,long,long)

    private static var scheduleAtFixedRate_MethodID_9: jmethodID?

    open func scheduleAtFixedRate( arg0: TimerTask?, arg1: Int64, arg2: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "scheduleAtFixedRate", methodSig: "(Ljava/util/TimerTask;JJ)V", methodCache: &Timer.scheduleAtFixedRate_MethodID_9, args: &__args, locals: &__locals )
    }

    open func scheduleAtFixedRate( _ _arg0: TimerTask?, _ _arg1: Int64, _ _arg2: Int64 ) {
        scheduleAtFixedRate( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.util.Timer.scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long)

    private static var scheduleAtFixedRate_MethodID_10: jmethodID?

    open func scheduleAtFixedRate( arg0: TimerTask?, arg1: Date?, arg2: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "scheduleAtFixedRate", methodSig: "(Ljava/util/TimerTask;Ljava/util/Date;J)V", methodCache: &Timer.scheduleAtFixedRate_MethodID_10, args: &__args, locals: &__locals )
    }

    open func scheduleAtFixedRate( _ _arg0: TimerTask?, _ _arg1: Date?, _ _arg2: Int64 ) {
        scheduleAtFixedRate( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// private void java.util.Timer.sched(java.util.TimerTask,long,long)

    /// public void java.util.Timer.cancel()

    private static var cancel_MethodID_11: jmethodID?

    open func cancel() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "cancel", methodSig: "()V", methodCache: &Timer.cancel_MethodID_11, args: &__args, locals: &__locals )
    }


    /// public int java.util.Timer.purge()

    private static var purge_MethodID_12: jmethodID?

    open func purge() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "purge", methodSig: "()I", methodCache: &Timer.purge_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


}
