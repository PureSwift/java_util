
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:48 GMT 2016 ///

/// class java.util.concurrent.Exchanger ///

open class Exchanger: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.Exchanger", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ExchangerJNIClass: jclass?

    /// private static final int java.util.concurrent.Exchanger.NCPU

    /// private static final int java.util.concurrent.Exchanger.CAPACITY

    /// private static final int java.util.concurrent.Exchanger.FULL

    /// private static final int java.util.concurrent.Exchanger.SPINS

    /// private static final int java.util.concurrent.Exchanger.TIMED_SPINS

    /// private static final java.lang.Object java.util.concurrent.Exchanger.CANCEL

    /// private static final java.lang.Object java.util.concurrent.Exchanger.NULL_ITEM

    /// private volatile java.util.concurrent.Exchanger$Slot[] java.util.concurrent.Exchanger.arena

    /// private final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.Exchanger.max

    /// public java.util.concurrent.Exchanger()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/Exchanger", classCache: &Exchanger.ExchangerJNIClass, methodSig: "()V", methodCache: &Exchanger.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// private static java.lang.Object java.util.concurrent.Exchanger.await(java.util.concurrent.Exchanger$Node,java.util.concurrent.Exchanger$Slot)

    /// private java.lang.Object java.util.concurrent.Exchanger.awaitNanos(java.util.concurrent.Exchanger$Node,java.util.concurrent.Exchanger$Slot,long)

    /// private java.lang.Object java.util.concurrent.Exchanger.doExchange(java.lang.Object,boolean,long)

    /// private final int java.util.concurrent.Exchanger.hashIndex()

    /// private void java.util.concurrent.Exchanger.createSlot(int)

    /// private static boolean java.util.concurrent.Exchanger.tryCancel(java.util.concurrent.Exchanger$Node,java.util.concurrent.Exchanger$Slot)

    /// private static java.lang.Object java.util.concurrent.Exchanger.spinWait(java.util.concurrent.Exchanger$Node,java.util.concurrent.Exchanger$Slot)

    /// private java.lang.Object java.util.concurrent.Exchanger.scanOnTimeout(java.util.concurrent.Exchanger$Node)

    /// public java.lang.Object java.util.concurrent.Exchanger.exchange(java.lang.Object) throws java.lang.InterruptedException

    private static var exchange_MethodID_2: jmethodID?

    open func exchange( arg0: java_lang.JavaObject? ) throws /* java.lang.InterruptedException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "exchange", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &Exchanger.exchange_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func exchange( _ _arg0: java_lang.JavaObject? ) throws /* java.lang.InterruptedException */ -> java_lang.JavaObject! {
        return try exchange( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.concurrent.Exchanger.exchange(java.lang.Object,long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException,java.util.concurrent.TimeoutException

    private static var exchange_MethodID_3: jmethodID?

    open func exchange( arg0: java_lang.JavaObject?, arg1: Int64, arg2: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.TimeoutException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "exchange", methodSig: "(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", methodCache: &Exchanger.exchange_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func exchange( _ _arg0: java_lang.JavaObject?, _ _arg1: Int64, _ _arg2: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.TimeoutException */ -> java_lang.JavaObject! {
        return try exchange( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

}
