
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.ArrayList ///

open class ArrayList: AbstractList, RandomAccess, java_lang.Cloneable, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.ArrayList", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ArrayListJNIClass: jclass?

    /// private static final long java.util.ArrayList.serialVersionUID

    /// private static final int java.util.ArrayList.DEFAULT_CAPACITY

    /// private static final java.lang.Object[] java.util.ArrayList.EMPTY_ELEMENTDATA

    /// private static final java.lang.Object[] java.util.ArrayList.DEFAULTCAPACITY_EMPTY_ELEMENTDATA

    /// transient java.lang.Object[] java.util.ArrayList.elementData

    /// private int java.util.ArrayList.size

    /// private static final int java.util.ArrayList.MAX_ARRAY_SIZE

    /// protected transient int java.util.AbstractList.modCount

    private static var modCount_FieldID: jfieldID?

    override open var modCount: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "modCount", fieldType: "I", fieldCache: &ArrayList.modCount_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "modCount", fieldType: "I", fieldCache: &ArrayList.modCount_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private static final int java.util.AbstractCollection.MAX_ARRAY_SIZE

    /// public java.util.ArrayList(java.util.Collection)

    private static var new_MethodID_1: jmethodID?

    public convenience init( c: Collection? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/ArrayList", classCache: &ArrayList.ArrayListJNIClass, methodSig: "(Ljava/util/Collection;)V", methodCache: &ArrayList.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _c: Collection? ) {
        self.init( c: _c )
    }

    /// public java.util.ArrayList()

    private static var new_MethodID_2: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/ArrayList", classCache: &ArrayList.ArrayListJNIClass, methodSig: "()V", methodCache: &ArrayList.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.ArrayList(int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( initialCapacity: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: initialCapacity, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/ArrayList", classCache: &ArrayList.ArrayListJNIClass, methodSig: "(I)V", methodCache: &ArrayList.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _initialCapacity: Int ) {
        self.init( initialCapacity: _initialCapacity )
    }

    /// public boolean java.util.ArrayList.add(java.lang.Object)

    /// public void java.util.ArrayList.add(int,java.lang.Object)

    /// public boolean java.util.ArrayList.remove(java.lang.Object)

    /// public java.lang.Object java.util.ArrayList.remove(int)

    /// public java.lang.Object java.util.ArrayList.get(int)

    /// public java.lang.Object java.util.ArrayList.clone()

    private static var clone_MethodID_4: jmethodID?

    override open func clone() -> java_swift.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &ArrayList.clone_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public int java.util.ArrayList.indexOf(java.lang.Object)

    /// public void java.util.ArrayList.clear()

    /// public boolean java.util.ArrayList.isEmpty()

    /// public int java.util.ArrayList.lastIndexOf(java.lang.Object)

    /// public boolean java.util.ArrayList.contains(java.lang.Object)

    /// public void java.util.ArrayList.replaceAll(java.util.function.UnaryOperator)

    /// public int java.util.ArrayList.size()

    /// public java.util.List java.util.ArrayList.subList(int,int)

    /// public java.lang.Object[] java.util.ArrayList.toArray(java.lang.Object[])

    /// public java.lang.Object[] java.util.ArrayList.toArray()

    /// public java.util.Iterator java.util.ArrayList.iterator()

    /// public java.util.Spliterator java.util.ArrayList.spliterator()

    /// public boolean java.util.ArrayList.addAll(int,java.util.Collection)

    /// public boolean java.util.ArrayList.addAll(java.util.Collection)

    /// static int java.util.ArrayList.access$100(java.util.ArrayList)

    /// private void java.util.ArrayList.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// private void java.util.ArrayList.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// public void java.util.ArrayList.forEach(java.util.function.Consumer)

    /// public java.lang.Object java.util.ArrayList.set(int,java.lang.Object)

    /// public void java.util.ArrayList.ensureCapacity(int)

    private static var ensureCapacity_MethodID_5: jmethodID?

    open func ensureCapacity( minCapacity: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: minCapacity, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "ensureCapacity", methodSig: "(I)V", methodCache: &ArrayList.ensureCapacity_MethodID_5, args: &__args, locals: &__locals )
    }

    open func ensureCapacity( _ _minCapacity: Int ) {
        ensureCapacity( minCapacity: _minCapacity )
    }

    /// public void java.util.ArrayList.trimToSize()

    private static var trimToSize_MethodID_6: jmethodID?

    open func trimToSize() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "trimToSize", methodSig: "()V", methodCache: &ArrayList.trimToSize_MethodID_6, args: &__args, locals: &__locals )
    }


    /// private void java.util.ArrayList.ensureCapacityInternal(int)

    /// java.lang.Object java.util.ArrayList.elementData(int)

    /// private void java.util.ArrayList.grow(int)

    /// private static int java.util.ArrayList.hugeCapacity(int)

    /// public boolean java.util.ArrayList.removeAll(java.util.Collection)

    /// public boolean java.util.ArrayList.retainAll(java.util.Collection)

    /// protected void java.util.ArrayList.removeRange(int,int)

    private static var removeRange_MethodID_7: jmethodID?

    override open func removeRange( fromIndex: Int, toIndex: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: fromIndex, locals: &__locals )
        __args[1] = JNIType.toJava( value: toIndex, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeRange", methodSig: "(II)V", methodCache: &ArrayList.removeRange_MethodID_7, args: &__args, locals: &__locals )
    }

    override open func removeRange( _ _fromIndex: Int, _ _toIndex: Int ) {
        removeRange( fromIndex: _fromIndex, toIndex: _toIndex )
    }

    /// public java.util.ListIterator java.util.ArrayList.listIterator()

    /// public java.util.ListIterator java.util.ArrayList.listIterator(int)

    /// public boolean java.util.ArrayList.removeIf(java.util.function.Predicate)

    /// public void java.util.ArrayList.sort(java.util.Comparator)

    /// private void java.util.ArrayList.rangeCheckForAdd(int)

    /// private java.lang.String java.util.ArrayList.outOfBoundsMsg(int)

    /// private void java.util.ArrayList.ensureExplicitCapacity(int)

    /// private void java.util.ArrayList.fastRemove(int)

    /// private void java.util.ArrayList.rangeCheck(int)

    /// private boolean java.util.ArrayList.batchRemove(java.util.Collection,boolean)

    /// static void java.util.ArrayList.subListRangeCheck(int,int,int)

    /// In declared protocol but not defined.. ///

    /// public abstract boolean java.util.Collection.equals(java.lang.Object)

    /// public abstract boolean java.util.Collection.containsAll(java.util.Collection)

    /// public abstract boolean java.util.Collection.remove(java.lang.Object)

    /// public abstract boolean java.util.Collection.removeAll(java.util.Collection)

    /// public abstract java.util.ListIterator java.util.List.listIterator()

    /// public abstract java.lang.Object[] java.util.Collection.toArray()

    /// public abstract java.lang.Object java.util.List.remove(int)

    /// public abstract boolean java.util.Collection.contains(java.lang.Object)

    /// public abstract java.lang.Object[] java.util.Collection.toArray(java.lang.Object[])

    /// public abstract int java.util.Collection.hashCode()

    /// public default void java.lang.Iterable.forEach(java.util.function.Consumer)

    /// public abstract java.lang.Object java.util.List.get(int)

    /// public default boolean java.util.Collection.removeIf(java.util.function.Predicate)

    /// public default java.util.stream.Stream java.util.Collection.parallelStream()

    /// public default void java.util.List.sort(java.util.Comparator)

    /// public abstract java.util.ListIterator java.util.List.listIterator(int)

    /// public abstract void java.util.Collection.clear()

    /// public abstract void java.util.List.add(int,java.lang.Object)

    /// public abstract boolean java.util.List.addAll(int,java.util.Collection)

    /// public abstract boolean java.util.Collection.isEmpty()

    /// public abstract boolean java.util.Collection.addAll(java.util.Collection)

    /// public abstract java.util.List java.util.List.subList(int,int)

    /// public abstract int java.util.List.lastIndexOf(java.lang.Object)

    /// public abstract int java.util.List.indexOf(java.lang.Object)

    /// public default void java.util.List.replaceAll(java.util.function.UnaryOperator)

    /// public abstract boolean java.util.Collection.retainAll(java.util.Collection)

    /// public abstract java.util.Iterator java.lang.Iterable.iterator()

    /// public default java.util.Spliterator java.lang.Iterable.spliterator()

    /// public abstract java.lang.Object java.util.List.set(int,java.lang.Object)

    /// public abstract boolean java.util.Collection.add(java.lang.Object)

    /// public default java.util.stream.Stream java.util.Collection.stream()

    /// public abstract int java.util.Collection.size()

}

