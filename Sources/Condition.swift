
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:01 GMT 2016 ///

/// interface java.util.concurrent.locks.Condition ///

public protocol Condition: JavaProtocol {

    /// public abstract void java.util.concurrent.locks.Condition.signal()

    func signal()

    /// public abstract void java.util.concurrent.locks.Condition.await() throws java.lang.InterruptedException

    func await() throws /* java.lang.InterruptedException */

    /// public abstract boolean java.util.concurrent.locks.Condition.await(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    func await( arg0: Int64, arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool
    func await( _ _arg0: Int64, _ _arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool

    /// public abstract long java.util.concurrent.locks.Condition.awaitNanos(long) throws java.lang.InterruptedException

    func awaitNanos( arg0: Int64 ) throws /* java.lang.InterruptedException */ -> Int64
    func awaitNanos( _ _arg0: Int64 ) throws /* java.lang.InterruptedException */ -> Int64

    /// public abstract void java.util.concurrent.locks.Condition.signalAll()

    func signalAll()

    /// public abstract void java.util.concurrent.locks.Condition.awaitUninterruptibly()

    func awaitUninterruptibly()

    /// public abstract boolean java.util.concurrent.locks.Condition.awaitUntil(java.util.Date) throws java.lang.InterruptedException

    func awaitUntil( arg0: Date? ) throws /* java.lang.InterruptedException */ -> Bool
    func awaitUntil( _ _arg0: Date? ) throws /* java.lang.InterruptedException */ -> Bool

}

open class ConditionForward: JNIObjectForward, Condition {

    private static var ConditionJNIClass: jclass?

    /// public abstract void java.util.concurrent.locks.Condition.signal()

    private static var signal_MethodID_8: jmethodID?

    open func signal() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "signal", methodSig: "()V", methodCache: &ConditionForward.signal_MethodID_8, args: &__args, locals: &__locals )
    }


    /// public abstract void java.util.concurrent.locks.Condition.await() throws java.lang.InterruptedException

    private static var await_MethodID_9: jmethodID?

    open func await() throws /* java.lang.InterruptedException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "await", methodSig: "()V", methodCache: &ConditionForward.await_MethodID_9, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
    }


    /// public abstract boolean java.util.concurrent.locks.Condition.await(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var await_MethodID_10: jmethodID?

    open func await( arg0: Int64, arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "await", methodSig: "(JLjava/util/concurrent/TimeUnit;)Z", methodCache: &ConditionForward.await_MethodID_10, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func await( _ _arg0: Int64, _ _arg1: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        return try await( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract long java.util.concurrent.locks.Condition.awaitNanos(long) throws java.lang.InterruptedException

    private static var awaitNanos_MethodID_11: jmethodID?

    open func awaitNanos( arg0: Int64 ) throws /* java.lang.InterruptedException */ -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "awaitNanos", methodSig: "(J)J", methodCache: &ConditionForward.awaitNanos_MethodID_11, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return JNIType.decode( type: Int64(), from: __return )
    }

    open func awaitNanos( _ _arg0: Int64 ) throws /* java.lang.InterruptedException */ -> Int64 {
        return try awaitNanos( arg0: _arg0 )
    }

    /// public abstract void java.util.concurrent.locks.Condition.signalAll()

    private static var signalAll_MethodID_12: jmethodID?

    open func signalAll() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "signalAll", methodSig: "()V", methodCache: &ConditionForward.signalAll_MethodID_12, args: &__args, locals: &__locals )
    }


    /// public abstract void java.util.concurrent.locks.Condition.awaitUninterruptibly()

    private static var awaitUninterruptibly_MethodID_13: jmethodID?

    open func awaitUninterruptibly() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "awaitUninterruptibly", methodSig: "()V", methodCache: &ConditionForward.awaitUninterruptibly_MethodID_13, args: &__args, locals: &__locals )
    }


    /// public abstract boolean java.util.concurrent.locks.Condition.awaitUntil(java.util.Date) throws java.lang.InterruptedException

    private static var awaitUntil_MethodID_14: jmethodID?

    open func awaitUntil( arg0: Date? ) throws /* java.lang.InterruptedException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "awaitUntil", methodSig: "(Ljava/util/Date;)Z", methodCache: &ConditionForward.awaitUntil_MethodID_14, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func awaitUntil( _ _arg0: Date? ) throws /* java.lang.InterruptedException */ -> Bool {
        return try awaitUntil( arg0: _arg0 )
    }

}


