
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.HashSet ///

open class HashSet: AbstractSet, java_lang.Cloneable {////}, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.HashSet", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var HashSetJNIClass: jclass?

    /// static final long java.util.HashSet.serialVersionUID

    /// private transient java.util.HashMap java.util.HashSet.map

    /// private static final java.lang.Object java.util.HashSet.PRESENT

    /// private static final int java.util.AbstractCollection.MAX_ARRAY_SIZE

    /// java.util.HashSet(int,float,boolean)

    /// public java.util.HashSet(int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( initialCapacity: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: initialCapacity, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/HashSet", classCache: &HashSet.HashSetJNIClass, methodSig: "(I)V", methodCache: &HashSet.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _initialCapacity: Int ) {
        self.init( initialCapacity: _initialCapacity )
    }

    /// public java.util.HashSet(int,float)

    private static var new_MethodID_2: jmethodID?

    public convenience init( initialCapacity: Int, loadFactor: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: initialCapacity, locals: &__locals )
        __args[1] = JNIType.toJava( value: loadFactor, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/HashSet", classCache: &HashSet.HashSetJNIClass, methodSig: "(IF)V", methodCache: &HashSet.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _initialCapacity: Int, _ _loadFactor: Float ) {
        self.init( initialCapacity: _initialCapacity, loadFactor: _loadFactor )
    }

    /// public java.util.HashSet(java.util.Collection)

    private static var new_MethodID_3: jmethodID?

    public convenience init( c: Collection? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/HashSet", classCache: &HashSet.HashSetJNIClass, methodSig: "(Ljava/util/Collection;)V", methodCache: &HashSet.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _c: Collection? ) {
        self.init( c: _c )
    }

    /// public java.util.HashSet()

    private static var new_MethodID_4: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/HashSet", classCache: &HashSet.HashSetJNIClass, methodSig: "()V", methodCache: &HashSet.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public boolean java.util.HashSet.add(java.lang.Object)

    /// public boolean java.util.HashSet.remove(java.lang.Object)

    /// public java.lang.Object java.util.HashSet.clone()

    private static var clone_MethodID_5: jmethodID?

    override open func clone() -> java_swift.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &HashSet.clone_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public void java.util.HashSet.clear()

    /// public boolean java.util.HashSet.isEmpty()

    /// public boolean java.util.HashSet.contains(java.lang.Object)

    /// public int java.util.HashSet.size()

    /// public java.util.Iterator java.util.HashSet.iterator()

    /// public java.util.Spliterator java.util.HashSet.spliterator()

    /// private void java.util.HashSet.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// private void java.util.HashSet.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// In declared protocol but not defined.. ///

    /// public abstract boolean java.util.Collection.equals(java.lang.Object)

    /// public abstract boolean java.util.Collection.containsAll(java.util.Collection)

    /// public abstract boolean java.util.Collection.isEmpty()

    /// public abstract boolean java.util.Collection.addAll(java.util.Collection)

    /// public abstract boolean java.util.Collection.remove(java.lang.Object)

    /// public abstract boolean java.util.Collection.removeAll(java.util.Collection)

    /// public abstract java.lang.Object[] java.util.Collection.toArray()

    /// public abstract boolean java.util.Collection.contains(java.lang.Object)

    /// public abstract java.lang.Object[] java.util.Collection.toArray(java.lang.Object[])

    /// public abstract boolean java.util.Collection.retainAll(java.util.Collection)

    /// public abstract int java.util.Collection.hashCode()

    /// public default void java.lang.Iterable.forEach(java.util.function.Consumer)

    /// public abstract java.util.Iterator java.lang.Iterable.iterator()

    /// public default java.util.Spliterator java.lang.Iterable.spliterator()

    /// public default boolean java.util.Collection.removeIf(java.util.function.Predicate)

    /// public default java.util.stream.Stream java.util.Collection.parallelStream()

    /// public abstract boolean java.util.Collection.add(java.lang.Object)

    /// public default java.util.stream.Stream java.util.Collection.stream()

    /// public abstract void java.util.Collection.clear()

    /// public abstract int java.util.Collection.size()

}

