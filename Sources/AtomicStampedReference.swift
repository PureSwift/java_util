
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:52 GMT 2016 ///

/// class java.util.concurrent.atomic.AtomicStampedReference ///

open class AtomicStampedReference: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.atomic.AtomicStampedReference", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AtomicStampedReferenceJNIClass: jclass?

    /// private final java.util.concurrent.atomic.AtomicReference java.util.concurrent.atomic.AtomicStampedReference.atomicRef

    /// public java.util.concurrent.atomic.AtomicStampedReference(java.lang.Object,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: java_lang.JavaObject?, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/atomic/AtomicStampedReference", classCache: &AtomicStampedReference.AtomicStampedReferenceJNIClass, methodSig: "(Ljava/lang/Object;I)V", methodCache: &AtomicStampedReference.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: java_lang.JavaObject?, _ _arg1: Int ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.lang.Object java.util.concurrent.atomic.AtomicStampedReference.get(int[])

    private static var get_MethodID_2: jmethodID?

    open func get( arg0: [Int32]? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "([I)Ljava/lang/Object;", methodCache: &AtomicStampedReference.get_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func get( _ _arg0: [Int32]? ) -> java_lang.JavaObject! {
        return get( arg0: _arg0 )
    }

    /// public void java.util.concurrent.atomic.AtomicStampedReference.set(java.lang.Object,int)

    private static var set_MethodID_3: jmethodID?

    open func set( arg0: java_lang.JavaObject?, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "set", methodSig: "(Ljava/lang/Object;I)V", methodCache: &AtomicStampedReference.set_MethodID_3, args: &__args, locals: &__locals )
    }

    open func set( _ _arg0: java_lang.JavaObject?, _ _arg1: Int ) {
        set( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.util.concurrent.atomic.AtomicStampedReference.compareAndSet(java.lang.Object,java.lang.Object,int,int)

    private static var compareAndSet_MethodID_4: jmethodID?

    open func compareAndSet( arg0: java_lang.JavaObject?, arg1: java_lang.JavaObject?, arg2: Int, arg3: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "compareAndSet", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;II)Z", methodCache: &AtomicStampedReference.compareAndSet_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func compareAndSet( _ _arg0: java_lang.JavaObject?, _ _arg1: java_lang.JavaObject?, _ _arg2: Int, _ _arg3: Int ) -> Bool {
        return compareAndSet( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public boolean java.util.concurrent.atomic.AtomicStampedReference.weakCompareAndSet(java.lang.Object,java.lang.Object,int,int)

    private static var weakCompareAndSet_MethodID_5: jmethodID?

    open func weakCompareAndSet( arg0: java_lang.JavaObject?, arg1: java_lang.JavaObject?, arg2: Int, arg3: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "weakCompareAndSet", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;II)Z", methodCache: &AtomicStampedReference.weakCompareAndSet_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func weakCompareAndSet( _ _arg0: java_lang.JavaObject?, _ _arg1: java_lang.JavaObject?, _ _arg2: Int, _ _arg3: Int ) -> Bool {
        return weakCompareAndSet( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.lang.Object java.util.concurrent.atomic.AtomicStampedReference.getReference()

    private static var getReference_MethodID_6: jmethodID?

    open func getReference() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getReference", methodSig: "()Ljava/lang/Object;", methodCache: &AtomicStampedReference.getReference_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public int java.util.concurrent.atomic.AtomicStampedReference.getStamp()

    private static var getStamp_MethodID_7: jmethodID?

    open func getStamp() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getStamp", methodSig: "()I", methodCache: &AtomicStampedReference.getStamp_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public boolean java.util.concurrent.atomic.AtomicStampedReference.attemptStamp(java.lang.Object,int)

    private static var attemptStamp_MethodID_8: jmethodID?

    open func attemptStamp( arg0: java_lang.JavaObject?, arg1: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "attemptStamp", methodSig: "(Ljava/lang/Object;I)Z", methodCache: &AtomicStampedReference.attemptStamp_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func attemptStamp( _ _arg0: java_lang.JavaObject?, _ _arg1: Int ) -> Bool {
        return attemptStamp( arg0: _arg0, arg1: _arg1 )
    }

}
