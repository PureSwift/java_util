
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:01 GMT 2016 ///

/// class java.util.concurrent.atomic.AtomicBoolean ///

open class AtomicBoolean: java_lang.JavaObject, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.atomic.AtomicBoolean", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AtomicBooleanJNIClass: jclass?

    /// private static final long java.util.concurrent.atomic.AtomicBoolean.serialVersionUID

    /// private static final sun.misc.Unsafe java.util.concurrent.atomic.AtomicBoolean.unsafe

    /// private static final long java.util.concurrent.atomic.AtomicBoolean.valueOffset

    /// private volatile int java.util.concurrent.atomic.AtomicBoolean.value

    /// public java.util.concurrent.atomic.AtomicBoolean(boolean)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/atomic/AtomicBoolean", classCache: &AtomicBoolean.AtomicBooleanJNIClass, methodSig: "(Z)V", methodCache: &AtomicBoolean.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Bool ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.concurrent.atomic.AtomicBoolean()

    private static var new_MethodID_2: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/atomic/AtomicBoolean", classCache: &AtomicBoolean.AtomicBooleanJNIClass, methodSig: "()V", methodCache: &AtomicBoolean.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public final boolean java.util.concurrent.atomic.AtomicBoolean.get()

    private static var get_MethodID_3: jmethodID?

    open func get() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "get", methodSig: "()Z", methodCache: &AtomicBoolean.get_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public java.lang.String java.util.concurrent.atomic.AtomicBoolean.toString()

    /// public final void java.util.concurrent.atomic.AtomicBoolean.set(boolean)

    private static var set_MethodID_4: jmethodID?

    open func set( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "set", methodSig: "(Z)V", methodCache: &AtomicBoolean.set_MethodID_4, args: &__args, locals: &__locals )
    }

    open func set( _ _arg0: Bool ) {
        set( arg0: _arg0 )
    }

    /// public final void java.util.concurrent.atomic.AtomicBoolean.lazySet(boolean)

    private static var lazySet_MethodID_5: jmethodID?

    open func lazySet( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "lazySet", methodSig: "(Z)V", methodCache: &AtomicBoolean.lazySet_MethodID_5, args: &__args, locals: &__locals )
    }

    open func lazySet( _ _arg0: Bool ) {
        lazySet( arg0: _arg0 )
    }

    /// public final boolean java.util.concurrent.atomic.AtomicBoolean.getAndSet(boolean)

    private static var getAndSet_MethodID_6: jmethodID?

    open func getAndSet( arg0: Bool ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getAndSet", methodSig: "(Z)Z", methodCache: &AtomicBoolean.getAndSet_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func getAndSet( _ _arg0: Bool ) -> Bool {
        return getAndSet( arg0: _arg0 )
    }

    /// public final boolean java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean)

    private static var compareAndSet_MethodID_7: jmethodID?

    open func compareAndSet( arg0: Bool, arg1: Bool ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "compareAndSet", methodSig: "(ZZ)Z", methodCache: &AtomicBoolean.compareAndSet_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func compareAndSet( _ _arg0: Bool, _ _arg1: Bool ) -> Bool {
        return compareAndSet( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.util.concurrent.atomic.AtomicBoolean.weakCompareAndSet(boolean,boolean)

    private static var weakCompareAndSet_MethodID_8: jmethodID?

    open func weakCompareAndSet( arg0: Bool, arg1: Bool ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "weakCompareAndSet", methodSig: "(ZZ)Z", methodCache: &AtomicBoolean.weakCompareAndSet_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func weakCompareAndSet( _ _arg0: Bool, _ _arg1: Bool ) -> Bool {
        return weakCompareAndSet( arg0: _arg0, arg1: _arg1 )
    }

}
