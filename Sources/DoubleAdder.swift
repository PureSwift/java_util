
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.concurrent.atomic.DoubleAdder ///

open class DoubleAdder: /* java.util.concurrent.atomic.Striped64 */ UnclassedObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DoubleAdderJNIClass: jclass?

    /// private static final long java.util.concurrent.atomic.DoubleAdder.serialVersionUID

    /// static final int java.util.concurrent.atomic.Striped64.NCPU

    /// transient volatile java.util.concurrent.atomic.Striped64$Cell[] java.util.concurrent.atomic.Striped64.cells

    /// transient volatile long java.util.concurrent.atomic.Striped64.base

    /// transient volatile int java.util.concurrent.atomic.Striped64.cellsBusy

    /// private static final sun.misc.Unsafe java.util.concurrent.atomic.Striped64.UNSAFE

    /// private static final long java.util.concurrent.atomic.Striped64.BASE

    /// private static final long java.util.concurrent.atomic.Striped64.CELLSBUSY

    /// private static final long java.util.concurrent.atomic.Striped64.PROBE

    /// private static final long java.lang.Number.serialVersionUID

    /// public java.util.concurrent.atomic.DoubleAdder()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/atomic/DoubleAdder", classCache: &DoubleAdder.DoubleAdderJNIClass, methodSig: "()V", methodCache: &DoubleAdder.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void java.util.concurrent.atomic.DoubleAdder.add(double)

    private static var add_MethodID_2: jmethodID?

    open func add( x: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "add", methodSig: "(D)V", methodCache: &DoubleAdder.add_MethodID_2, args: &__args, locals: &__locals )
    }

    open func add( _ _x: Double ) {
        add( x: _x )
    }

    /// public java.lang.String java.util.concurrent.atomic.DoubleAdder.toString()

    /// public int java.util.concurrent.atomic.DoubleAdder.intValue()

    /// public long java.util.concurrent.atomic.DoubleAdder.longValue()

    /// public float java.util.concurrent.atomic.DoubleAdder.floatValue()

    /// public double java.util.concurrent.atomic.DoubleAdder.doubleValue()

    /// private void java.util.concurrent.atomic.DoubleAdder.readObject(java.io.ObjectInputStream) throws java.io.InvalidObjectException

    /// public void java.util.concurrent.atomic.DoubleAdder.reset()

    private static var reset_MethodID_3: jmethodID?

    open func reset() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reset", methodSig: "()V", methodCache: &DoubleAdder.reset_MethodID_3, args: &__args, locals: &__locals )
    }


    /// public double java.util.concurrent.atomic.DoubleAdder.sum()

    private static var sum_MethodID_4: jmethodID?

    open func sum() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "sum", methodSig: "()D", methodCache: &DoubleAdder.sum_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }


    /// private java.lang.Object java.util.concurrent.atomic.DoubleAdder.writeReplace()

    /// public double java.util.concurrent.atomic.DoubleAdder.sumThenReset()

    private static var sumThenReset_MethodID_5: jmethodID?

    open func sumThenReset() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "sumThenReset", methodSig: "()D", methodCache: &DoubleAdder.sumThenReset_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }


}

