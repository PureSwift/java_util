
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:56 GMT 2016 ///

/// class java.util.zip.Deflater ///

open class Deflater: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.zip.Deflater", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DeflaterJNIClass: jclass?

    /// private final java.util.zip.ZStreamRef java.util.zip.Deflater.zsRef

    /// private byte[] java.util.zip.Deflater.buf

    /// private int java.util.zip.Deflater.off

    /// private int java.util.zip.Deflater.len

    /// private int java.util.zip.Deflater.level

    /// private int java.util.zip.Deflater.strategy

    /// private boolean java.util.zip.Deflater.setParams

    /// private boolean java.util.zip.Deflater.finish

    /// private boolean java.util.zip.Deflater.finished

    /// public static final int java.util.zip.Deflater.DEFLATED

    private static var DEFLATED_FieldID: jfieldID?

    open static var DEFLATED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DEFLATED", fieldType: "I", fieldCache: &DEFLATED_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.zip.Deflater.NO_COMPRESSION

    private static var NO_COMPRESSION_FieldID: jfieldID?

    open static var NO_COMPRESSION: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "NO_COMPRESSION", fieldType: "I", fieldCache: &NO_COMPRESSION_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.zip.Deflater.BEST_SPEED

    private static var BEST_SPEED_FieldID: jfieldID?

    open static var BEST_SPEED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "BEST_SPEED", fieldType: "I", fieldCache: &BEST_SPEED_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.zip.Deflater.BEST_COMPRESSION

    private static var BEST_COMPRESSION_FieldID: jfieldID?

    open static var BEST_COMPRESSION: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "BEST_COMPRESSION", fieldType: "I", fieldCache: &BEST_COMPRESSION_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.zip.Deflater.DEFAULT_COMPRESSION

    private static var DEFAULT_COMPRESSION_FieldID: jfieldID?

    open static var DEFAULT_COMPRESSION: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DEFAULT_COMPRESSION", fieldType: "I", fieldCache: &DEFAULT_COMPRESSION_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.zip.Deflater.FILTERED

    private static var FILTERED_FieldID: jfieldID?

    open static var FILTERED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FILTERED", fieldType: "I", fieldCache: &FILTERED_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.zip.Deflater.HUFFMAN_ONLY

    private static var HUFFMAN_ONLY_FieldID: jfieldID?

    open static var HUFFMAN_ONLY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "HUFFMAN_ONLY", fieldType: "I", fieldCache: &HUFFMAN_ONLY_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.util.zip.Deflater.DEFAULT_STRATEGY

    private static var DEFAULT_STRATEGY_FieldID: jfieldID?

    open static var DEFAULT_STRATEGY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DEFAULT_STRATEGY", fieldType: "I", fieldCache: &DEFAULT_STRATEGY_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// static final boolean java.util.zip.Deflater.$assertionsDisabled

    /// public java.util.zip.Deflater(int,boolean)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int, arg1: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/Deflater", classCache: &Deflater.DeflaterJNIClass, methodSig: "(IZ)V", methodCache: &Deflater.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Bool ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.zip.Deflater(int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/Deflater", classCache: &Deflater.DeflaterJNIClass, methodSig: "(I)V", methodCache: &Deflater.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int ) {
        self.init( arg0: _arg0 )
    }

    /// public java.util.zip.Deflater()

    private static var new_MethodID_3: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/util/zip/Deflater", classCache: &Deflater.DeflaterJNIClass, methodSig: "()V", methodCache: &Deflater.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// protected void java.util.zip.Deflater.finalize()

    private static var finalize_MethodID_4: jmethodID?

    override open func finalize() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "finalize", methodSig: "()V", methodCache: &Deflater.finalize_MethodID_4, args: &__args, locals: &__locals )
    }


    /// private static native long java.util.zip.Deflater.init(int,int,boolean)

    /// public void java.util.zip.Deflater.reset()

    private static var reset_MethodID_5: jmethodID?

    open func reset() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reset", methodSig: "()V", methodCache: &Deflater.reset_MethodID_5, args: &__args, locals: &__locals )
    }


    /// private static native void java.util.zip.Deflater.reset(long)

    /// private static native void java.util.zip.Deflater.initIDs()

    /// public boolean java.util.zip.Deflater.finished()

    private static var finished_MethodID_6: jmethodID?

    open func finished() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "finished", methodSig: "()Z", methodCache: &Deflater.finished_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// private void java.util.zip.Deflater.ensureOpen()

    /// private static native void java.util.zip.Deflater.end(long)

    /// public void java.util.zip.Deflater.end()

    private static var end_MethodID_7: jmethodID?

    open func end() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "end", methodSig: "()V", methodCache: &Deflater.end_MethodID_7, args: &__args, locals: &__locals )
    }


    /// public void java.util.zip.Deflater.setInput(byte[])

    private static var setInput_MethodID_8: jmethodID?

    open func setInput( arg0: [Int8]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setInput", methodSig: "([B)V", methodCache: &Deflater.setInput_MethodID_8, args: &__args, locals: &__locals )
    }

    open func setInput( _ _arg0: [Int8]? ) {
        setInput( arg0: _arg0 )
    }

    /// public void java.util.zip.Deflater.setInput(byte[],int,int)

    private static var setInput_MethodID_9: jmethodID?

    open func setInput( arg0: [Int8]?, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setInput", methodSig: "([BII)V", methodCache: &Deflater.setInput_MethodID_9, args: &__args, locals: &__locals )
    }

    open func setInput( _ _arg0: [Int8]?, _ _arg1: Int, _ _arg2: Int ) {
        setInput( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public long java.util.zip.Deflater.getBytesWritten()

    private static var getBytesWritten_MethodID_10: jmethodID?

    open func getBytesWritten() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getBytesWritten", methodSig: "()J", methodCache: &Deflater.getBytesWritten_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }


    /// private static native long java.util.zip.Deflater.getBytesWritten(long)

    /// public boolean java.util.zip.Deflater.needsInput()

    private static var needsInput_MethodID_11: jmethodID?

    open func needsInput() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "needsInput", methodSig: "()Z", methodCache: &Deflater.needsInput_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public void java.util.zip.Deflater.setDictionary(byte[])

    private static var setDictionary_MethodID_12: jmethodID?

    open func setDictionary( arg0: [Int8]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDictionary", methodSig: "([B)V", methodCache: &Deflater.setDictionary_MethodID_12, args: &__args, locals: &__locals )
    }

    open func setDictionary( _ _arg0: [Int8]? ) {
        setDictionary( arg0: _arg0 )
    }

    /// public void java.util.zip.Deflater.setDictionary(byte[],int,int)

    private static var setDictionary_MethodID_13: jmethodID?

    open func setDictionary( arg0: [Int8]?, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDictionary", methodSig: "([BII)V", methodCache: &Deflater.setDictionary_MethodID_13, args: &__args, locals: &__locals )
    }

    open func setDictionary( _ _arg0: [Int8]?, _ _arg1: Int, _ _arg2: Int ) {
        setDictionary( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// private static native void java.util.zip.Deflater.setDictionary(long,byte[],int,int)

    /// private static native int java.util.zip.Deflater.getAdler(long)

    /// public int java.util.zip.Deflater.getAdler()

    private static var getAdler_MethodID_14: jmethodID?

    open func getAdler() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getAdler", methodSig: "()I", methodCache: &Deflater.getAdler_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.util.zip.Deflater.getTotalIn()

    private static var getTotalIn_MethodID_15: jmethodID?

    open func getTotalIn() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getTotalIn", methodSig: "()I", methodCache: &Deflater.getTotalIn_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public long java.util.zip.Deflater.getBytesRead()

    private static var getBytesRead_MethodID_16: jmethodID?

    open func getBytesRead() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getBytesRead", methodSig: "()J", methodCache: &Deflater.getBytesRead_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }


    /// private static native long java.util.zip.Deflater.getBytesRead(long)

    /// public int java.util.zip.Deflater.getTotalOut()

    private static var getTotalOut_MethodID_17: jmethodID?

    open func getTotalOut() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getTotalOut", methodSig: "()I", methodCache: &Deflater.getTotalOut_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public void java.util.zip.Deflater.finish()

    private static var finish_MethodID_18: jmethodID?

    open func finish() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "finish", methodSig: "()V", methodCache: &Deflater.finish_MethodID_18, args: &__args, locals: &__locals )
    }


    /// public void java.util.zip.Deflater.setLevel(int)

    private static var setLevel_MethodID_19: jmethodID?

    open func setLevel( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLevel", methodSig: "(I)V", methodCache: &Deflater.setLevel_MethodID_19, args: &__args, locals: &__locals )
    }

    open func setLevel( _ _arg0: Int ) {
        setLevel( arg0: _arg0 )
    }

    /// public int java.util.zip.Deflater.deflate(byte[],int,int)

    private static var deflate_MethodID_20: jmethodID?

    open func deflate( arg0: [Int8]?, arg1: Int, arg2: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "deflate", methodSig: "([BII)I", methodCache: &Deflater.deflate_MethodID_20, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func deflate( _ _arg0: [Int8]?, _ _arg1: Int, _ _arg2: Int ) -> Int {
        return deflate( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public int java.util.zip.Deflater.deflate(byte[])

    private static var deflate_MethodID_21: jmethodID?

    open func deflate( arg0: [Int8]? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "deflate", methodSig: "([B)I", methodCache: &Deflater.deflate_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func deflate( _ _arg0: [Int8]? ) -> Int {
        return deflate( arg0: _arg0 )
    }

    /// public void java.util.zip.Deflater.setStrategy(int)

    private static var setStrategy_MethodID_22: jmethodID?

    open func setStrategy( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setStrategy", methodSig: "(I)V", methodCache: &Deflater.setStrategy_MethodID_22, args: &__args, locals: &__locals )
    }

    open func setStrategy( _ _arg0: Int ) {
        setStrategy( arg0: _arg0 )
    }

    /// private native int java.util.zip.Deflater.deflateBytes(long,byte[],int,int)

}
